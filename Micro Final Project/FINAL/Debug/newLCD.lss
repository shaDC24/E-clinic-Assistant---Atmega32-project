
newLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003182  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000266  00800060  00003182  00003216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000354  008002c6  008002c6  0000347c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000347c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000034d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000588  00000000  00000000  00003514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005b0c  00000000  00000000  00003a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e10  00000000  00000000  000095a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002521  00000000  00000000  0000b3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bd8  00000000  00000000  0000d8dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c31  00000000  00000000  0000e4b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b86  00000000  00000000  0000f0e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000480  00000000  00000000  00011c6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	c5 04       	cpc	r12, r5
      56:	c8 04       	cpc	r12, r8
      58:	cb 04       	cpc	r12, r11
      5a:	ce 04       	cpc	r12, r14
      5c:	d1 04       	cpc	r13, r1
      5e:	d4 04       	cpc	r13, r4
      60:	d7 04       	cpc	r13, r7
      62:	5b 0f       	add	r21, r27
      64:	5e 0f       	add	r21, r30
      66:	61 0f       	add	r22, r17
      68:	64 0f       	add	r22, r20
      6a:	67 0f       	add	r22, r23
      6c:	6a 0f       	add	r22, r26
      6e:	6d 0f       	add	r22, r29

00000070 <__trampolines_end>:
      70:	00 40       	sbci	r16, 0x00	; 0
      72:	7a 10       	cpse	r7, r10
      74:	f3 5a       	subi	r31, 0xA3	; 163
      76:	00 a0       	ldd	r0, Z+32	; 0x20
      78:	72 4e       	sbci	r23, 0xE2	; 226
      7a:	18 09       	sbc	r17, r8
      7c:	00 10       	cpse	r0, r0
      7e:	a5 d4       	rcall	.+2378   	; 0x9ca <disable_jtag_for_portc+0xc>
      80:	e8 00       	.word	0x00e8	; ????
      82:	00 e8       	ldi	r16, 0x80	; 128
      84:	76 48       	sbci	r23, 0x86	; 134
      86:	17 00       	.word	0x0017	; ????
      88:	00 e4       	ldi	r16, 0x40	; 64
      8a:	0b 54       	subi	r16, 0x4B	; 75
      8c:	02 00       	.word	0x0002	; ????
      8e:	00 ca       	rjmp	.-3072   	; 0xfffff490 <__eeprom_end+0xff7ef490>
      90:	9a 3b       	cpi	r25, 0xBA	; 186
      92:	00 00       	nop
      94:	00 e1       	ldi	r16, 0x10	; 16
      96:	f5 05       	cpc	r31, r5
      98:	00 00       	nop
      9a:	80 96       	adiw	r24, 0x20	; 32
      9c:	98 00       	.word	0x0098	; ????
      9e:	00 00       	nop
      a0:	40 42       	sbci	r20, 0x20	; 32
      a2:	0f 00       	.word	0x000f	; ????
      a4:	00 00       	nop
      a6:	a0 86       	std	Z+8, r10	; 0x08
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	10 27       	eor	r17, r16
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	e8 03       	fmulsu	r22, r16
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	64 00       	.word	0x0064	; ????
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	0a 00       	.word	0x000a	; ????
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	01 00       	.word	0x0001	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	2c 76       	andi	r18, 0x6C	; 108
      cc:	d8 88       	ldd	r13, Y+16	; 0x10
      ce:	dc 67       	ori	r29, 0x7C	; 124
      d0:	4f 08       	sbc	r4, r15
      d2:	23 df       	rcall	.-442    	; 0xffffff1a <__eeprom_end+0xff7eff1a>
      d4:	c1 df       	rcall	.-126    	; 0x58 <__SREG__+0x19>
      d6:	ae 59       	subi	r26, 0x9E	; 158
      d8:	e1 b1       	in	r30, 0x01	; 1
      da:	b7 96       	adiw	r30, 0x27	; 39
      dc:	e5 e3       	ldi	r30, 0x35	; 53
      de:	e4 53       	subi	r30, 0x34	; 52
      e0:	c6 3a       	cpi	r28, 0xA6	; 166
      e2:	e6 51       	subi	r30, 0x16	; 22
      e4:	99 76       	andi	r25, 0x69	; 105
      e6:	96 e8       	ldi	r25, 0x86	; 134
      e8:	e6 c2       	rjmp	.+1484   	; 0x6b6 <Keypad_WriteToBuffer+0x3a>
      ea:	84 26       	eor	r8, r20
      ec:	eb 89       	ldd	r30, Y+19	; 0x13
      ee:	8c 9b       	sbis	0x11, 4	; 17
      f0:	62 ed       	ldi	r22, 0xD2	; 210
      f2:	40 7c       	andi	r20, 0xC0	; 192
      f4:	6f fc       	.word	0xfc6f	; ????
      f6:	ef bc       	out	0x2f, r14	; 47
      f8:	9c 9f       	mul	r25, r28
      fa:	40 f2       	brcs	.-112    	; 0x8c <__trampolines_end+0x1c>
      fc:	ba a5       	ldd	r27, Y+42	; 0x2a
      fe:	6f a5       	ldd	r22, Y+47	; 0x2f
     100:	f4 90       	lpm	r15, Z
     102:	05 5a       	subi	r16, 0xA5	; 165
     104:	2a f7       	brpl	.-54     	; 0xd0 <__trampolines_end+0x60>
     106:	5c 93       	st	X, r21
     108:	6b 6c       	ori	r22, 0xCB	; 203
     10a:	f9 67       	ori	r31, 0x79	; 121
     10c:	6d c1       	rjmp	.+730    	; 0x3e8 <regression+0x13e>
     10e:	1b fc       	.word	0xfc1b	; ????
     110:	e0 e4       	ldi	r30, 0x40	; 64
     112:	0d 47       	sbci	r16, 0x7D	; 125
     114:	fe f5       	brtc	.+126    	; 0x194 <.do_clear_bss_loop>
     116:	20 e6       	ldi	r18, 0x60	; 96
     118:	b5 00       	.word	0x00b5	; ????
     11a:	d0 ed       	ldi	r29, 0xD0	; 208
     11c:	90 2e       	mov	r9, r16
     11e:	03 00       	.word	0x0003	; ????
     120:	94 35       	cpi	r25, 0x54	; 84
     122:	77 05       	cpc	r23, r7
     124:	00 80       	ld	r0, Z
     126:	84 1e       	adc	r8, r20
     128:	08 00       	.word	0x0008	; ????
     12a:	00 20       	and	r0, r0
     12c:	4e 0a       	sbc	r4, r30
     12e:	00 00       	nop
     130:	00 c8       	rjmp	.-4096   	; 0xfffff132 <__eeprom_end+0xff7ef132>
     132:	0c 33       	cpi	r16, 0x3C	; 60
     134:	33 33       	cpi	r19, 0x33	; 51
     136:	33 0f       	add	r19, r19
     138:	98 6e       	ori	r25, 0xE8	; 232
     13a:	12 83       	std	Z+2, r17	; 0x02
     13c:	11 41       	sbci	r17, 0x11	; 17
     13e:	ef 8d       	ldd	r30, Y+31	; 0x1f
     140:	21 14       	cp	r2, r1
     142:	89 3b       	cpi	r24, 0xB9	; 185
     144:	e6 55       	subi	r30, 0x56	; 86
     146:	16 cf       	rjmp	.-468    	; 0xffffff74 <__eeprom_end+0xff7eff74>
     148:	fe e6       	ldi	r31, 0x6E	; 110
     14a:	db 18       	sub	r13, r11
     14c:	d1 84       	ldd	r13, Z+9	; 0x09
     14e:	4b 38       	cpi	r20, 0x8B	; 139
     150:	1b f7       	brvc	.-58     	; 0x118 <__trampolines_end+0xa8>
     152:	7c 1d       	adc	r23, r12
     154:	90 1d       	adc	r25, r0
     156:	a4 bb       	out	0x14, r26	; 20
     158:	e4 24       	eor	r14, r4
     15a:	20 32       	cpi	r18, 0x20	; 32
     15c:	84 72       	andi	r24, 0x24	; 36
     15e:	5e 22       	and	r5, r30
     160:	81 00       	.word	0x0081	; ????
     162:	c9 f1       	breq	.+114    	; 0x1d6 <sumit+0x2e>
     164:	24 ec       	ldi	r18, 0xC4	; 196
     166:	a1 e5       	ldi	r26, 0x51	; 81
     168:	3d 27       	eor	r19, r29

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf e5       	ldi	r28, 0x5F	; 95
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e6       	ldi	r26, 0x60	; 96
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	e2 e8       	ldi	r30, 0x82	; 130
     17e:	f1 e3       	ldi	r31, 0x31	; 49
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a6 3c       	cpi	r26, 0xC6	; 198
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	26 e0       	ldi	r18, 0x06	; 6
     18e:	a6 ec       	ldi	r26, 0xC6	; 198
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	aa 31       	cpi	r26, 0x1A	; 26
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <main>
     1a0:	0c 94 bf 18 	jmp	0x317e	; 0x317e <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <sumit>:
char disp[16] = "00000000000001";
char result[8] = "000001"; 

double m=0,c=0; // gradient and slope

double sumit(int data_points[],int length){
     1a8:	8f 92       	push	r8
     1aa:	9f 92       	push	r9
     1ac:	af 92       	push	r10
     1ae:	bf 92       	push	r11
     1b0:	ef 92       	push	r14
     1b2:	ff 92       	push	r15
     1b4:	0f 93       	push	r16
     1b6:	1f 93       	push	r17
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
	 int i;
	 double sum=0;
	 for(int i=1;i<=length;i++)sum+=data_points[i];
     1bc:	16 16       	cp	r1, r22
     1be:	17 06       	cpc	r1, r23
     1c0:	04 f5       	brge	.+64     	; 0x202 <sumit+0x5a>
     1c2:	7b 01       	movw	r14, r22
     1c4:	8c 01       	movw	r16, r24
     1c6:	0e 5f       	subi	r16, 0xFE	; 254
     1c8:	1f 4f       	sbci	r17, 0xFF	; 255
     1ca:	c1 e0       	ldi	r28, 0x01	; 1
     1cc:	d0 e0       	ldi	r29, 0x00	; 0
     1ce:	81 2c       	mov	r8, r1
     1d0:	91 2c       	mov	r9, r1
     1d2:	54 01       	movw	r10, r8
     1d4:	f8 01       	movw	r30, r16
     1d6:	41 91       	ld	r20, Z+
     1d8:	51 91       	ld	r21, Z+
     1da:	8f 01       	movw	r16, r30
     1dc:	ba 01       	movw	r22, r20
     1de:	55 0f       	add	r21, r21
     1e0:	88 0b       	sbc	r24, r24
     1e2:	99 0b       	sbc	r25, r25
     1e4:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__floatsisf>
     1e8:	9b 01       	movw	r18, r22
     1ea:	ac 01       	movw	r20, r24
     1ec:	c5 01       	movw	r24, r10
     1ee:	b4 01       	movw	r22, r8
     1f0:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__addsf3>
     1f4:	4b 01       	movw	r8, r22
     1f6:	5c 01       	movw	r10, r24
     1f8:	21 96       	adiw	r28, 0x01	; 1
     1fa:	ec 16       	cp	r14, r28
     1fc:	fd 06       	cpc	r15, r29
     1fe:	54 f7       	brge	.-44     	; 0x1d4 <sumit+0x2c>
     200:	03 c0       	rjmp	.+6      	; 0x208 <sumit+0x60>

double m=0,c=0; // gradient and slope

double sumit(int data_points[],int length){
	 int i;
	 double sum=0;
     202:	81 2c       	mov	r8, r1
     204:	91 2c       	mov	r9, r1
     206:	54 01       	movw	r10, r8
	 for(int i=1;i<=length;i++)sum+=data_points[i];
	 return sum;
}
     208:	c5 01       	movw	r24, r10
     20a:	b4 01       	movw	r22, r8
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	1f 91       	pop	r17
     212:	0f 91       	pop	r16
     214:	ff 90       	pop	r15
     216:	ef 90       	pop	r14
     218:	bf 90       	pop	r11
     21a:	af 90       	pop	r10
     21c:	9f 90       	pop	r9
     21e:	8f 90       	pop	r8
     220:	08 95       	ret

00000222 <xysum>:

double xysum(int data_points[],int length){
     222:	8f 92       	push	r8
     224:	9f 92       	push	r9
     226:	af 92       	push	r10
     228:	bf 92       	push	r11
     22a:	ef 92       	push	r14
     22c:	ff 92       	push	r15
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
	 int i;
	 double sum=0;
	 for(int i=1;i<=length;i++)sum+=(i)*data_points[i];
     236:	16 16       	cp	r1, r22
     238:	17 06       	cpc	r1, r23
     23a:	3c f5       	brge	.+78     	; 0x28a <xysum+0x68>
     23c:	7b 01       	movw	r14, r22
     23e:	8c 01       	movw	r16, r24
     240:	0e 5f       	subi	r16, 0xFE	; 254
     242:	1f 4f       	sbci	r17, 0xFF	; 255
     244:	c1 e0       	ldi	r28, 0x01	; 1
     246:	d0 e0       	ldi	r29, 0x00	; 0
     248:	81 2c       	mov	r8, r1
     24a:	91 2c       	mov	r9, r1
     24c:	54 01       	movw	r10, r8
     24e:	f8 01       	movw	r30, r16
     250:	81 91       	ld	r24, Z+
     252:	91 91       	ld	r25, Z+
     254:	8f 01       	movw	r16, r30
     256:	8c 9f       	mul	r24, r28
     258:	a0 01       	movw	r20, r0
     25a:	8d 9f       	mul	r24, r29
     25c:	50 0d       	add	r21, r0
     25e:	9c 9f       	mul	r25, r28
     260:	50 0d       	add	r21, r0
     262:	11 24       	eor	r1, r1
     264:	ba 01       	movw	r22, r20
     266:	55 0f       	add	r21, r21
     268:	88 0b       	sbc	r24, r24
     26a:	99 0b       	sbc	r25, r25
     26c:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__floatsisf>
     270:	9b 01       	movw	r18, r22
     272:	ac 01       	movw	r20, r24
     274:	c5 01       	movw	r24, r10
     276:	b4 01       	movw	r22, r8
     278:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__addsf3>
     27c:	4b 01       	movw	r8, r22
     27e:	5c 01       	movw	r10, r24
     280:	21 96       	adiw	r28, 0x01	; 1
     282:	ec 16       	cp	r14, r28
     284:	fd 06       	cpc	r15, r29
     286:	1c f7       	brge	.-58     	; 0x24e <xysum+0x2c>
     288:	03 c0       	rjmp	.+6      	; 0x290 <xysum+0x6e>
	 return sum;
}

double xysum(int data_points[],int length){
	 int i;
	 double sum=0;
     28a:	81 2c       	mov	r8, r1
     28c:	91 2c       	mov	r9, r1
     28e:	54 01       	movw	r10, r8
	 for(int i=1;i<=length;i++)sum+=(i)*data_points[i];
	 return sum;
}
     290:	c5 01       	movw	r24, r10
     292:	b4 01       	movw	r22, r8
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	1f 91       	pop	r17
     29a:	0f 91       	pop	r16
     29c:	ff 90       	pop	r15
     29e:	ef 90       	pop	r14
     2a0:	bf 90       	pop	r11
     2a2:	af 90       	pop	r10
     2a4:	9f 90       	pop	r9
     2a6:	8f 90       	pop	r8
     2a8:	08 95       	ret

000002aa <regression>:

void regression(int data_points[],double n){
     2aa:	4f 92       	push	r4
     2ac:	5f 92       	push	r5
     2ae:	6f 92       	push	r6
     2b0:	7f 92       	push	r7
     2b2:	8f 92       	push	r8
     2b4:	9f 92       	push	r9
     2b6:	af 92       	push	r10
     2b8:	bf 92       	push	r11
     2ba:	cf 92       	push	r12
     2bc:	df 92       	push	r13
     2be:	ef 92       	push	r14
     2c0:	ff 92       	push	r15
     2c2:	0f 93       	push	r16
     2c4:	1f 93       	push	r17
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
     2ce:	2c 97       	sbiw	r28, 0x0c	; 12
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	f8 94       	cli
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	8c 01       	movw	r16, r24
     2dc:	6a 01       	movw	r12, r20
     2de:	7b 01       	movw	r14, r22
	double squarex= (n)*(n+1)*(2*n+1)/6.0;
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	40 e8       	ldi	r20, 0x80	; 128
     2e6:	5f e3       	ldi	r21, 0x3F	; 63
     2e8:	c7 01       	movw	r24, r14
     2ea:	b6 01       	movw	r22, r12
     2ec:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__addsf3>
     2f0:	4b 01       	movw	r8, r22
     2f2:	5c 01       	movw	r10, r24
	double xbar = (n+1)/2.0;
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	40 e0       	ldi	r20, 0x00	; 0
     2fa:	5f e3       	ldi	r21, 0x3F	; 63
     2fc:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__mulsf3>
     300:	69 83       	std	Y+1, r22	; 0x01
     302:	7a 83       	std	Y+2, r23	; 0x02
     304:	8b 83       	std	Y+3, r24	; 0x03
     306:	9c 83       	std	Y+4, r25	; 0x04
	double ybar = sumit(data_points,n)/n;
     308:	c7 01       	movw	r24, r14
     30a:	b6 01       	movw	r22, r12
     30c:	0e 94 99 10 	call	0x2132	; 0x2132 <__fixsfsi>
     310:	2b 01       	movw	r4, r22
     312:	3c 01       	movw	r6, r24
     314:	c8 01       	movw	r24, r16
     316:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <sumit>
     31a:	a7 01       	movw	r20, r14
     31c:	96 01       	movw	r18, r12
     31e:	0e 94 27 10 	call	0x204e	; 0x204e <__divsf3>
     322:	6d 83       	std	Y+5, r22	; 0x05
     324:	7e 83       	std	Y+6, r23	; 0x06
     326:	8f 83       	std	Y+7, r24	; 0x07
     328:	98 87       	std	Y+8, r25	; 0x08
	m=(xysum(data_points,n)- n*xbar*ybar)/( squarex - n*xbar*xbar );
     32a:	b2 01       	movw	r22, r4
     32c:	c8 01       	movw	r24, r16
     32e:	0e 94 11 01 	call	0x222	; 0x222 <xysum>
     332:	2b 01       	movw	r4, r22
     334:	3c 01       	movw	r6, r24
     336:	29 81       	ldd	r18, Y+1	; 0x01
     338:	3a 81       	ldd	r19, Y+2	; 0x02
     33a:	4b 81       	ldd	r20, Y+3	; 0x03
     33c:	5c 81       	ldd	r21, Y+4	; 0x04
     33e:	c7 01       	movw	r24, r14
     340:	b6 01       	movw	r22, r12
     342:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__mulsf3>
     346:	69 87       	std	Y+9, r22	; 0x09
     348:	7a 87       	std	Y+10, r23	; 0x0a
     34a:	8b 87       	std	Y+11, r24	; 0x0b
     34c:	9c 87       	std	Y+12, r25	; 0x0c
     34e:	2d 81       	ldd	r18, Y+5	; 0x05
     350:	3e 81       	ldd	r19, Y+6	; 0x06
     352:	4f 81       	ldd	r20, Y+7	; 0x07
     354:	58 85       	ldd	r21, Y+8	; 0x08
     356:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__mulsf3>
     35a:	9b 01       	movw	r18, r22
     35c:	ac 01       	movw	r20, r24
     35e:	c3 01       	movw	r24, r6
     360:	b2 01       	movw	r22, r4
     362:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__subsf3>
     366:	2b 01       	movw	r4, r22
     368:	3c 01       	movw	r6, r24
	 for(int i=1;i<=length;i++)sum+=(i)*data_points[i];
	 return sum;
}

void regression(int data_points[],double n){
	double squarex= (n)*(n+1)*(2*n+1)/6.0;
     36a:	a7 01       	movw	r20, r14
     36c:	96 01       	movw	r18, r12
     36e:	c5 01       	movw	r24, r10
     370:	b4 01       	movw	r22, r8
     372:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__mulsf3>
     376:	4b 01       	movw	r8, r22
     378:	5c 01       	movw	r10, r24
     37a:	a7 01       	movw	r20, r14
     37c:	96 01       	movw	r18, r12
     37e:	c7 01       	movw	r24, r14
     380:	b6 01       	movw	r22, r12
     382:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__addsf3>
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	40 e8       	ldi	r20, 0x80	; 128
     38c:	5f e3       	ldi	r21, 0x3F	; 63
     38e:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__addsf3>
     392:	9b 01       	movw	r18, r22
     394:	ac 01       	movw	r20, r24
     396:	c5 01       	movw	r24, r10
     398:	b4 01       	movw	r22, r8
     39a:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__mulsf3>
     39e:	20 e0       	ldi	r18, 0x00	; 0
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	40 ec       	ldi	r20, 0xC0	; 192
     3a4:	50 e4       	ldi	r21, 0x40	; 64
     3a6:	0e 94 27 10 	call	0x204e	; 0x204e <__divsf3>
     3aa:	6b 01       	movw	r12, r22
     3ac:	7c 01       	movw	r14, r24
	double xbar = (n+1)/2.0;
	double ybar = sumit(data_points,n)/n;
	m=(xysum(data_points,n)- n*xbar*ybar)/( squarex - n*xbar*xbar );
     3ae:	29 85       	ldd	r18, Y+9	; 0x09
     3b0:	3a 85       	ldd	r19, Y+10	; 0x0a
     3b2:	4b 85       	ldd	r20, Y+11	; 0x0b
     3b4:	5c 85       	ldd	r21, Y+12	; 0x0c
     3b6:	69 81       	ldd	r22, Y+1	; 0x01
     3b8:	7a 81       	ldd	r23, Y+2	; 0x02
     3ba:	8b 81       	ldd	r24, Y+3	; 0x03
     3bc:	9c 81       	ldd	r25, Y+4	; 0x04
     3be:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__mulsf3>
     3c2:	9b 01       	movw	r18, r22
     3c4:	ac 01       	movw	r20, r24
     3c6:	c7 01       	movw	r24, r14
     3c8:	b6 01       	movw	r22, r12
     3ca:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__subsf3>
     3ce:	9b 01       	movw	r18, r22
     3d0:	ac 01       	movw	r20, r24
     3d2:	c3 01       	movw	r24, r6
     3d4:	b2 01       	movw	r22, r4
     3d6:	0e 94 27 10 	call	0x204e	; 0x204e <__divsf3>
     3da:	9b 01       	movw	r18, r22
     3dc:	ac 01       	movw	r20, r24
     3de:	60 93 ca 02 	sts	0x02CA, r22
     3e2:	70 93 cb 02 	sts	0x02CB, r23
     3e6:	80 93 cc 02 	sts	0x02CC, r24
     3ea:	90 93 cd 02 	sts	0x02CD, r25
	c=ybar-m*xbar;
     3ee:	69 81       	ldd	r22, Y+1	; 0x01
     3f0:	7a 81       	ldd	r23, Y+2	; 0x02
     3f2:	8b 81       	ldd	r24, Y+3	; 0x03
     3f4:	9c 81       	ldd	r25, Y+4	; 0x04
     3f6:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__mulsf3>
     3fa:	9b 01       	movw	r18, r22
     3fc:	ac 01       	movw	r20, r24
     3fe:	6d 81       	ldd	r22, Y+5	; 0x05
     400:	7e 81       	ldd	r23, Y+6	; 0x06
     402:	8f 81       	ldd	r24, Y+7	; 0x07
     404:	98 85       	ldd	r25, Y+8	; 0x08
     406:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__subsf3>
     40a:	60 93 c6 02 	sts	0x02C6, r22
     40e:	70 93 c7 02 	sts	0x02C7, r23
     412:	80 93 c8 02 	sts	0x02C8, r24
     416:	90 93 c9 02 	sts	0x02C9, r25
}
     41a:	2c 96       	adiw	r28, 0x0c	; 12
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	de bf       	out	0x3e, r29	; 62
     422:	0f be       	out	0x3f, r0	; 63
     424:	cd bf       	out	0x3d, r28	; 61
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	1f 91       	pop	r17
     42c:	0f 91       	pop	r16
     42e:	ff 90       	pop	r15
     430:	ef 90       	pop	r14
     432:	df 90       	pop	r13
     434:	cf 90       	pop	r12
     436:	bf 90       	pop	r11
     438:	af 90       	pop	r10
     43a:	9f 90       	pop	r9
     43c:	8f 90       	pop	r8
     43e:	7f 90       	pop	r7
     440:	6f 90       	pop	r6
     442:	5f 90       	pop	r5
     444:	4f 90       	pop	r4
     446:	08 95       	ret

00000448 <Bp_Read>:

int Bp_Read()
{
   ADCSRA |= (1<<ADSC);
     448:	36 9a       	sbi	0x06, 6	; 6
   while(ADCSRA & (1<<ADSC));
     44a:	36 99       	sbic	0x06, 6	; 6
     44c:	fe cf       	rjmp	.-4      	; 0x44a <Bp_Read+0x2>
   
   return ADC;
     44e:	84 b1       	in	r24, 0x04	; 4
     450:	95 b1       	in	r25, 0x05	; 5
}
     452:	08 95       	ret

00000454 <Bp_Init>:

void Bp_Init()
{
	DDRA &= ~2;		/* Vref: Avcc, ADC channel: 1 */
     454:	d1 98       	cbi	0x1a, 1	; 26
	ADMUX = 0b11000000; 		//internal voltage 2.56V, right-justified, input ADC0
     456:	80 ec       	ldi	r24, 0xC0	; 192
     458:	87 b9       	out	0x07, r24	; 7
	ADCSRA =0b10000000; 		//enable = true ,start conversion = false , auto trigger = false , 
     45a:	80 e8       	ldi	r24, 0x80	; 128
     45c:	86 b9       	out	0x06, r24	; 6
     45e:	08 95       	ret

00000460 <Bp_PrintBp>:
							//interrupt flag = false  ,interrupt enable = false ,  prescaler factor 2
}

void Bp_PrintBp()
{
     460:	2f 92       	push	r2
     462:	3f 92       	push	r3
     464:	4f 92       	push	r4
     466:	5f 92       	push	r5
     468:	6f 92       	push	r6
     46a:	7f 92       	push	r7
     46c:	8f 92       	push	r8
     46e:	9f 92       	push	r9
     470:	af 92       	push	r10
     472:	bf 92       	push	r11
     474:	cf 92       	push	r12
     476:	df 92       	push	r13
     478:	ef 92       	push	r14
     47a:	ff 92       	push	r15
     47c:	0f 93       	push	r16
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	00 d0       	rcall	.+0      	; 0x486 <Bp_PrintBp+0x26>
     486:	00 d0       	rcall	.+0      	; 0x488 <Bp_PrintBp+0x28>
     488:	00 d0       	rcall	.+0      	; 0x48a <Bp_PrintBp+0x2a>
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
	// sprintf(val , "%3d",count2*(60/time_limit));
	// Lcd_Position(LCDNOTICE , 1,  5);
	// Lcd_Prints(LCDNOTICE , val);
	
	strcpy(keyBuffer , val);
}
     48e:	2d b6       	in	r2, 0x3d	; 61
     490:	3e b6       	in	r3, 0x3e	; 62
	
	/*  timing data */
    const double sampling_rate = 0.100 ;	   	// actually this is the _delay_ms val
    const int time_limit = 15 ;  				 //in seconds
    const int size=time_limit/(sampling_rate);
    int data_points[size+1];
     492:	8d b7       	in	r24, 0x3d	; 61
     494:	9e b7       	in	r25, 0x3e	; 62
     496:	8e 52       	subi	r24, 0x2E	; 46
     498:	91 40       	sbci	r25, 0x01	; 1
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	9e bf       	out	0x3e, r25	; 62
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	8d bf       	out	0x3d, r24	; 61
     4a4:	ed b7       	in	r30, 0x3d	; 61
     4a6:	fe b7       	in	r31, 0x3e	; 62
     4a8:	31 96       	adiw	r30, 0x01	; 1
     4aa:	2f 01       	movw	r4, r30

	data_points[0]=0;
     4ac:	ed b7       	in	r30, 0x3d	; 61
     4ae:	fe b7       	in	r31, 0x3e	; 62
     4b0:	12 82       	std	Z+2, r1	; 0x02
     4b2:	11 82       	std	Z+1, r1	; 0x01
     4b4:	ed b6       	in	r14, 0x3d	; 61
     4b6:	fe b6       	in	r15, 0x3e	; 62
     4b8:	f3 e0       	ldi	r31, 0x03	; 3
     4ba:	ef 0e       	add	r14, r31
     4bc:	f1 1c       	adc	r15, r1
     4be:	8d b6       	in	r8, 0x3d	; 61
     4c0:	9e b6       	in	r9, 0x3e	; 62
     4c2:	2f ec       	ldi	r18, 0xCF	; 207
     4c4:	82 1a       	sub	r8, r18
     4c6:	2e ef       	ldi	r18, 0xFE	; 254
     4c8:	92 0a       	sbc	r9, r18
     4ca:	0f e9       	ldi	r16, 0x9F	; 159
     4cc:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0;i<=size;i++)
	{
		data_points[i+1]=Bp_Read();
		
		sprintf(val , "%2ds",(size -i +9)/10);
     4ce:	0f 2e       	mov	r0, r31
     4d0:	fa e0       	ldi	r31, 0x0A	; 10
     4d2:	6f 2e       	mov	r6, r31
     4d4:	71 2c       	mov	r7, r1
     4d6:	f0 2d       	mov	r31, r0
     4d8:	0f 2e       	mov	r0, r31
     4da:	fb e6       	ldi	r31, 0x6B	; 107
     4dc:	af 2e       	mov	r10, r31
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	bf 2e       	mov	r11, r31
     4e2:	f0 2d       	mov	r31, r0
     4e4:	ce 01       	movw	r24, r28
     4e6:	01 96       	adiw	r24, 0x01	; 1
     4e8:	6c 01       	movw	r12, r24
	
	char val[6]; //temporary variable for itoa

    for(i=0;i<=size;i++)
	{
		data_points[i+1]=Bp_Read();
     4ea:	0e 94 24 02 	call	0x448	; 0x448 <Bp_Read>
     4ee:	f7 01       	movw	r30, r14
     4f0:	81 93       	st	Z+, r24
     4f2:	91 93       	st	Z+, r25
     4f4:	7f 01       	movw	r14, r30
		
		sprintf(val , "%2ds",(size -i +9)/10);
     4f6:	c8 01       	movw	r24, r16
     4f8:	b3 01       	movw	r22, r6
     4fa:	0e 94 ca 11 	call	0x2394	; 0x2394 <__divmodhi4>
     4fe:	7f 93       	push	r23
     500:	6f 93       	push	r22
     502:	bf 92       	push	r11
     504:	af 92       	push	r10
     506:	df 92       	push	r13
     508:	cf 92       	push	r12
     50a:	0e 94 71 13 	call	0x26e2	; 0x26e2 <sprintf>
		Lcd_Position(LCDKEYPAD , 1, 6 );
     50e:	46 e0       	ldi	r20, 0x06	; 6
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	0e 94 62 06 	call	0xcc4	; 0xcc4 <Lcd_Position>
		Lcd_Prints(LCDKEYPAD , val);
     51c:	b6 01       	movw	r22, r12
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	0e 94 4b 06 	call	0xc96	; 0xc96 <Lcd_Prints>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     524:	ff ef       	ldi	r31, 0xFF	; 255
     526:	20 e7       	ldi	r18, 0x70	; 112
     528:	82 e0       	ldi	r24, 0x02	; 2
     52a:	f1 50       	subi	r31, 0x01	; 1
     52c:	20 40       	sbci	r18, 0x00	; 0
     52e:	80 40       	sbci	r24, 0x00	; 0
     530:	e1 f7       	brne	.-8      	; 0x52a <Bp_PrintBp+0xca>
     532:	00 c0       	rjmp	.+0      	; 0x534 <Bp_PrintBp+0xd4>
     534:	00 00       	nop
     536:	01 50       	subi	r16, 0x01	; 1
     538:	11 09       	sbc	r17, r1
	/* /timing data */
	
	
	char val[6]; //temporary variable for itoa

    for(i=0;i<=size;i++)
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	e8 14       	cp	r14, r8
     548:	f9 04       	cpc	r15, r9
     54a:	79 f6       	brne	.-98     	; 0x4ea <Bp_PrintBp+0x8a>

		_delay_ms(sampling_rate*1000);
	
	}

	regression(data_points,size);
     54c:	40 e0       	ldi	r20, 0x00	; 0
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	66 e1       	ldi	r22, 0x16	; 22
     552:	73 e4       	ldi	r23, 0x43	; 67
     554:	c2 01       	movw	r24, r4
     556:	0e 94 55 01 	call	0x2aa	; 0x2aa <regression>
     55a:	f2 01       	movw	r30, r4
     55c:	94 ed       	ldi	r25, 0xD4	; 212
     55e:	49 1a       	sub	r4, r25
     560:	9e ef       	ldi	r25, 0xFE	; 254
     562:	59 0a       	sbc	r5, r25
	int count3 =  0;
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	90 e0       	ldi	r25, 0x00	; 0
	
	//recorded wave form
	for(i=0;i<size;i++){	
		thresh=(i+2)*m+c;

		int a=data_points[i+1];//current value
     568:	22 81       	ldd	r18, Z+2	; 0x02
     56a:	33 81       	ldd	r19, Z+3	; 0x03
			count1+=1; //peak counting]
			if(a>data_points[i] && a>data_points[i+2]){
				count2+=1;
			}
		}
		if(a>data_points[i] && a>data_points[i+2])
     56c:	40 81       	ld	r20, Z
     56e:	51 81       	ldd	r21, Z+1	; 0x01
     570:	32 96       	adiw	r30, 0x02	; 2
     572:	42 17       	cp	r20, r18
     574:	53 07       	cpc	r21, r19
     576:	34 f4       	brge	.+12     	; 0x584 <Bp_PrintBp+0x124>
     578:	42 81       	ldd	r20, Z+2	; 0x02
     57a:	53 81       	ldd	r21, Z+3	; 0x03
     57c:	42 17       	cp	r20, r18
     57e:	53 07       	cpc	r21, r19
     580:	0c f4       	brge	.+2      	; 0x584 <Bp_PrintBp+0x124>
		{
			count3++;
     582:	01 96       	adiw	r24, 0x01	; 1

	regression(data_points,size);
	int count3 =  0;
	
	//recorded wave form
	for(i=0;i<size;i++){	
     584:	e4 15       	cp	r30, r4
     586:	f5 05       	cpc	r31, r5
     588:	79 f7       	brne	.-34     	; 0x568 <Bp_PrintBp+0x108>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     58a:	4a e0       	ldi	r20, 0x0A	; 10
     58c:	be 01       	movw	r22, r28
     58e:	6f 5f       	subi	r22, 0xFF	; 255
     590:	7f 4f       	sbci	r23, 0xFF	; 255
     592:	88 0f       	add	r24, r24
     594:	99 1f       	adc	r25, r25
     596:	88 0f       	add	r24, r24
     598:	99 1f       	adc	r25, r25
     59a:	0e 94 4c 13 	call	0x2698	; 0x2698 <__itoa_ncheck>
	int bpm = 60 + (count3*(60/time_limit))/10;
	
	bpm  =  (count3*(60/time_limit));
	
    itoa(bpm,val,10);
	Lcd_Position(LCDKEYPAD , 1,  10);
     59e:	4a e0       	ldi	r20, 0x0A	; 10
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	61 e0       	ldi	r22, 0x01	; 1
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	0e 94 62 06 	call	0xcc4	; 0xcc4 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , val);
     5ac:	be 01       	movw	r22, r28
     5ae:	6f 5f       	subi	r22, 0xFF	; 255
     5b0:	7f 4f       	sbci	r23, 0xFF	; 255
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	0e 94 4b 06 	call	0xc96	; 0xc96 <Lcd_Prints>
	
	Lcd_Position(LCDKEYPAD , 1,  13);
     5b8:	4d e0       	ldi	r20, 0x0D	; 13
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	0e 94 62 06 	call	0xcc4	; 0xcc4 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "BPM");
     5c6:	60 e7       	ldi	r22, 0x70	; 112
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	0e 94 4b 06 	call	0xc96	; 0xc96 <Lcd_Prints>
	
	// sprintf(val , "%3d",count2*(60/time_limit));
	// Lcd_Position(LCDNOTICE , 1,  5);
	// Lcd_Prints(LCDNOTICE , val);
	
	strcpy(keyBuffer , val);
     5d0:	be 01       	movw	r22, r28
     5d2:	6f 5f       	subi	r22, 0xFF	; 255
     5d4:	7f 4f       	sbci	r23, 0xFF	; 255
     5d6:	86 ed       	ldi	r24, 0xD6	; 214
     5d8:	92 e0       	ldi	r25, 0x02	; 2
     5da:	0e 94 45 13 	call	0x268a	; 0x268a <strcpy>
}
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	3e be       	out	0x3e, r3	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	2d be       	out	0x3d, r2	; 61
     5e8:	26 96       	adiw	r28, 0x06	; 6
     5ea:	0f b6       	in	r0, 0x3f	; 63
     5ec:	f8 94       	cli
     5ee:	de bf       	out	0x3e, r29	; 62
     5f0:	0f be       	out	0x3f, r0	; 63
     5f2:	cd bf       	out	0x3d, r28	; 61
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	0f 91       	pop	r16
     5fc:	ff 90       	pop	r15
     5fe:	ef 90       	pop	r14
     600:	df 90       	pop	r13
     602:	cf 90       	pop	r12
     604:	bf 90       	pop	r11
     606:	af 90       	pop	r10
     608:	9f 90       	pop	r9
     60a:	8f 90       	pop	r8
     60c:	7f 90       	pop	r7
     60e:	6f 90       	pop	r6
     610:	5f 90       	pop	r5
     612:	4f 90       	pop	r4
     614:	3f 90       	pop	r3
     616:	2f 90       	pop	r2
     618:	08 95       	ret

0000061a <Button_Init>:
#include "button.h"

void Button_Init()
{
	DDRA &= ~(1<<2);
     61a:	d2 98       	cbi	0x1a, 2	; 26
     61c:	08 95       	ret

0000061e <Button_ButtonPressed>:
}
bool Button_ButtonPressed()
{
	return (((PINA>>2)&1) == 0);
     61e:	89 b3       	in	r24, 0x19	; 25
     620:	82 fb       	bst	r24, 2
     622:	88 27       	eor	r24, r24
     624:	80 f9       	bld	r24, 0
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	89 27       	eor	r24, r25
     62a:	08 95       	ret

0000062c <Error_Error>:
#include "all.h"

void Error_Error(const char * text)
{
     62c:	08 95       	ret

0000062e <Error_ErrorNum>:
	// HC05_SendString(text);
}
void Error_ErrorNum(const char * text , int val)
{
     62e:	08 95       	ret

00000630 <Error_ErrorBin>:
// 	sprintf(temp , " = %d\n" , val);
// 	HC05_SendString(temp);
// 	HC05_SendString("\r\n");
}
void Error_ErrorBin(const char * text,int val)
{
     630:	08 95       	ret

00000632 <HC05_SendChar>:
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
	return (UDR);
}
void HC05_SendChar(char data)
{
	UDR = data;										/* Write data to be transmitting in UDR */
     632:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
     634:	5d 9b       	sbis	0x0b, 5	; 11
     636:	fe cf       	rjmp	.-4      	; 0x634 <HC05_SendChar+0x2>
}
     638:	08 95       	ret

0000063a <HC05_SendString>:
void HC05_SendString(char * s)
{
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	ec 01       	movw	r28, r24
	while(*s)
     640:	88 81       	ld	r24, Y
     642:	88 23       	and	r24, r24
     644:	31 f0       	breq	.+12     	; 0x652 <HC05_SendString+0x18>
     646:	21 96       	adiw	r28, 0x01	; 1
		HC05_SendChar(*(s++));
     648:	0e 94 19 03 	call	0x632	; 0x632 <HC05_SendChar>
	UDR = data;										/* Write data to be transmitting in UDR */
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
}
void HC05_SendString(char * s)
{
	while(*s)
     64c:	89 91       	ld	r24, Y+
     64e:	81 11       	cpse	r24, r1
     650:	fb cf       	rjmp	.-10     	; 0x648 <HC05_SendString+0xe>
		HC05_SendChar(*(s++));
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	08 95       	ret

00000658 <Keypad_Init>:
void Keypad_Init()
{
	// col: b7-b0
	// row: a7-a4
	// cols will function as output, rows will as input
    DDRA = (DDRA & 0b00000011) | 0x00;
     658:	8a b3       	in	r24, 0x1a	; 26
     65a:	83 70       	andi	r24, 0x03	; 3
     65c:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
     65e:	8f ef       	ldi	r24, 0xFF	; 255
     660:	87 bb       	out	0x17, r24	; 23
	// PORTA = 0x00;       /** you may use 0b 0000 00XX if ADC has any operations after that. However, we are not reading that data for getting rows */
	PORTB = 0xFF;
     662:	88 bb       	out	0x18, r24	; 24
     664:	08 95       	ret

00000666 <Keypad_ResetBuffer>:
}
void Keypad_ResetBuffer()
{
	isNumber = false;
     666:	10 92 d1 02 	sts	0x02D1, r1
	isUpperCase = false;
     66a:	10 92 d0 02 	sts	0x02D0, r1
	position = 0;
     66e:	10 92 cf 02 	sts	0x02CF, r1
     672:	10 92 ce 02 	sts	0x02CE, r1
	keyBuffer[position] = 0;
     676:	10 92 d6 02 	sts	0x02D6, r1
     67a:	08 95       	ret

0000067c <Keypad_WriteToBuffer>:
}

void Keypad_WriteToBuffer(char * newData)
{
	if(newData == NULL)
     67c:	00 97       	sbiw	r24, 0x00	; 0
     67e:	59 f4       	brne	.+22     	; 0x696 <Keypad_WriteToBuffer+0x1a>
	{
		Error_Error("newData is Null");
     680:	84 e7       	ldi	r24, 0x74	; 116
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 94 16 03 	call	0x62c	; 0x62c <Error_Error>
		position = 0;
     688:	10 92 cf 02 	sts	0x02CF, r1
     68c:	10 92 ce 02 	sts	0x02CE, r1
		keyBuffer[position]=0;
     690:	10 92 d6 02 	sts	0x02D6, r1
     694:	08 95       	ret
	}
	else 
	{
		int sz = min(strlen(newData),16);
     696:	fc 01       	movw	r30, r24
     698:	01 90       	ld	r0, Z+
     69a:	00 20       	and	r0, r0
     69c:	e9 f7       	brne	.-6      	; 0x698 <Keypad_WriteToBuffer+0x1c>
     69e:	31 97       	sbiw	r30, 0x01	; 1
     6a0:	e8 1b       	sub	r30, r24
     6a2:	f9 0b       	sbc	r31, r25
     6a4:	e0 31       	cpi	r30, 0x10	; 16
     6a6:	f1 05       	cpc	r31, r1
     6a8:	28 f5       	brcc	.+74     	; 0x6f4 <Keypad_WriteToBuffer+0x78>
     6aa:	af 01       	movw	r20, r30
		for(position=0;position<sz;position++)
     6ac:	10 92 cf 02 	sts	0x02CF, r1
     6b0:	10 92 ce 02 	sts	0x02CE, r1
     6b4:	1e 16       	cp	r1, r30
     6b6:	1f 06       	cpc	r1, r31
     6b8:	b4 f4       	brge	.+44     	; 0x6e6 <Keypad_WriteToBuffer+0x6a>
     6ba:	fc 01       	movw	r30, r24
     6bc:	a6 ed       	ldi	r26, 0xD6	; 214
     6be:	b2 e0       	ldi	r27, 0x02	; 2
		position = 0;
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
		for(position=0;position<sz;position++)
			keyBuffer[position] = newData[position];
     6c4:	81 91       	ld	r24, Z+
     6c6:	8d 93       	st	X+, r24
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
		for(position=0;position<sz;position++)
     6c8:	2f 5f       	subi	r18, 0xFF	; 255
     6ca:	3f 4f       	sbci	r19, 0xFF	; 255
     6cc:	30 93 cf 02 	sts	0x02CF, r19
     6d0:	20 93 ce 02 	sts	0x02CE, r18
     6d4:	24 17       	cp	r18, r20
     6d6:	35 07       	cpc	r19, r21
     6d8:	ac f3       	brlt	.-22     	; 0x6c4 <Keypad_WriteToBuffer+0x48>
     6da:	14 16       	cp	r1, r20
     6dc:	15 06       	cpc	r1, r21
     6de:	2c f0       	brlt	.+10     	; 0x6ea <Keypad_WriteToBuffer+0x6e>
     6e0:	41 e0       	ldi	r20, 0x01	; 1
     6e2:	50 e0       	ldi	r21, 0x00	; 0
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <Keypad_WriteToBuffer+0x6e>
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	50 e0       	ldi	r21, 0x00	; 0
			keyBuffer[position] = newData[position];
		keyBuffer[position] = 0;
     6ea:	fa 01       	movw	r30, r20
     6ec:	ea 52       	subi	r30, 0x2A	; 42
     6ee:	fd 4f       	sbci	r31, 0xFD	; 253
     6f0:	10 82       	st	Z, r1
     6f2:	08 95       	ret
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
		for(position=0;position<sz;position++)
     6f4:	10 92 cf 02 	sts	0x02CF, r1
     6f8:	10 92 ce 02 	sts	0x02CE, r1
		position = 0;
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
     6fc:	40 e1       	ldi	r20, 0x10	; 16
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	dc cf       	rjmp	.-72     	; 0x6ba <Keypad_WriteToBuffer+0x3e>

00000702 <Keypad_InitNumpad>:
	}
}

void Keypad_InitNumpad()
{
	isNumber = true;
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	80 93 d1 02 	sts	0x02D1, r24
     708:	08 95       	ret

0000070a <Keypad_GetMode>:
}

const char * Keypad_GetMode()
{
	if(isNumber)
     70a:	80 91 d1 02 	lds	r24, 0x02D1
     70e:	81 11       	cpse	r24, r1
     710:	07 c0       	rjmp	.+14     	; 0x720 <Keypad_GetMode+0x16>
		return "123";
	else if(isUpperCase)
     712:	80 91 d0 02 	lds	r24, 0x02D0
     716:	81 11       	cpse	r24, r1
     718:	06 c0       	rjmp	.+12     	; 0x726 <Keypad_GetMode+0x1c>
		return "ABC";
	else return "abc";
     71a:	8c e8       	ldi	r24, 0x8C	; 140
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	08 95       	ret
}

const char * Keypad_GetMode()
{
	if(isNumber)
		return "123";
     720:	84 e8       	ldi	r24, 0x84	; 132
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	08 95       	ret
	else if(isUpperCase)
		return "ABC";
     726:	88 e8       	ldi	r24, 0x88	; 136
     728:	90 e0       	ldi	r25, 0x00	; 0
	else return "abc";
}
     72a:	08 95       	ret

0000072c <Keypad_UpdateKeyMode>:

void Keypad_UpdateKeyMode()
{
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
	const char * s = Keypad_GetMode();
     730:	0e 94 85 03 	call	0x70a	; 0x70a <Keypad_GetMode>
     734:	ec 01       	movw	r28, r24
	Lcd_Position(LCDKEYPAD,0,16-strlen(s));
     736:	fc 01       	movw	r30, r24
     738:	01 90       	ld	r0, Z+
     73a:	00 20       	and	r0, r0
     73c:	e9 f7       	brne	.-6      	; 0x738 <Keypad_UpdateKeyMode+0xc>
     73e:	ac 01       	movw	r20, r24
     740:	4e 1b       	sub	r20, r30
     742:	5f 0b       	sbc	r21, r31
     744:	4f 5e       	subi	r20, 0xEF	; 239
     746:	5f 4f       	sbci	r21, 0xFF	; 255
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,s);
     752:	be 01       	movw	r22, r28
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	0e 94 4b 06 	call	0xc96	; 0xc96 <Lcd_Prints>
}
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret

00000760 <Keypad_KeyPressed>:

inline int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     760:	89 b3       	in	r24, 0x19	; 25
}
     762:	82 95       	swap	r24
     764:	8f 70       	andi	r24, 0x0F	; 15
     766:	08 95       	ret

00000768 <Keypad_GetRow>:

int_fast8_t Keypad_GetRow()
{
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
	int pin = PINA >> 4;
     76e:	c9 b3       	in	r28, 0x19	; 25
     770:	c2 95       	swap	r28
     772:	cf 70       	andi	r28, 0x0F	; 15
     774:	0c 2f       	mov	r16, r28
     776:	10 e0       	ldi	r17, 0x00	; 0
	Error_ErrorBin("PIN_row:",pin);
     778:	b8 01       	movw	r22, r16
     77a:	80 e9       	ldi	r24, 0x90	; 144
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0e 94 18 03 	call	0x630	; 0x630 <Error_ErrorBin>
	for(int i=0;i<4;i++)
	{
		if(pin&(1<<i))
     782:	c0 fd       	sbrc	r28, 0
     784:	0c c0       	rjmp	.+24     	; 0x79e <Keypad_GetRow+0x36>
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	98 01       	movw	r18, r16
     78c:	08 2e       	mov	r0, r24
     78e:	02 c0       	rjmp	.+4      	; 0x794 <Keypad_GetRow+0x2c>
     790:	35 95       	asr	r19
     792:	27 95       	ror	r18
     794:	0a 94       	dec	r0
     796:	e2 f7       	brpl	.-8      	; 0x790 <Keypad_GetRow+0x28>
     798:	20 ff       	sbrs	r18, 0
     79a:	04 c0       	rjmp	.+8      	; 0x7a4 <Keypad_GetRow+0x3c>
     79c:	0c c0       	rjmp	.+24     	; 0x7b6 <Keypad_GetRow+0x4e>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(pin&(1<<i))
			return i;
     7a2:	09 c0       	rjmp	.+18     	; 0x7b6 <Keypad_GetRow+0x4e>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	84 30       	cpi	r24, 0x04	; 4
     7a8:	91 05       	cpc	r25, r1
     7aa:	79 f7       	brne	.-34     	; 0x78a <Keypad_GetRow+0x22>
	{
		if(pin&(1<<i))
			return i;
	}
	// report error
	Error_Error("KeypadGetRow:");
     7ac:	89 e9       	ldi	r24, 0x99	; 153
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 16 03 	call	0x62c	; 0x62c <Error_Error>
	return -1;
     7b4:	8f ef       	ldi	r24, 0xFF	; 255
}
     7b6:	cf 91       	pop	r28
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	08 95       	ret

000007be <Keypad_GetCol>:

int_fast8_t Keypad_GetCol()
{
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
	int i = 7;
     7c6:	c7 e0       	ldi	r28, 0x07	; 7
     7c8:	d0 e0       	ldi	r29, 0x00	; 0
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
     7ca:	01 e0       	ldi	r16, 0x01	; 1
     7cc:	10 e0       	ldi	r17, 0x00	; 0
     7ce:	28 b3       	in	r18, 0x18	; 24
     7d0:	c8 01       	movw	r24, r16
     7d2:	0c 2e       	mov	r0, r28
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <Keypad_GetCol+0x1c>
     7d6:	88 0f       	add	r24, r24
     7d8:	99 1f       	adc	r25, r25
     7da:	0a 94       	dec	r0
     7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <Keypad_GetCol+0x18>
     7de:	82 27       	eor	r24, r18
     7e0:	88 bb       	out	0x18, r24	; 24
		Error_ErrorBin("PINB:",PINB);
     7e2:	66 b3       	in	r22, 0x16	; 22
     7e4:	70 e0       	ldi	r23, 0x00	; 0
     7e6:	87 ea       	ldi	r24, 0xA7	; 167
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 18 03 	call	0x630	; 0x630 <Error_ErrorBin>
	Lcd_Prints(LCDKEYPAD,s);
}

inline int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     7ee:	89 b3       	in	r24, 0x19	; 25
     7f0:	82 95       	swap	r24
     7f2:	8f 70       	andi	r24, 0x0F	; 15
	int i = 7;
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
		Error_ErrorBin("PINB:",PINB);
		if(!Keypad_KeyPressed())
     7f4:	11 f4       	brne	.+4      	; 0x7fa <Keypad_GetCol+0x3c>
		{
			return i;
     7f6:	8c 2f       	mov	r24, r28
     7f8:	07 c0       	rjmp	.+14     	; 0x808 <Keypad_GetCol+0x4a>
		}
		i--;
     7fa:	21 97       	sbiw	r28, 0x01	; 1
     7fc:	40 f7       	brcc	.-48     	; 0x7ce <Keypad_GetCol+0x10>
	}
	Error_Error("KeypadGetCol:");
     7fe:	8d ea       	ldi	r24, 0xAD	; 173
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 16 03 	call	0x62c	; 0x62c <Error_Error>
	// report error
	return -1;
     806:	8f ef       	ldi	r24, 0xFF	; 255
}
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	08 95       	ret

00000812 <addChar>:

void addChar(const char c)
{
	keyBuffer[position] = c;
     812:	20 91 ce 02 	lds	r18, 0x02CE
     816:	30 91 cf 02 	lds	r19, 0x02CF
     81a:	f9 01       	movw	r30, r18
     81c:	ea 52       	subi	r30, 0x2A	; 42
     81e:	fd 4f       	sbci	r31, 0xFD	; 253
     820:	80 83       	st	Z, r24
	if(position < 16)
     822:	20 31       	cpi	r18, 0x10	; 16
     824:	31 05       	cpc	r19, r1
     826:	34 f4       	brge	.+12     	; 0x834 <addChar+0x22>
		position = position +1;
     828:	2f 5f       	subi	r18, 0xFF	; 255
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	30 93 cf 02 	sts	0x02CF, r19
     830:	20 93 ce 02 	sts	0x02CE, r18
	keyBuffer[position] = 0;
     834:	e0 91 ce 02 	lds	r30, 0x02CE
     838:	f0 91 cf 02 	lds	r31, 0x02CF
     83c:	ea 52       	subi	r30, 0x2A	; 42
     83e:	fd 4f       	sbci	r31, 0xFD	; 253
     840:	10 82       	st	Z, r1
     842:	08 95       	ret

00000844 <Keypad_AddKey>:
	//sprintf(temp , "pos:%d:\n",position);
	//HC05_SendString(temp);
}

void Keypad_AddKey(int_fast8_t key)
{
     844:	cf 93       	push	r28
     846:	c8 2f       	mov	r28, r24
	if(key >= 30)
     848:	8e 31       	cpi	r24, 0x1E	; 30
     84a:	24 f0       	brlt	.+8      	; 0x854 <Keypad_AddKey+0x10>
		Error_Error("KeyPad_AddKey: 31|30");
     84c:	8b eb       	ldi	r24, 0xBB	; 187
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 16 03 	call	0x62c	; 0x62c <Error_Error>
	if(key == 29) 
     854:	cd 31       	cpi	r28, 0x1D	; 29
     856:	99 f4       	brne	.+38     	; 0x87e <__stack+0x1f>
	{
		// backspace = delete char
		if(position)
     858:	80 91 ce 02 	lds	r24, 0x02CE
     85c:	90 91 cf 02 	lds	r25, 0x02CF
     860:	00 97       	sbiw	r24, 0x00	; 0
     862:	29 f0       	breq	.+10     	; 0x86e <__stack+0xf>
			position--;
     864:	01 97       	sbiw	r24, 0x01	; 1
     866:	90 93 cf 02 	sts	0x02CF, r25
     86a:	80 93 ce 02 	sts	0x02CE, r24
		keyBuffer[position] = 0;
     86e:	e0 91 ce 02 	lds	r30, 0x02CE
     872:	f0 91 cf 02 	lds	r31, 0x02CF
     876:	ea 52       	subi	r30, 0x2A	; 42
     878:	fd 4f       	sbci	r31, 0xFD	; 253
     87a:	10 82       	st	Z, r1
     87c:	55 c0       	rjmp	.+170    	; 0x928 <__stack+0xc9>
	}
	else if(key == 28)
     87e:	cc 31       	cpi	r28, 0x1C	; 28
     880:	21 f4       	brne	.+8      	; 0x88a <__stack+0x2b>
	{
		// space
		addChar(' ');
     882:	80 e2       	ldi	r24, 0x20	; 32
     884:	0e 94 09 04 	call	0x812	; 0x812 <addChar>
     888:	4f c0       	rjmp	.+158    	; 0x928 <__stack+0xc9>
	}
	else if(key == 27)
     88a:	cb 31       	cpi	r28, 0x1B	; 27
     88c:	39 f4       	brne	.+14     	; 0x89c <__stack+0x3d>
	{
		// toggle num/abc
		isNumber = ! isNumber;
     88e:	90 91 d1 02 	lds	r25, 0x02D1
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	89 27       	eor	r24, r25
     896:	80 93 d1 02 	sts	0x02D1, r24
     89a:	46 c0       	rjmp	.+140    	; 0x928 <__stack+0xc9>
	}
	else if(isNumber) 
     89c:	80 91 d1 02 	lds	r24, 0x02D1
     8a0:	88 23       	and	r24, r24
     8a2:	d9 f0       	breq	.+54     	; 0x8da <__stack+0x7b>
	{
		char row = key >> 3;
		char col = key & 0b00000111;
     8a4:	8c 2f       	mov	r24, r28
     8a6:	87 70       	andi	r24, 0x07	; 7
		char c;
		
		if(col >= 3) return;
     8a8:	83 30       	cpi	r24, 0x03	; 3
     8aa:	f0 f5       	brcc	.+124    	; 0x928 <__stack+0xc9>
		// toggle num/abc
		isNumber = ! isNumber;
	}
	else if(isNumber) 
	{
		char row = key >> 3;
     8ac:	c5 95       	asr	r28
     8ae:	c5 95       	asr	r28
     8b0:	c5 95       	asr	r28
		char col = key & 0b00000111;
		char c;
		
		if(col >= 3) return;
		
		if(row < 3) {
     8b2:	c3 30       	cpi	r28, 0x03	; 3
     8b4:	30 f4       	brcc	.+12     	; 0x8c2 <__stack+0x63>
     8b6:	8f 5c       	subi	r24, 0xCF	; 207
			c = '1' + row * 3 + col;
     8b8:	9c 2f       	mov	r25, r28
     8ba:	99 0f       	add	r25, r25
     8bc:	c9 0f       	add	r28, r25
     8be:	8c 0f       	add	r24, r28
     8c0:	09 c0       	rjmp	.+18     	; 0x8d4 <__stack+0x75>
		}
		else if(col == 0) {
     8c2:	88 23       	and	r24, r24
     8c4:	21 f0       	breq	.+8      	; 0x8ce <__stack+0x6f>
			c = '*';
		}
		else if(col == 1) {
     8c6:	81 30       	cpi	r24, 0x01	; 1
     8c8:	21 f0       	breq	.+8      	; 0x8d2 <__stack+0x73>
			c = '0';
		}
		else  {
			c = '#';
     8ca:	83 e2       	ldi	r24, 0x23	; 35
     8cc:	03 c0       	rjmp	.+6      	; 0x8d4 <__stack+0x75>
		
		if(row < 3) {
			c = '1' + row * 3 + col;
		}
		else if(col == 0) {
			c = '*';
     8ce:	8a e2       	ldi	r24, 0x2A	; 42
     8d0:	01 c0       	rjmp	.+2      	; 0x8d4 <__stack+0x75>
		}
		else if(col == 1) {
			c = '0';
     8d2:	80 e3       	ldi	r24, 0x30	; 48
		}
		else  {
			c = '#';
		}
		addChar(c);
     8d4:	0e 94 09 04 	call	0x812	; 0x812 <addChar>
     8d8:	27 c0       	rjmp	.+78     	; 0x928 <__stack+0xc9>
		
	}
	else if(key == 26)
     8da:	ca 31       	cpi	r28, 0x1A	; 26
     8dc:	39 f4       	brne	.+14     	; 0x8ec <__stack+0x8d>
	{
		// capslock
		isUpperCase = !isUpperCase;
     8de:	90 91 d0 02 	lds	r25, 0x02D0
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	89 27       	eor	r24, r25
     8e6:	80 93 d0 02 	sts	0x02D0, r24
     8ea:	1e c0       	rjmp	.+60     	; 0x928 <__stack+0xc9>
	}
	else
	{
		// char
		char row = key >> 3;
     8ec:	9c 2f       	mov	r25, r28
     8ee:	95 95       	asr	r25
     8f0:	95 95       	asr	r25
     8f2:	95 95       	asr	r25
		char col = key & 0b00000111;
     8f4:	c7 70       	andi	r28, 0x07	; 7
		char c;
		
		if(row < 3) {
     8f6:	93 30       	cpi	r25, 0x03	; 3
     8f8:	68 f4       	brcc	.+26     	; 0x914 <__stack+0xb5>
			c = 'A' + (isUpperCase ? 0 : 32) + row * 8 + col;
     8fa:	80 91 d0 02 	lds	r24, 0x02D0
     8fe:	81 11       	cpse	r24, r1
     900:	02 c0       	rjmp	.+4      	; 0x906 <__stack+0xa7>
     902:	81 e6       	ldi	r24, 0x61	; 97
     904:	01 c0       	rjmp	.+2      	; 0x908 <__stack+0xa9>
     906:	81 e4       	ldi	r24, 0x41	; 65
     908:	99 0f       	add	r25, r25
     90a:	99 0f       	add	r25, r25
     90c:	99 0f       	add	r25, r25
     90e:	c9 0f       	add	r28, r25
     910:	8c 0f       	add	r24, r28
     912:	08 c0       	rjmp	.+16     	; 0x924 <__stack+0xc5>
		}
		else {
			c = 'Y' + (isUpperCase ? 0 : 32) + col;
     914:	80 91 d0 02 	lds	r24, 0x02D0
     918:	81 11       	cpse	r24, r1
     91a:	02 c0       	rjmp	.+4      	; 0x920 <__stack+0xc1>
     91c:	89 e7       	ldi	r24, 0x79	; 121
     91e:	01 c0       	rjmp	.+2      	; 0x922 <__stack+0xc3>
     920:	89 e5       	ldi	r24, 0x59	; 89
     922:	8c 0f       	add	r24, r28
		}
		
		addChar(c);
     924:	0e 94 09 04 	call	0x812	; 0x812 <addChar>
	}
	return ;
}
     928:	cf 91       	pop	r28
     92a:	08 95       	ret

0000092c <Keypad_GetKey>:

int_fast8_t Keypad_GetKey()
{
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
	int_fast8_t row = Keypad_GetRow();
     930:	0e 94 b4 03 	call	0x768	; 0x768 <Keypad_GetRow>
     934:	c8 2f       	mov	r28, r24
	int_fast8_t col = Keypad_GetCol();
     936:	0e 94 df 03 	call	0x7be	; 0x7be <Keypad_GetCol>
     93a:	d8 2f       	mov	r29, r24
	Error_ErrorNum("row",row);
     93c:	6c 2f       	mov	r22, r28
     93e:	0c 2e       	mov	r0, r28
     940:	00 0c       	add	r0, r0
     942:	77 0b       	sbc	r23, r23
     944:	80 ed       	ldi	r24, 0xD0	; 208
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0e 94 17 03 	call	0x62e	; 0x62e <Error_ErrorNum>
	Error_ErrorNum("col",col);
     94c:	6d 2f       	mov	r22, r29
     94e:	0d 2e       	mov	r0, r29
     950:	00 0c       	add	r0, r0
     952:	77 0b       	sbc	r23, r23
     954:	84 ed       	ldi	r24, 0xD4	; 212
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 17 03 	call	0x62e	; 0x62e <Error_ErrorNum>
	return row * 8 + col;
     95c:	8c 2f       	mov	r24, r28
     95e:	88 0f       	add	r24, r24
     960:	88 0f       	add	r24, r24
     962:	88 0f       	add	r24, r24
     964:	8d 0f       	add	r24, r29
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	08 95       	ret

0000096c <KeyProcessor_ProcessKey>:
#include "all.h"

extern int_fast8_t currentState;
void KeyProcessor_ProcessKey(int_fast8_t key)
{
	switch(currentState)
     96c:	e0 91 15 06 	lds	r30, 0x0615
     970:	4e 2f       	mov	r20, r30
     972:	ee 0f       	add	r30, r30
     974:	55 0b       	sbc	r21, r21
     976:	66 0b       	sbc	r22, r22
     978:	77 0b       	sbc	r23, r23
     97a:	47 30       	cpi	r20, 0x07	; 7
     97c:	51 05       	cpc	r21, r1
     97e:	d0 f4       	brcc	.+52     	; 0x9b4 <KeyProcessor_ProcessKey+0x48>
     980:	fa 01       	movw	r30, r20
     982:	e6 5d       	subi	r30, 0xD6	; 214
     984:	ff 4f       	sbci	r31, 0xFF	; 255
     986:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <__tablejump2__>
	{
		case IDLE:
			Idle_ProcessKey(key);
     98a:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <Idle_ProcessKey>
			break;
     98e:	08 95       	ret
		case ENTERING_NAME :
			EnteringName_ProcessKey(key);
     990:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <EnteringName_ProcessKey>
			break;
     994:	08 95       	ret
		case ENTERING_AGE :
			EnteringAge_ProcessKey(key);
     996:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <EnteringAge_ProcessKey>
			break;
     99a:	08 95       	ret
		case ENTERING_PHONE :
			EnteringPhone_ProcessKey(key);
     99c:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <EnteringPhone_ProcessKey>
			break;
     9a0:	08 95       	ret
		case ENTERING_TEMP :
			EnteringTemp_ProcessKey(key);
     9a2:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <EnteringTemp_ProcessKey>
			break;
     9a6:	08 95       	ret
		case ENTERING_BP :
			EnteringBp_ProcessKey(key);
     9a8:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <EnteringBp_ProcessKey>
			break;
     9ac:	08 95       	ret
		case GENERATE_SERIAL :
			GenerateSerial_ProcessKey(key);
     9ae:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GenerateSerial_ProcessKey>
			break;
     9b2:	08 95       	ret
		default:
			Error_Error("ProcessKey: Undefined Current State");
     9b4:	88 ed       	ldi	r24, 0xD8	; 216
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 16 03 	call	0x62c	; 0x62c <Error_Error>
     9bc:	08 95       	ret

000009be <disable_jtag_for_portc>:
// Function to disable JTAG (can be called multiple times safely)
void disable_jtag_for_portc(void)
{
	// Disable JTAG interface to use PC2, PC3, PC4, PC5 as normal I/O
	// This must be done within 4 clock cycles
	MCUCSR |= (1 << JTD);
     9be:	84 b7       	in	r24, 0x34	; 52
     9c0:	80 68       	ori	r24, 0x80	; 128
     9c2:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= (1 << JTD);  // Write twice within 4 clock cycles
     9c4:	84 b7       	in	r24, 0x34	; 52
     9c6:	80 68       	ori	r24, 0x80	; 128
     9c8:	84 bf       	out	0x34, r24	; 52
     9ca:	08 95       	ret

000009cc <Lcd_Serial_Port>:
}

// Functions for 3rd LCD (Serial Display)
void Lcd_Serial_Port(char a)
{
     9cc:	cf 93       	push	r28
     9ce:	c8 2f       	mov	r28, r24
	if(a & 1)
     9d0:	80 ff       	sbrs	r24, 0
     9d2:	07 c0       	rjmp	.+14     	; 0x9e2 <Lcd_Serial_Port+0x16>
	pinChange(D4_SERIAL,1);
     9d4:	61 e0       	ldi	r22, 0x01	; 1
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	86 e1       	ldi	r24, 0x16	; 22
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
     9e0:	06 c0       	rjmp	.+12     	; 0x9ee <Lcd_Serial_Port+0x22>
	else
	pinChange(D4_SERIAL,0);
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	86 e1       	ldi	r24, 0x16	; 22
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
	
	if(a & 2)
     9ee:	c1 ff       	sbrs	r28, 1
     9f0:	07 c0       	rjmp	.+14     	; 0xa00 <Lcd_Serial_Port+0x34>
	pinChange(D5_SERIAL,1);
     9f2:	61 e0       	ldi	r22, 0x01	; 1
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	87 e1       	ldi	r24, 0x17	; 23
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
     9fe:	06 c0       	rjmp	.+12     	; 0xa0c <Lcd_Serial_Port+0x40>
	else
	pinChange(D5_SERIAL,0);
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	87 e1       	ldi	r24, 0x17	; 23
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
	
	if(a & 4)
     a0c:	c2 ff       	sbrs	r28, 2
     a0e:	07 c0       	rjmp	.+14     	; 0xa1e <Lcd_Serial_Port+0x52>
	pinChange(D6_SERIAL,1);
     a10:	61 e0       	ldi	r22, 0x01	; 1
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	88 e1       	ldi	r24, 0x18	; 24
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
     a1c:	06 c0       	rjmp	.+12     	; 0xa2a <Lcd_Serial_Port+0x5e>
	else
	pinChange(D6_SERIAL,0);
     a1e:	60 e0       	ldi	r22, 0x00	; 0
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	88 e1       	ldi	r24, 0x18	; 24
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
	
	if(a & 8)
     a2a:	c3 ff       	sbrs	r28, 3
     a2c:	07 c0       	rjmp	.+14     	; 0xa3c <Lcd_Serial_Port+0x70>
	pinChange(D7_SERIAL,1);
     a2e:	61 e0       	ldi	r22, 0x01	; 1
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	89 e1       	ldi	r24, 0x19	; 25
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
     a3a:	06 c0       	rjmp	.+12     	; 0xa48 <Lcd_Serial_Port+0x7c>
	else
	pinChange(D7_SERIAL,0);
     a3c:	60 e0       	ldi	r22, 0x00	; 0
     a3e:	70 e0       	ldi	r23, 0x00	; 0
     a40:	89 e1       	ldi	r24, 0x19	; 25
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
}
     a48:	cf 91       	pop	r28
     a4a:	08 95       	ret

00000a4c <Lcd_Serial_Cmd>:

void Lcd_Serial_Cmd(char a)
{
     a4c:	cf 93       	push	r28
     a4e:	c8 2f       	mov	r28, r24
	pinChange(RS_SERIAL,0);             // => RS = 0
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	8a e1       	ldi	r24, 0x1A	; 26
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
	Lcd_Serial_Port(a);
     a5c:	8c 2f       	mov	r24, r28
     a5e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <Lcd_Serial_Port>
	pinChange(EN_SERIAL,1);            // => E = 1
     a62:	61 e0       	ldi	r22, 0x01	; 1
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	8b e1       	ldi	r24, 0x1B	; 27
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
     a6e:	8f ec       	ldi	r24, 0xCF	; 207
     a70:	97 e0       	ldi	r25, 0x07	; 7
     a72:	01 97       	sbiw	r24, 0x01	; 1
     a74:	f1 f7       	brne	.-4      	; 0xa72 <Lcd_Serial_Cmd+0x26>
     a76:	00 c0       	rjmp	.+0      	; 0xa78 <Lcd_Serial_Cmd+0x2c>
     a78:	00 00       	nop
	_delay_ms(1);
	pinChange(EN_SERIAL,0);             // => E = 0
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	8b e1       	ldi	r24, 0x1B	; 27
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
     a86:	8f ec       	ldi	r24, 0xCF	; 207
     a88:	97 e0       	ldi	r25, 0x07	; 7
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	f1 f7       	brne	.-4      	; 0xa8a <Lcd_Serial_Cmd+0x3e>
     a8e:	00 c0       	rjmp	.+0      	; 0xa90 <Lcd_Serial_Cmd+0x44>
     a90:	00 00       	nop
	_delay_ms(1);
}
     a92:	cf 91       	pop	r28
     a94:	08 95       	ret

00000a96 <Lcd_Serial_Clear>:

void Lcd_Serial_Clear()
{
	Lcd_Serial_Cmd(0);
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	0e 94 26 05 	call	0xa4c	; 0xa4c <Lcd_Serial_Cmd>
	Lcd_Serial_Cmd(1);
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	0e 94 26 05 	call	0xa4c	; 0xa4c <Lcd_Serial_Cmd>
     aa2:	08 95       	ret

00000aa4 <Lcd_Serial_Set_Cursor>:
}

void Lcd_Serial_Set_Cursor(char a, char b)
{
     aa4:	cf 93       	push	r28
     aa6:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 0)
     aa8:	81 11       	cpse	r24, r1
     aaa:	0b c0       	rjmp	.+22     	; 0xac2 <Lcd_Serial_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
     aac:	80 e8       	ldi	r24, 0x80	; 128
     aae:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd_Serial_Cmd(z);
     ab0:	82 95       	swap	r24
     ab2:	8f 70       	andi	r24, 0x0F	; 15
     ab4:	0e 94 26 05 	call	0xa4c	; 0xa4c <Lcd_Serial_Cmd>
		Lcd_Serial_Cmd(y);
     ab8:	8c 2f       	mov	r24, r28
     aba:	8f 70       	andi	r24, 0x0F	; 15
     abc:	0e 94 26 05 	call	0xa4c	; 0xa4c <Lcd_Serial_Cmd>
     ac0:	0c c0       	rjmp	.+24     	; 0xada <Lcd_Serial_Set_Cursor+0x36>
	}
	else if(a == 1)
     ac2:	81 30       	cpi	r24, 0x01	; 1
     ac4:	51 f4       	brne	.+20     	; 0xada <Lcd_Serial_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
     ac6:	80 ec       	ldi	r24, 0xC0	; 192
     ac8:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd_Serial_Cmd(z);
     aca:	82 95       	swap	r24
     acc:	8f 70       	andi	r24, 0x0F	; 15
     ace:	0e 94 26 05 	call	0xa4c	; 0xa4c <Lcd_Serial_Cmd>
		Lcd_Serial_Cmd(y);
     ad2:	8c 2f       	mov	r24, r28
     ad4:	8f 70       	andi	r24, 0x0F	; 15
     ad6:	0e 94 26 05 	call	0xa4c	; 0xa4c <Lcd_Serial_Cmd>
	}
}
     ada:	cf 91       	pop	r28
     adc:	08 95       	ret

00000ade <Lcd_Serial_Init>:

void Lcd_Serial_Init()
{
	// Disable JTAG first to use PORTC pins
	disable_jtag_for_portc();
     ade:	0e 94 df 04 	call	0x9be	; 0x9be <disable_jtag_for_portc>
     ae2:	8f ec       	ldi	r24, 0xCF	; 207
     ae4:	97 e0       	ldi	r25, 0x07	; 7
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	f1 f7       	brne	.-4      	; 0xae6 <Lcd_Serial_Init+0x8>
     aea:	00 c0       	rjmp	.+0      	; 0xaec <Lcd_Serial_Init+0xe>
     aec:	00 00       	nop
	_delay_ms(1);
	
	// Set PORTC pins as output for the 3rd LCD
	DDRC |= (1<<PC2) | (1<<PC3) | (1<<PC4) | (1<<PC5) | (1<<PC6) | (1<<PC7);
     aee:	84 b3       	in	r24, 0x14	; 20
     af0:	8c 6f       	ori	r24, 0xFC	; 252
     af2:	84 bb       	out	0x14, r24	; 20
	
	// Initialize all pins to LOW
	PORTC &= ~((1<<PC2) | (1<<PC3) | (1<<PC4) | (1<<PC5) | (1<<PC6) | (1<<PC7));
     af4:	85 b3       	in	r24, 0x15	; 21
     af6:	83 70       	andi	r24, 0x03	; 3
     af8:	85 bb       	out	0x15, r24	; 21
	
	Lcd_Serial_Port(0x00);
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	0e 94 e6 04 	call	0x9cc	; 0x9cc <Lcd_Serial_Port>
     b00:	8f e3       	ldi	r24, 0x3F	; 63
     b02:	9c e9       	ldi	r25, 0x9C	; 156
     b04:	01 97       	sbiw	r24, 0x01	; 1
     b06:	f1 f7       	brne	.-4      	; 0xb04 <Lcd_Serial_Init+0x26>
     b08:	00 c0       	rjmp	.+0      	; 0xb0a <Lcd_Serial_Init+0x2c>
     b0a:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd_Serial_Cmd(0x03);
     b0c:	83 e0       	ldi	r24, 0x03	; 3
     b0e:	0e 94 26 05 	call	0xa4c	; 0xa4c <Lcd_Serial_Cmd>
     b12:	8f e0       	ldi	r24, 0x0F	; 15
     b14:	97 e2       	ldi	r25, 0x27	; 39
     b16:	01 97       	sbiw	r24, 0x01	; 1
     b18:	f1 f7       	brne	.-4      	; 0xb16 <Lcd_Serial_Init+0x38>
     b1a:	00 c0       	rjmp	.+0      	; 0xb1c <Lcd_Serial_Init+0x3e>
     b1c:	00 00       	nop
	_delay_ms(5);
	Lcd_Serial_Cmd(0x03);
     b1e:	83 e0       	ldi	r24, 0x03	; 3
     b20:	0e 94 26 05 	call	0xa4c	; 0xa4c <Lcd_Serial_Cmd>
     b24:	8f ee       	ldi	r24, 0xEF	; 239
     b26:	95 e5       	ldi	r25, 0x55	; 85
     b28:	01 97       	sbiw	r24, 0x01	; 1
     b2a:	f1 f7       	brne	.-4      	; 0xb28 <Lcd_Serial_Init+0x4a>
     b2c:	00 c0       	rjmp	.+0      	; 0xb2e <Lcd_Serial_Init+0x50>
     b2e:	00 00       	nop
	_delay_ms(11);
	Lcd_Serial_Cmd(0x03);
     b30:	83 e0       	ldi	r24, 0x03	; 3
     b32:	0e 94 26 05 	call	0xa4c	; 0xa4c <Lcd_Serial_Cmd>
	/////////////////////////////////////////////////////
	Lcd_Serial_Cmd(0x02);
     b36:	82 e0       	ldi	r24, 0x02	; 2
     b38:	0e 94 26 05 	call	0xa4c	; 0xa4c <Lcd_Serial_Cmd>
	Lcd_Serial_Cmd(0x02);
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	0e 94 26 05 	call	0xa4c	; 0xa4c <Lcd_Serial_Cmd>
	Lcd_Serial_Cmd(0x08);
     b42:	88 e0       	ldi	r24, 0x08	; 8
     b44:	0e 94 26 05 	call	0xa4c	; 0xa4c <Lcd_Serial_Cmd>
	Lcd_Serial_Cmd(0x00);
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	0e 94 26 05 	call	0xa4c	; 0xa4c <Lcd_Serial_Cmd>
	Lcd_Serial_Cmd(0x0C);
     b4e:	8c e0       	ldi	r24, 0x0C	; 12
     b50:	0e 94 26 05 	call	0xa4c	; 0xa4c <Lcd_Serial_Cmd>
	Lcd_Serial_Cmd(0x00);
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	0e 94 26 05 	call	0xa4c	; 0xa4c <Lcd_Serial_Cmd>
	Lcd_Serial_Cmd(0x06);
     b5a:	86 e0       	ldi	r24, 0x06	; 6
     b5c:	0e 94 26 05 	call	0xa4c	; 0xa4c <Lcd_Serial_Cmd>
	Lcd_Serial_Clear();
     b60:	0e 94 4b 05 	call	0xa96	; 0xa96 <Lcd_Serial_Clear>
     b64:	08 95       	ret

00000b66 <Lcd_Serial_Write_Char>:
}

void Lcd_Serial_Write_Char(char a)
{
     b66:	cf 93       	push	r28
     b68:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS_SERIAL,1);             // => RS = 1
     b6a:	61 e0       	ldi	r22, 0x01	; 1
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	8a e1       	ldi	r24, 0x1A	; 26
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
	Lcd_Serial_Port(y>>4);             //Data transfer
     b76:	8c 2f       	mov	r24, r28
     b78:	82 95       	swap	r24
     b7a:	8f 70       	andi	r24, 0x0F	; 15
     b7c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <Lcd_Serial_Port>
	pinChange(EN_SERIAL,1);
     b80:	61 e0       	ldi	r22, 0x01	; 1
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	8b e1       	ldi	r24, 0x1B	; 27
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
     b8c:	8f ec       	ldi	r24, 0xCF	; 207
     b8e:	97 e0       	ldi	r25, 0x07	; 7
     b90:	01 97       	sbiw	r24, 0x01	; 1
     b92:	f1 f7       	brne	.-4      	; 0xb90 <Lcd_Serial_Write_Char+0x2a>
     b94:	00 c0       	rjmp	.+0      	; 0xb96 <Lcd_Serial_Write_Char+0x30>
     b96:	00 00       	nop
	_delay_ms(1);
	pinChange(EN_SERIAL,0);
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	8b e1       	ldi	r24, 0x1B	; 27
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
     ba4:	8f ec       	ldi	r24, 0xCF	; 207
     ba6:	97 e0       	ldi	r25, 0x07	; 7
     ba8:	01 97       	sbiw	r24, 0x01	; 1
     baa:	f1 f7       	brne	.-4      	; 0xba8 <Lcd_Serial_Write_Char+0x42>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <Lcd_Serial_Write_Char+0x48>
     bae:	00 00       	nop
	_delay_ms(1);
	Lcd_Serial_Port(temp);
     bb0:	8c 2f       	mov	r24, r28
     bb2:	8f 70       	andi	r24, 0x0F	; 15
     bb4:	0e 94 e6 04 	call	0x9cc	; 0x9cc <Lcd_Serial_Port>
	pinChange(EN_SERIAL,1);
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	8b e1       	ldi	r24, 0x1B	; 27
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
     bc4:	8f ec       	ldi	r24, 0xCF	; 207
     bc6:	97 e0       	ldi	r25, 0x07	; 7
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	f1 f7       	brne	.-4      	; 0xbc8 <Lcd_Serial_Write_Char+0x62>
     bcc:	00 c0       	rjmp	.+0      	; 0xbce <Lcd_Serial_Write_Char+0x68>
     bce:	00 00       	nop
	_delay_ms(1);
	pinChange(EN_SERIAL,0);
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	8b e1       	ldi	r24, 0x1B	; 27
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
     bdc:	8f ec       	ldi	r24, 0xCF	; 207
     bde:	97 e0       	ldi	r25, 0x07	; 7
     be0:	01 97       	sbiw	r24, 0x01	; 1
     be2:	f1 f7       	brne	.-4      	; 0xbe0 <Lcd_Serial_Write_Char+0x7a>
     be4:	00 c0       	rjmp	.+0      	; 0xbe6 <Lcd_Serial_Write_Char+0x80>
     be6:	00 00       	nop
	_delay_ms(1);
}
     be8:	cf 91       	pop	r28
     bea:	08 95       	ret

00000bec <Lcd_Serial_Write_String>:

void Lcd_Serial_Write_String(const char *a)
{
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
     bf2:	88 81       	ld	r24, Y
     bf4:	88 23       	and	r24, r24
     bf6:	31 f0       	breq	.+12     	; 0xc04 <Lcd_Serial_Write_String+0x18>
     bf8:	21 96       	adiw	r28, 0x01	; 1
	Lcd_Serial_Write_Char(a[i]);
     bfa:	0e 94 b3 05 	call	0xb66	; 0xb66 <Lcd_Serial_Write_Char>
}

void Lcd_Serial_Write_String(const char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
     bfe:	89 91       	ld	r24, Y+
     c00:	81 11       	cpse	r24, r1
     c02:	fb cf       	rjmp	.-10     	; 0xbfa <Lcd_Serial_Write_String+0xe>
	Lcd_Serial_Write_Char(a[i]);
}
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	08 95       	ret

00000c0a <Lcd_Init>:

// Original functions with added support for 3rd LCD
void Lcd_Init(int_fast8_t lcdType)
{
	switch(lcdType)
     c0a:	81 30       	cpi	r24, 0x01	; 1
     c0c:	51 f0       	breq	.+20     	; 0xc22 <Lcd_Init+0x18>
     c0e:	82 30       	cpi	r24, 0x02	; 2
     c10:	31 f1       	breq	.+76     	; 0xc5e <Lcd_Init+0x54>
     c12:	81 11       	cpse	r24, r1
     c14:	27 c0       	rjmp	.+78     	; 0xc64 <Lcd_Init+0x5a>
	{
		case LCDKEYPAD:
		DDRD = DDRD | 0b11111100;
     c16:	81 b3       	in	r24, 0x11	; 17
     c18:	8c 6f       	ori	r24, 0xFC	; 252
     c1a:	81 bb       	out	0x11, r24	; 17
		Lcd4_Init();
     c1c:	0e 94 86 08 	call	0x110c	; 0x110c <Lcd4_Init>
		break;
     c20:	08 95       	ret
		case LCDNOTICE:
		//////////////////////////////////////////////////////////////////////////
		//lcd with i2c
		lcd_init(LCD_ON_DISPLAY);
     c22:	82 e0       	ldi	r24, 0x02	; 2
     c24:	0e 94 db 09 	call	0x13b6	; 0x13b6 <lcd_init>
		lcd_backlight(0);
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	0e 94 4c 0a 	call	0x1498	; 0x1498 <lcd_backlight>
     c2e:	2f ef       	ldi	r18, 0xFF	; 255
     c30:	84 e3       	ldi	r24, 0x34	; 52
     c32:	9c e0       	ldi	r25, 0x0C	; 12
     c34:	21 50       	subi	r18, 0x01	; 1
     c36:	80 40       	sbci	r24, 0x00	; 0
     c38:	90 40       	sbci	r25, 0x00	; 0
     c3a:	e1 f7       	brne	.-8      	; 0xc34 <Lcd_Init+0x2a>
     c3c:	00 c0       	rjmp	.+0      	; 0xc3e <Lcd_Init+0x34>
     c3e:	00 00       	nop
		_delay_ms(500);
		lcd_backlight(1);
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	0e 94 4c 0a 	call	0x1498	; 0x1498 <lcd_backlight>
     c46:	2f ef       	ldi	r18, 0xFF	; 255
     c48:	84 e3       	ldi	r24, 0x34	; 52
     c4a:	9c e0       	ldi	r25, 0x0C	; 12
     c4c:	21 50       	subi	r18, 0x01	; 1
     c4e:	80 40       	sbci	r24, 0x00	; 0
     c50:	90 40       	sbci	r25, 0x00	; 0
     c52:	e1 f7       	brne	.-8      	; 0xc4c <Lcd_Init+0x42>
     c54:	00 c0       	rjmp	.+0      	; 0xc56 <Lcd_Init+0x4c>
     c56:	00 00       	nop
		_delay_ms(500);
		lcd_clrscr();
     c58:	0e 94 9a 09 	call	0x1334	; 0x1334 <lcd_clrscr>
		//////////////////////////////////////////////////////////////////////////
		break;
     c5c:	08 95       	ret
		case LCDSERIAL:
		Lcd_Serial_Init();
     c5e:	0e 94 6f 05 	call	0xade	; 0xade <Lcd_Serial_Init>
		break;
     c62:	08 95       	ret
		default:
		Error_Error("Lcd_Init: LcdType Notsupported");
     c64:	8c ef       	ldi	r24, 0xFC	; 252
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 16 03 	call	0x62c	; 0x62c <Error_Error>
     c6c:	08 95       	ret

00000c6e <Lcd_ClearScreen>:
	}
}

void Lcd_ClearScreen(int_fast8_t lcdType)
{
	switch(lcdType)
     c6e:	81 30       	cpi	r24, 0x01	; 1
     c70:	39 f0       	breq	.+14     	; 0xc80 <Lcd_ClearScreen+0x12>
     c72:	82 30       	cpi	r24, 0x02	; 2
     c74:	41 f0       	breq	.+16     	; 0xc86 <Lcd_ClearScreen+0x18>
     c76:	81 11       	cpse	r24, r1
     c78:	09 c0       	rjmp	.+18     	; 0xc8c <Lcd_ClearScreen+0x1e>
	{
		case LCDKEYPAD:
		Lcd4_Clear();
     c7a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <Lcd4_Clear>
		break;
     c7e:	08 95       	ret
		case LCDNOTICE:
		lcd_clrscr();
     c80:	0e 94 9a 09 	call	0x1334	; 0x1334 <lcd_clrscr>
		break;
     c84:	08 95       	ret
		case LCDSERIAL:
		Lcd_Serial_Clear();
     c86:	0e 94 4b 05 	call	0xa96	; 0xa96 <Lcd_Serial_Clear>
		break;
     c8a:	08 95       	ret
		default:
		Error_Error("Lcd_ClearScreen: LcdType Not supported");
     c8c:	8b e1       	ldi	r24, 0x1B	; 27
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	0e 94 16 03 	call	0x62c	; 0x62c <Error_Error>
     c94:	08 95       	ret

00000c96 <Lcd_Prints>:
	}
}

void Lcd_Prints(int_fast8_t lcdType ,const char * s)
{
	switch(lcdType)
     c96:	81 30       	cpi	r24, 0x01	; 1
     c98:	41 f0       	breq	.+16     	; 0xcaa <Lcd_Prints+0x14>
     c9a:	82 30       	cpi	r24, 0x02	; 2
     c9c:	51 f0       	breq	.+20     	; 0xcb2 <Lcd_Prints+0x1c>
     c9e:	81 11       	cpse	r24, r1
     ca0:	0c c0       	rjmp	.+24     	; 0xcba <Lcd_Prints+0x24>
	{
		case LCDKEYPAD:
		Lcd4_Write_String(s);
     ca2:	cb 01       	movw	r24, r22
     ca4:	0e 94 ff 08 	call	0x11fe	; 0x11fe <Lcd4_Write_String>
		break;
     ca8:	08 95       	ret
		case LCDNOTICE:
		lcd_puts(s);
     caa:	cb 01       	movw	r24, r22
     cac:	0e 94 cc 09 	call	0x1398	; 0x1398 <lcd_puts>
		break;
     cb0:	08 95       	ret
		case LCDSERIAL:
		Lcd_Serial_Write_String(s);
     cb2:	cb 01       	movw	r24, r22
     cb4:	0e 94 f6 05 	call	0xbec	; 0xbec <Lcd_Serial_Write_String>
		break;
     cb8:	08 95       	ret
		default:
		Error_Error("Lcd_Prints: LcdType Not supported");
     cba:	82 e4       	ldi	r24, 0x42	; 66
     cbc:	91 e0       	ldi	r25, 0x01	; 1
     cbe:	0e 94 16 03 	call	0x62c	; 0x62c <Error_Error>
     cc2:	08 95       	ret

00000cc4 <Lcd_Position>:
	}
}

void Lcd_Position(int_fast8_t lcdType,int x,int y)
{
     cc4:	96 2f       	mov	r25, r22
	switch(lcdType)
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	49 f0       	breq	.+18     	; 0xcdc <Lcd_Position+0x18>
     cca:	82 30       	cpi	r24, 0x02	; 2
     ccc:	59 f0       	breq	.+22     	; 0xce4 <Lcd_Position+0x20>
     cce:	81 11       	cpse	r24, r1
     cd0:	0e c0       	rjmp	.+28     	; 0xcee <Lcd_Position+0x2a>
	{
		case LCDKEYPAD:
		Lcd4_Set_Cursor(x,y);
     cd2:	64 2f       	mov	r22, r20
     cd4:	89 2f       	mov	r24, r25
     cd6:	0e 94 69 08 	call	0x10d2	; 0x10d2 <Lcd4_Set_Cursor>
		break;
     cda:	08 95       	ret
		case LCDNOTICE:
		lcd_gotoxy(y,x);
     cdc:	84 2f       	mov	r24, r20
     cde:	0e 94 84 09 	call	0x1308	; 0x1308 <lcd_gotoxy>
		break;
     ce2:	08 95       	ret
		case LCDSERIAL:
		Lcd_Serial_Set_Cursor(x,y);
     ce4:	64 2f       	mov	r22, r20
     ce6:	89 2f       	mov	r24, r25
     ce8:	0e 94 52 05 	call	0xaa4	; 0xaa4 <Lcd_Serial_Set_Cursor>
		break;
     cec:	08 95       	ret
		default:
		Error_Error("Lcd_Position: LcdType Not supported");
     cee:	84 e6       	ldi	r24, 0x64	; 100
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	0e 94 16 03 	call	0x62c	; 0x62c <Error_Error>
     cf6:	08 95       	ret

00000cf8 <Lcd_Printc>:
	}
}

void Lcd_Printc(int_fast8_t lcdType ,const char c)
{
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	00 d0       	rcall	.+0      	; 0xcfe <Lcd_Printc+0x6>
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
	char s[] = {c,0};
     d02:	69 83       	std	Y+1, r22	; 0x01
     d04:	1a 82       	std	Y+2, r1	; 0x02
	Lcd_Prints(lcdType , s);
     d06:	be 01       	movw	r22, r28
     d08:	6f 5f       	subi	r22, 0xFF	; 255
     d0a:	7f 4f       	sbci	r23, 0xFF	; 255
     d0c:	0e 94 4b 06 	call	0xc96	; 0xc96 <Lcd_Prints>
}
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	08 95       	ret

00000d1a <Lcd_PrintLine>:

void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
     d1a:	ff 92       	push	r15
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	f8 2e       	mov	r15, r24
     d26:	ea 01       	movw	r28, r20
	Lcd_Position(lcdType , row , 0);
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	50 e0       	ldi	r21, 0x00	; 0
     d2c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <Lcd_Position>
	int i =0;
	while (str[i])
     d30:	68 81       	ld	r22, Y
     d32:	66 23       	and	r22, r22
     d34:	91 f0       	breq	.+36     	; 0xd5a <Lcd_PrintLine+0x40>
     d36:	8e 01       	movw	r16, r28
     d38:	0f 5f       	subi	r16, 0xFF	; 255
     d3a:	1f 4f       	sbci	r17, 0xFF	; 255
     d3c:	c0 e0       	ldi	r28, 0x00	; 0
     d3e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		Lcd_Printc(lcdType , str[i++]);
     d40:	21 96       	adiw	r28, 0x01	; 1
     d42:	8f 2d       	mov	r24, r15
     d44:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <Lcd_Printc>

void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
	Lcd_Position(lcdType , row , 0);
	int i =0;
	while (str[i])
     d48:	f8 01       	movw	r30, r16
     d4a:	61 91       	ld	r22, Z+
     d4c:	8f 01       	movw	r16, r30
     d4e:	61 11       	cpse	r22, r1
     d50:	f7 cf       	rjmp	.-18     	; 0xd40 <Lcd_PrintLine+0x26>
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
     d52:	c0 31       	cpi	r28, 0x10	; 16
     d54:	d1 05       	cpc	r29, r1
     d56:	1c f0       	brlt	.+6      	; 0xd5e <Lcd_PrintLine+0x44>
     d58:	0a c0       	rjmp	.+20     	; 0xd6e <Lcd_PrintLine+0x54>
}

void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
	Lcd_Position(lcdType , row , 0);
	int i =0;
     d5a:	c0 e0       	ldi	r28, 0x00	; 0
     d5c:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i])
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
	Lcd_Printc(lcdType , ' '),i++;
     d5e:	60 e2       	ldi	r22, 0x20	; 32
     d60:	8f 2d       	mov	r24, r15
     d62:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <Lcd_Printc>
     d66:	21 96       	adiw	r28, 0x01	; 1
	int i =0;
	while (str[i])
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
     d68:	c0 31       	cpi	r28, 0x10	; 16
     d6a:	d1 05       	cpc	r29, r1
     d6c:	c4 f3       	brlt	.-16     	; 0xd5e <Lcd_PrintLine+0x44>
	Lcd_Printc(lcdType , ' '),i++;
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	ff 90       	pop	r15
     d78:	08 95       	ret

00000d7a <pinChange>:
#include "lcd_4bit.h"

void pinChange(int a, int b)
{
	if(b == 0)
     d7a:	67 2b       	or	r22, r23
     d7c:	09 f0       	breq	.+2      	; 0xd80 <pinChange+0x6>
     d7e:	9f c0       	rjmp	.+318    	; 0xebe <pinChange+0x144>
	{
		if(a == eS_PORTA0)
     d80:	00 97       	sbiw	r24, 0x00	; 0
     d82:	11 f4       	brne	.+4      	; 0xd88 <pinChange+0xe>
		PORTA &= ~(1<<PA0);
     d84:	d8 98       	cbi	0x1b, 0	; 27
     d86:	08 95       	ret
		else if(a == eS_PORTA1)
     d88:	81 30       	cpi	r24, 0x01	; 1
     d8a:	91 05       	cpc	r25, r1
     d8c:	11 f4       	brne	.+4      	; 0xd92 <pinChange+0x18>
		PORTA &= ~(1<<PA1);
     d8e:	d9 98       	cbi	0x1b, 1	; 27
     d90:	08 95       	ret
		else if(a == eS_PORTA2)
     d92:	82 30       	cpi	r24, 0x02	; 2
     d94:	91 05       	cpc	r25, r1
     d96:	11 f4       	brne	.+4      	; 0xd9c <pinChange+0x22>
		PORTA &= ~(1<<PA2);
     d98:	da 98       	cbi	0x1b, 2	; 27
     d9a:	08 95       	ret
		else if(a == eS_PORTA3)
     d9c:	83 30       	cpi	r24, 0x03	; 3
     d9e:	91 05       	cpc	r25, r1
     da0:	11 f4       	brne	.+4      	; 0xda6 <pinChange+0x2c>
		PORTA &= ~(1<<PA3);
     da2:	db 98       	cbi	0x1b, 3	; 27
     da4:	08 95       	ret
		else if(a == eS_PORTA4)
     da6:	84 30       	cpi	r24, 0x04	; 4
     da8:	91 05       	cpc	r25, r1
     daa:	11 f4       	brne	.+4      	; 0xdb0 <pinChange+0x36>
		PORTA &= ~(1<<PA4);
     dac:	dc 98       	cbi	0x1b, 4	; 27
     dae:	08 95       	ret
		else if(a == eS_PORTA5)
     db0:	85 30       	cpi	r24, 0x05	; 5
     db2:	91 05       	cpc	r25, r1
     db4:	11 f4       	brne	.+4      	; 0xdba <pinChange+0x40>
		PORTA &= ~(1<<PA5);
     db6:	dd 98       	cbi	0x1b, 5	; 27
     db8:	08 95       	ret
		else if(a == eS_PORTA6)
     dba:	86 30       	cpi	r24, 0x06	; 6
     dbc:	91 05       	cpc	r25, r1
     dbe:	11 f4       	brne	.+4      	; 0xdc4 <pinChange+0x4a>
		PORTA &= ~(1<<PA6);
     dc0:	de 98       	cbi	0x1b, 6	; 27
     dc2:	08 95       	ret
		else if(a == eS_PORTA7)
     dc4:	87 30       	cpi	r24, 0x07	; 7
     dc6:	91 05       	cpc	r25, r1
     dc8:	11 f4       	brne	.+4      	; 0xdce <pinChange+0x54>
		PORTA &= ~(1<<PA7);
     dca:	df 98       	cbi	0x1b, 7	; 27
     dcc:	08 95       	ret
		else if(a == eS_PORTB0)
     dce:	8a 30       	cpi	r24, 0x0A	; 10
     dd0:	91 05       	cpc	r25, r1
     dd2:	11 f4       	brne	.+4      	; 0xdd8 <pinChange+0x5e>
		PORTB &= ~(1<<PB0);
     dd4:	c0 98       	cbi	0x18, 0	; 24
     dd6:	08 95       	ret
		else if(a == eS_PORTB1)
     dd8:	8b 30       	cpi	r24, 0x0B	; 11
     dda:	91 05       	cpc	r25, r1
     ddc:	11 f4       	brne	.+4      	; 0xde2 <pinChange+0x68>
		PORTB &= ~(1<<PB1);
     dde:	c1 98       	cbi	0x18, 1	; 24
     de0:	08 95       	ret
		else if(a == eS_PORTB2)
     de2:	8c 30       	cpi	r24, 0x0C	; 12
     de4:	91 05       	cpc	r25, r1
     de6:	11 f4       	brne	.+4      	; 0xdec <pinChange+0x72>
		PORTB &= ~(1<<PB2);
     de8:	c2 98       	cbi	0x18, 2	; 24
     dea:	08 95       	ret
		else if(a == eS_PORTB3)
     dec:	8d 30       	cpi	r24, 0x0D	; 13
     dee:	91 05       	cpc	r25, r1
     df0:	11 f4       	brne	.+4      	; 0xdf6 <pinChange+0x7c>
		PORTB &= ~(1<<PB3);
     df2:	c3 98       	cbi	0x18, 3	; 24
     df4:	08 95       	ret
		else if(a == eS_PORTB4)
     df6:	8e 30       	cpi	r24, 0x0E	; 14
     df8:	91 05       	cpc	r25, r1
     dfa:	11 f4       	brne	.+4      	; 0xe00 <pinChange+0x86>
		PORTB &= ~(1<<PB4);
     dfc:	c4 98       	cbi	0x18, 4	; 24
     dfe:	08 95       	ret
		else if(a == eS_PORTB5)
     e00:	8f 30       	cpi	r24, 0x0F	; 15
     e02:	91 05       	cpc	r25, r1
     e04:	11 f4       	brne	.+4      	; 0xe0a <pinChange+0x90>
		PORTB &= ~(1<<PB5);
     e06:	c5 98       	cbi	0x18, 5	; 24
     e08:	08 95       	ret
		else if(a == eS_PORTB6)
     e0a:	80 31       	cpi	r24, 0x10	; 16
     e0c:	91 05       	cpc	r25, r1
     e0e:	11 f4       	brne	.+4      	; 0xe14 <pinChange+0x9a>
		PORTB &= ~(1<<PB6);
     e10:	c6 98       	cbi	0x18, 6	; 24
     e12:	08 95       	ret
		else if(a == eS_PORTB7)
     e14:	81 31       	cpi	r24, 0x11	; 17
     e16:	91 05       	cpc	r25, r1
     e18:	11 f4       	brne	.+4      	; 0xe1e <pinChange+0xa4>
		PORTB &= ~(1<<PB7);
     e1a:	c7 98       	cbi	0x18, 7	; 24
     e1c:	08 95       	ret
		else if(a == eS_PORTC0)
     e1e:	84 31       	cpi	r24, 0x14	; 20
     e20:	91 05       	cpc	r25, r1
     e22:	11 f4       	brne	.+4      	; 0xe28 <pinChange+0xae>
		PORTC &= ~(1<<PC0);
     e24:	a8 98       	cbi	0x15, 0	; 21
     e26:	08 95       	ret
		else if(a == eS_PORTC1)
     e28:	85 31       	cpi	r24, 0x15	; 21
     e2a:	91 05       	cpc	r25, r1
     e2c:	11 f4       	brne	.+4      	; 0xe32 <pinChange+0xb8>
		PORTC &= ~(1<<PC1);
     e2e:	a9 98       	cbi	0x15, 1	; 21
     e30:	08 95       	ret
		else if(a == eS_PORTC2)
     e32:	86 31       	cpi	r24, 0x16	; 22
     e34:	91 05       	cpc	r25, r1
     e36:	11 f4       	brne	.+4      	; 0xe3c <pinChange+0xc2>
		PORTC &= ~(1<<PC2);
     e38:	aa 98       	cbi	0x15, 2	; 21
     e3a:	08 95       	ret
		else if(a == eS_PORTC3)
     e3c:	87 31       	cpi	r24, 0x17	; 23
     e3e:	91 05       	cpc	r25, r1
     e40:	11 f4       	brne	.+4      	; 0xe46 <pinChange+0xcc>
		PORTC &= ~(1<<PC3);
     e42:	ab 98       	cbi	0x15, 3	; 21
     e44:	08 95       	ret
		else if(a == eS_PORTC4)
     e46:	88 31       	cpi	r24, 0x18	; 24
     e48:	91 05       	cpc	r25, r1
     e4a:	11 f4       	brne	.+4      	; 0xe50 <pinChange+0xd6>
		PORTC &= ~(1<<PC4);
     e4c:	ac 98       	cbi	0x15, 4	; 21
     e4e:	08 95       	ret
		else if(a == eS_PORTC5)
     e50:	89 31       	cpi	r24, 0x19	; 25
     e52:	91 05       	cpc	r25, r1
     e54:	11 f4       	brne	.+4      	; 0xe5a <pinChange+0xe0>
		PORTC &= ~(1<<PC5);
     e56:	ad 98       	cbi	0x15, 5	; 21
     e58:	08 95       	ret
		else if(a == eS_PORTC6)
     e5a:	8a 31       	cpi	r24, 0x1A	; 26
     e5c:	91 05       	cpc	r25, r1
     e5e:	11 f4       	brne	.+4      	; 0xe64 <pinChange+0xea>
		PORTC &= ~(1<<PC6);
     e60:	ae 98       	cbi	0x15, 6	; 21
     e62:	08 95       	ret
		else if(a == eS_PORTC7)
     e64:	8b 31       	cpi	r24, 0x1B	; 27
     e66:	91 05       	cpc	r25, r1
     e68:	11 f4       	brne	.+4      	; 0xe6e <pinChange+0xf4>
		PORTC &= ~(1<<PC7);
     e6a:	af 98       	cbi	0x15, 7	; 21
     e6c:	08 95       	ret
		else if(a == eS_PORTD0)
     e6e:	8e 31       	cpi	r24, 0x1E	; 30
     e70:	91 05       	cpc	r25, r1
     e72:	11 f4       	brne	.+4      	; 0xe78 <pinChange+0xfe>
		PORTD &= ~(1<<PD0);
     e74:	90 98       	cbi	0x12, 0	; 18
     e76:	08 95       	ret
		else if(a == eS_PORTD1)
     e78:	8f 31       	cpi	r24, 0x1F	; 31
     e7a:	91 05       	cpc	r25, r1
     e7c:	11 f4       	brne	.+4      	; 0xe82 <pinChange+0x108>
		PORTD &= ~(1<<PD1);
     e7e:	91 98       	cbi	0x12, 1	; 18
     e80:	08 95       	ret
		else if(a == eS_PORTD2)
     e82:	80 32       	cpi	r24, 0x20	; 32
     e84:	91 05       	cpc	r25, r1
     e86:	11 f4       	brne	.+4      	; 0xe8c <pinChange+0x112>
		PORTD &= ~(1<<PD2);
     e88:	92 98       	cbi	0x12, 2	; 18
     e8a:	08 95       	ret
		else if(a == eS_PORTD3)
     e8c:	81 32       	cpi	r24, 0x21	; 33
     e8e:	91 05       	cpc	r25, r1
     e90:	11 f4       	brne	.+4      	; 0xe96 <pinChange+0x11c>
		PORTD &= ~(1<<PD3);
     e92:	93 98       	cbi	0x12, 3	; 18
     e94:	08 95       	ret
		else if(a == eS_PORTD4)
     e96:	82 32       	cpi	r24, 0x22	; 34
     e98:	91 05       	cpc	r25, r1
     e9a:	11 f4       	brne	.+4      	; 0xea0 <pinChange+0x126>
		PORTD &= ~(1<<PD4);
     e9c:	94 98       	cbi	0x12, 4	; 18
     e9e:	08 95       	ret
		else if(a == eS_PORTD5)
     ea0:	83 32       	cpi	r24, 0x23	; 35
     ea2:	91 05       	cpc	r25, r1
     ea4:	11 f4       	brne	.+4      	; 0xeaa <pinChange+0x130>
		PORTD &= ~(1<<PD5);
     ea6:	95 98       	cbi	0x12, 5	; 18
     ea8:	08 95       	ret
		else if(a == eS_PORTD6)
     eaa:	84 32       	cpi	r24, 0x24	; 36
     eac:	91 05       	cpc	r25, r1
     eae:	11 f4       	brne	.+4      	; 0xeb4 <pinChange+0x13a>
		PORTD &= ~(1<<PD6);
     eb0:	96 98       	cbi	0x12, 6	; 18
     eb2:	08 95       	ret
		else if(a == eS_PORTD7)
     eb4:	85 97       	sbiw	r24, 0x25	; 37
     eb6:	09 f0       	breq	.+2      	; 0xeba <pinChange+0x140>
     eb8:	9f c0       	rjmp	.+318    	; 0xff8 <pinChange+0x27e>
		PORTD &= ~(1<<PD7);
     eba:	97 98       	cbi	0x12, 7	; 18
     ebc:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
     ebe:	00 97       	sbiw	r24, 0x00	; 0
     ec0:	11 f4       	brne	.+4      	; 0xec6 <pinChange+0x14c>
		PORTA |= (1<<PA0);
     ec2:	d8 9a       	sbi	0x1b, 0	; 27
     ec4:	08 95       	ret
		else if(a == eS_PORTA1)
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	91 05       	cpc	r25, r1
     eca:	11 f4       	brne	.+4      	; 0xed0 <pinChange+0x156>
		PORTA |= (1<<PA1);
     ecc:	d9 9a       	sbi	0x1b, 1	; 27
     ece:	08 95       	ret
		else if(a == eS_PORTA2)
     ed0:	82 30       	cpi	r24, 0x02	; 2
     ed2:	91 05       	cpc	r25, r1
     ed4:	11 f4       	brne	.+4      	; 0xeda <pinChange+0x160>
		PORTA |= (1<<PA2);
     ed6:	da 9a       	sbi	0x1b, 2	; 27
     ed8:	08 95       	ret
		else if(a == eS_PORTA3)
     eda:	83 30       	cpi	r24, 0x03	; 3
     edc:	91 05       	cpc	r25, r1
     ede:	11 f4       	brne	.+4      	; 0xee4 <pinChange+0x16a>
		PORTA |= (1<<PA3);
     ee0:	db 9a       	sbi	0x1b, 3	; 27
     ee2:	08 95       	ret
		else if(a == eS_PORTA4)
     ee4:	84 30       	cpi	r24, 0x04	; 4
     ee6:	91 05       	cpc	r25, r1
     ee8:	11 f4       	brne	.+4      	; 0xeee <pinChange+0x174>
		PORTA |= (1<<PA4);
     eea:	dc 9a       	sbi	0x1b, 4	; 27
     eec:	08 95       	ret
		else if(a == eS_PORTA5)
     eee:	85 30       	cpi	r24, 0x05	; 5
     ef0:	91 05       	cpc	r25, r1
     ef2:	11 f4       	brne	.+4      	; 0xef8 <pinChange+0x17e>
		PORTA |= (1<<PA5);
     ef4:	dd 9a       	sbi	0x1b, 5	; 27
     ef6:	08 95       	ret
		else if(a == eS_PORTA6)
     ef8:	86 30       	cpi	r24, 0x06	; 6
     efa:	91 05       	cpc	r25, r1
     efc:	11 f4       	brne	.+4      	; 0xf02 <pinChange+0x188>
		PORTA |= (1<<PA6);
     efe:	de 9a       	sbi	0x1b, 6	; 27
     f00:	08 95       	ret
		else if(a == eS_PORTA7)
     f02:	87 30       	cpi	r24, 0x07	; 7
     f04:	91 05       	cpc	r25, r1
     f06:	11 f4       	brne	.+4      	; 0xf0c <pinChange+0x192>
		PORTA |= (1<<PA7);
     f08:	df 9a       	sbi	0x1b, 7	; 27
     f0a:	08 95       	ret
		else if(a == eS_PORTB0)
     f0c:	8a 30       	cpi	r24, 0x0A	; 10
     f0e:	91 05       	cpc	r25, r1
     f10:	11 f4       	brne	.+4      	; 0xf16 <pinChange+0x19c>
		PORTB |= (1<<PB0);
     f12:	c0 9a       	sbi	0x18, 0	; 24
     f14:	08 95       	ret
		else if(a == eS_PORTB1)
     f16:	8b 30       	cpi	r24, 0x0B	; 11
     f18:	91 05       	cpc	r25, r1
     f1a:	11 f4       	brne	.+4      	; 0xf20 <pinChange+0x1a6>
		PORTB |= (1<<PB1);
     f1c:	c1 9a       	sbi	0x18, 1	; 24
     f1e:	08 95       	ret
		else if(a == eS_PORTB2)
     f20:	8c 30       	cpi	r24, 0x0C	; 12
     f22:	91 05       	cpc	r25, r1
     f24:	11 f4       	brne	.+4      	; 0xf2a <pinChange+0x1b0>
		PORTB |= (1<<PB2);
     f26:	c2 9a       	sbi	0x18, 2	; 24
     f28:	08 95       	ret
		else if(a == eS_PORTB3)
     f2a:	8d 30       	cpi	r24, 0x0D	; 13
     f2c:	91 05       	cpc	r25, r1
     f2e:	11 f4       	brne	.+4      	; 0xf34 <pinChange+0x1ba>
		PORTB |= (1<<PB3);
     f30:	c3 9a       	sbi	0x18, 3	; 24
     f32:	08 95       	ret
		else if(a == eS_PORTB4)
     f34:	8e 30       	cpi	r24, 0x0E	; 14
     f36:	91 05       	cpc	r25, r1
     f38:	11 f4       	brne	.+4      	; 0xf3e <pinChange+0x1c4>
		PORTB |= (1<<PB4);
     f3a:	c4 9a       	sbi	0x18, 4	; 24
     f3c:	08 95       	ret
		else if(a == eS_PORTB5)
     f3e:	8f 30       	cpi	r24, 0x0F	; 15
     f40:	91 05       	cpc	r25, r1
     f42:	11 f4       	brne	.+4      	; 0xf48 <pinChange+0x1ce>
		PORTB |= (1<<PB5);
     f44:	c5 9a       	sbi	0x18, 5	; 24
     f46:	08 95       	ret
		else if(a == eS_PORTB6)
     f48:	80 31       	cpi	r24, 0x10	; 16
     f4a:	91 05       	cpc	r25, r1
     f4c:	11 f4       	brne	.+4      	; 0xf52 <pinChange+0x1d8>
		PORTB |= (1<<PB6);
     f4e:	c6 9a       	sbi	0x18, 6	; 24
     f50:	08 95       	ret
		else if(a == eS_PORTB7)
     f52:	81 31       	cpi	r24, 0x11	; 17
     f54:	91 05       	cpc	r25, r1
     f56:	11 f4       	brne	.+4      	; 0xf5c <pinChange+0x1e2>
		PORTB |= (1<<PB7);
     f58:	c7 9a       	sbi	0x18, 7	; 24
     f5a:	08 95       	ret
		else if(a == eS_PORTC0)
     f5c:	84 31       	cpi	r24, 0x14	; 20
     f5e:	91 05       	cpc	r25, r1
     f60:	11 f4       	brne	.+4      	; 0xf66 <pinChange+0x1ec>
		PORTC |= (1<<PC0);
     f62:	a8 9a       	sbi	0x15, 0	; 21
     f64:	08 95       	ret
		else if(a == eS_PORTC1)
     f66:	85 31       	cpi	r24, 0x15	; 21
     f68:	91 05       	cpc	r25, r1
     f6a:	11 f4       	brne	.+4      	; 0xf70 <pinChange+0x1f6>
		PORTC |= (1<<PC1);
     f6c:	a9 9a       	sbi	0x15, 1	; 21
     f6e:	08 95       	ret
		else if(a == eS_PORTC2)
     f70:	86 31       	cpi	r24, 0x16	; 22
     f72:	91 05       	cpc	r25, r1
     f74:	11 f4       	brne	.+4      	; 0xf7a <pinChange+0x200>
		PORTC |= (1<<PC2);
     f76:	aa 9a       	sbi	0x15, 2	; 21
     f78:	08 95       	ret
		else if(a == eS_PORTC3)
     f7a:	87 31       	cpi	r24, 0x17	; 23
     f7c:	91 05       	cpc	r25, r1
     f7e:	11 f4       	brne	.+4      	; 0xf84 <pinChange+0x20a>
		PORTC |= (1<<PC3);
     f80:	ab 9a       	sbi	0x15, 3	; 21
     f82:	08 95       	ret
		else if(a == eS_PORTC4)
     f84:	88 31       	cpi	r24, 0x18	; 24
     f86:	91 05       	cpc	r25, r1
     f88:	11 f4       	brne	.+4      	; 0xf8e <pinChange+0x214>
		PORTC |= (1<<PC4);
     f8a:	ac 9a       	sbi	0x15, 4	; 21
     f8c:	08 95       	ret
		else if(a == eS_PORTC5)
     f8e:	89 31       	cpi	r24, 0x19	; 25
     f90:	91 05       	cpc	r25, r1
     f92:	11 f4       	brne	.+4      	; 0xf98 <pinChange+0x21e>
		PORTC |= (1<<PC5);
     f94:	ad 9a       	sbi	0x15, 5	; 21
     f96:	08 95       	ret
		else if(a == eS_PORTC6)
     f98:	8a 31       	cpi	r24, 0x1A	; 26
     f9a:	91 05       	cpc	r25, r1
     f9c:	11 f4       	brne	.+4      	; 0xfa2 <pinChange+0x228>
		PORTC |= (1<<PC6);
     f9e:	ae 9a       	sbi	0x15, 6	; 21
     fa0:	08 95       	ret
		else if(a == eS_PORTC7)
     fa2:	8b 31       	cpi	r24, 0x1B	; 27
     fa4:	91 05       	cpc	r25, r1
     fa6:	11 f4       	brne	.+4      	; 0xfac <pinChange+0x232>
		PORTC |= (1<<PC7);
     fa8:	af 9a       	sbi	0x15, 7	; 21
     faa:	08 95       	ret
		else if(a == eS_PORTD0)
     fac:	8e 31       	cpi	r24, 0x1E	; 30
     fae:	91 05       	cpc	r25, r1
     fb0:	11 f4       	brne	.+4      	; 0xfb6 <pinChange+0x23c>
		PORTD |= (1<<PD0);
     fb2:	90 9a       	sbi	0x12, 0	; 18
     fb4:	08 95       	ret
		else if(a == eS_PORTD1)
     fb6:	8f 31       	cpi	r24, 0x1F	; 31
     fb8:	91 05       	cpc	r25, r1
     fba:	11 f4       	brne	.+4      	; 0xfc0 <pinChange+0x246>
		PORTD |= (1<<PD1);
     fbc:	91 9a       	sbi	0x12, 1	; 18
     fbe:	08 95       	ret
		else if(a == eS_PORTD2)
     fc0:	80 32       	cpi	r24, 0x20	; 32
     fc2:	91 05       	cpc	r25, r1
     fc4:	11 f4       	brne	.+4      	; 0xfca <pinChange+0x250>
		PORTD |= (1<<PD2);
     fc6:	92 9a       	sbi	0x12, 2	; 18
     fc8:	08 95       	ret
		else if(a == eS_PORTD3)
     fca:	81 32       	cpi	r24, 0x21	; 33
     fcc:	91 05       	cpc	r25, r1
     fce:	11 f4       	brne	.+4      	; 0xfd4 <pinChange+0x25a>
		PORTD |= (1<<PD3);
     fd0:	93 9a       	sbi	0x12, 3	; 18
     fd2:	08 95       	ret
		else if(a == eS_PORTD4)
     fd4:	82 32       	cpi	r24, 0x22	; 34
     fd6:	91 05       	cpc	r25, r1
     fd8:	11 f4       	brne	.+4      	; 0xfde <pinChange+0x264>
		PORTD |= (1<<PD4);
     fda:	94 9a       	sbi	0x12, 4	; 18
     fdc:	08 95       	ret
		else if(a == eS_PORTD5)
     fde:	83 32       	cpi	r24, 0x23	; 35
     fe0:	91 05       	cpc	r25, r1
     fe2:	11 f4       	brne	.+4      	; 0xfe8 <pinChange+0x26e>
		PORTD |= (1<<PD5);
     fe4:	95 9a       	sbi	0x12, 5	; 18
     fe6:	08 95       	ret
		else if(a == eS_PORTD6)
     fe8:	84 32       	cpi	r24, 0x24	; 36
     fea:	91 05       	cpc	r25, r1
     fec:	11 f4       	brne	.+4      	; 0xff2 <pinChange+0x278>
		PORTD |= (1<<PD6);
     fee:	96 9a       	sbi	0x12, 6	; 18
     ff0:	08 95       	ret
		else if(a == eS_PORTD7)
     ff2:	85 97       	sbiw	r24, 0x25	; 37
     ff4:	09 f4       	brne	.+2      	; 0xff8 <pinChange+0x27e>
		PORTD |= (1<<PD7);
     ff6:	97 9a       	sbi	0x12, 7	; 18
     ff8:	08 95       	ret

00000ffa <Lcd4_Port>:
	}
}

void Lcd4_Port(char a)
{
     ffa:	cf 93       	push	r28
     ffc:	c8 2f       	mov	r28, r24
	if(a & 1)
     ffe:	80 ff       	sbrs	r24, 0
    1000:	07 c0       	rjmp	.+14     	; 0x1010 <Lcd4_Port+0x16>
	pinChange(D4,1);
    1002:	61 e0       	ldi	r22, 0x01	; 1
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	83 e2       	ldi	r24, 0x23	; 35
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
    100e:	06 c0       	rjmp	.+12     	; 0x101c <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	83 e2       	ldi	r24, 0x23	; 35
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
	
	if(a & 2)
    101c:	c1 ff       	sbrs	r28, 1
    101e:	07 c0       	rjmp	.+14     	; 0x102e <Lcd4_Port+0x34>
	pinChange(D5,1);
    1020:	61 e0       	ldi	r22, 0x01	; 1
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	82 e2       	ldi	r24, 0x22	; 34
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
    102c:	06 c0       	rjmp	.+12     	; 0x103a <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	82 e2       	ldi	r24, 0x22	; 34
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
	
	if(a & 4)
    103a:	c2 ff       	sbrs	r28, 2
    103c:	07 c0       	rjmp	.+14     	; 0x104c <Lcd4_Port+0x52>
	pinChange(D6,1);
    103e:	61 e0       	ldi	r22, 0x01	; 1
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	81 e2       	ldi	r24, 0x21	; 33
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
    104a:	06 c0       	rjmp	.+12     	; 0x1058 <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
    104c:	60 e0       	ldi	r22, 0x00	; 0
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	81 e2       	ldi	r24, 0x21	; 33
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
	
	if(a & 8)
    1058:	c3 ff       	sbrs	r28, 3
    105a:	07 c0       	rjmp	.+14     	; 0x106a <Lcd4_Port+0x70>
	pinChange(D7,1);
    105c:	61 e0       	ldi	r22, 0x01	; 1
    105e:	70 e0       	ldi	r23, 0x00	; 0
    1060:	80 e2       	ldi	r24, 0x20	; 32
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
    1068:	06 c0       	rjmp	.+12     	; 0x1076 <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	80 e2       	ldi	r24, 0x20	; 32
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
}
    1076:	cf 91       	pop	r28
    1078:	08 95       	ret

0000107a <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
    107a:	cf 93       	push	r28
    107c:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	85 e2       	ldi	r24, 0x25	; 37
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
	Lcd4_Port(a);
    108a:	8c 2f       	mov	r24, r28
    108c:	0e 94 fd 07 	call	0xffa	; 0xffa <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
    1090:	61 e0       	ldi	r22, 0x01	; 1
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	84 e2       	ldi	r24, 0x24	; 36
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
    109c:	8f ec       	ldi	r24, 0xCF	; 207
    109e:	97 e0       	ldi	r25, 0x07	; 7
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <Lcd4_Cmd+0x26>
    10a4:	00 c0       	rjmp	.+0      	; 0x10a6 <Lcd4_Cmd+0x2c>
    10a6:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
    10a8:	60 e0       	ldi	r22, 0x00	; 0
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	84 e2       	ldi	r24, 0x24	; 36
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
    10b4:	8f ec       	ldi	r24, 0xCF	; 207
    10b6:	97 e0       	ldi	r25, 0x07	; 7
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	f1 f7       	brne	.-4      	; 0x10b8 <Lcd4_Cmd+0x3e>
    10bc:	00 c0       	rjmp	.+0      	; 0x10be <Lcd4_Cmd+0x44>
    10be:	00 00       	nop
	_delay_ms(1);
}
    10c0:	cf 91       	pop	r28
    10c2:	08 95       	ret

000010c4 <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	0e 94 3d 08 	call	0x107a	; 0x107a <Lcd4_Cmd>
	Lcd4_Cmd(1);
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	0e 94 3d 08 	call	0x107a	; 0x107a <Lcd4_Cmd>
    10d0:	08 95       	ret

000010d2 <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
    10d2:	cf 93       	push	r28
    10d4:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 0)
    10d6:	81 11       	cpse	r24, r1
    10d8:	0b c0       	rjmp	.+22     	; 0x10f0 <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
    10da:	80 e8       	ldi	r24, 0x80	; 128
    10dc:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
    10de:	82 95       	swap	r24
    10e0:	8f 70       	andi	r24, 0x0F	; 15
    10e2:	0e 94 3d 08 	call	0x107a	; 0x107a <Lcd4_Cmd>
		Lcd4_Cmd(y);
    10e6:	8c 2f       	mov	r24, r28
    10e8:	8f 70       	andi	r24, 0x0F	; 15
    10ea:	0e 94 3d 08 	call	0x107a	; 0x107a <Lcd4_Cmd>
    10ee:	0c c0       	rjmp	.+24     	; 0x1108 <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 1)
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	51 f4       	brne	.+20     	; 0x1108 <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
    10f4:	80 ec       	ldi	r24, 0xC0	; 192
    10f6:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
    10f8:	82 95       	swap	r24
    10fa:	8f 70       	andi	r24, 0x0F	; 15
    10fc:	0e 94 3d 08 	call	0x107a	; 0x107a <Lcd4_Cmd>
		Lcd4_Cmd(y);
    1100:	8c 2f       	mov	r24, r28
    1102:	8f 70       	andi	r24, 0x0F	; 15
    1104:	0e 94 3d 08 	call	0x107a	; 0x107a <Lcd4_Cmd>
	}
}
    1108:	cf 91       	pop	r28
    110a:	08 95       	ret

0000110c <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	0e 94 fd 07 	call	0xffa	; 0xffa <Lcd4_Port>
    1112:	8f e3       	ldi	r24, 0x3F	; 63
    1114:	9c e9       	ldi	r25, 0x9C	; 156
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	f1 f7       	brne	.-4      	; 0x1116 <Lcd4_Init+0xa>
    111a:	00 c0       	rjmp	.+0      	; 0x111c <Lcd4_Init+0x10>
    111c:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
    111e:	83 e0       	ldi	r24, 0x03	; 3
    1120:	0e 94 3d 08 	call	0x107a	; 0x107a <Lcd4_Cmd>
    1124:	8f e0       	ldi	r24, 0x0F	; 15
    1126:	97 e2       	ldi	r25, 0x27	; 39
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	f1 f7       	brne	.-4      	; 0x1128 <Lcd4_Init+0x1c>
    112c:	00 c0       	rjmp	.+0      	; 0x112e <Lcd4_Init+0x22>
    112e:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
    1130:	83 e0       	ldi	r24, 0x03	; 3
    1132:	0e 94 3d 08 	call	0x107a	; 0x107a <Lcd4_Cmd>
    1136:	8f ee       	ldi	r24, 0xEF	; 239
    1138:	95 e5       	ldi	r25, 0x55	; 85
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	f1 f7       	brne	.-4      	; 0x113a <Lcd4_Init+0x2e>
    113e:	00 c0       	rjmp	.+0      	; 0x1140 <Lcd4_Init+0x34>
    1140:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
    1142:	83 e0       	ldi	r24, 0x03	; 3
    1144:	0e 94 3d 08 	call	0x107a	; 0x107a <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	0e 94 3d 08 	call	0x107a	; 0x107a <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
    114e:	82 e0       	ldi	r24, 0x02	; 2
    1150:	0e 94 3d 08 	call	0x107a	; 0x107a <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
    1154:	88 e0       	ldi	r24, 0x08	; 8
    1156:	0e 94 3d 08 	call	0x107a	; 0x107a <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	0e 94 3d 08 	call	0x107a	; 0x107a <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
    1160:	8c e0       	ldi	r24, 0x0C	; 12
    1162:	0e 94 3d 08 	call	0x107a	; 0x107a <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	0e 94 3d 08 	call	0x107a	; 0x107a <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
    116c:	86 e0       	ldi	r24, 0x06	; 6
    116e:	0e 94 3d 08 	call	0x107a	; 0x107a <Lcd4_Cmd>
	Lcd4_Clear();
    1172:	0e 94 62 08 	call	0x10c4	; 0x10c4 <Lcd4_Clear>
    1176:	08 95       	ret

00001178 <Lcd4_Write_Char>:
}


void Lcd4_Write_Char(char a)
{
    1178:	cf 93       	push	r28
    117a:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
    117c:	61 e0       	ldi	r22, 0x01	; 1
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	85 e2       	ldi	r24, 0x25	; 37
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
    1188:	8c 2f       	mov	r24, r28
    118a:	82 95       	swap	r24
    118c:	8f 70       	andi	r24, 0x0F	; 15
    118e:	0e 94 fd 07 	call	0xffa	; 0xffa <Lcd4_Port>
	pinChange(EN,1);
    1192:	61 e0       	ldi	r22, 0x01	; 1
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	84 e2       	ldi	r24, 0x24	; 36
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
    119e:	8f ec       	ldi	r24, 0xCF	; 207
    11a0:	97 e0       	ldi	r25, 0x07	; 7
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	f1 f7       	brne	.-4      	; 0x11a2 <Lcd4_Write_Char+0x2a>
    11a6:	00 c0       	rjmp	.+0      	; 0x11a8 <Lcd4_Write_Char+0x30>
    11a8:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	84 e2       	ldi	r24, 0x24	; 36
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
    11b6:	8f ec       	ldi	r24, 0xCF	; 207
    11b8:	97 e0       	ldi	r25, 0x07	; 7
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <Lcd4_Write_Char+0x42>
    11be:	00 c0       	rjmp	.+0      	; 0x11c0 <Lcd4_Write_Char+0x48>
    11c0:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
    11c2:	8c 2f       	mov	r24, r28
    11c4:	8f 70       	andi	r24, 0x0F	; 15
    11c6:	0e 94 fd 07 	call	0xffa	; 0xffa <Lcd4_Port>
	pinChange(EN,1);
    11ca:	61 e0       	ldi	r22, 0x01	; 1
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	84 e2       	ldi	r24, 0x24	; 36
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
    11d6:	8f ec       	ldi	r24, 0xCF	; 207
    11d8:	97 e0       	ldi	r25, 0x07	; 7
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	f1 f7       	brne	.-4      	; 0x11da <Lcd4_Write_Char+0x62>
    11de:	00 c0       	rjmp	.+0      	; 0x11e0 <Lcd4_Write_Char+0x68>
    11e0:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	84 e2       	ldi	r24, 0x24	; 36
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pinChange>
    11ee:	8f ec       	ldi	r24, 0xCF	; 207
    11f0:	97 e0       	ldi	r25, 0x07	; 7
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	f1 f7       	brne	.-4      	; 0x11f2 <Lcd4_Write_Char+0x7a>
    11f6:	00 c0       	rjmp	.+0      	; 0x11f8 <Lcd4_Write_Char+0x80>
    11f8:	00 00       	nop
	_delay_ms(1);
}
    11fa:	cf 91       	pop	r28
    11fc:	08 95       	ret

000011fe <Lcd4_Write_String>:

void Lcd4_Write_String(const char *a)
{
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
    1204:	88 81       	ld	r24, Y
    1206:	88 23       	and	r24, r24
    1208:	31 f0       	breq	.+12     	; 0x1216 <Lcd4_Write_String+0x18>
    120a:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
    120c:	0e 94 bc 08 	call	0x1178	; 0x1178 <Lcd4_Write_Char>
}

void Lcd4_Write_String(const char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
    1210:	89 91       	ld	r24, Y+
    1212:	81 11       	cpse	r24, r1
    1214:	fb cf       	rjmp	.-10     	; 0x120c <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	08 95       	ret

0000121c <I2C_WRITESEQ>:
#include "i2cmaster.h"      //Fleury I2C
#include "lcd.h"            //Fleury LCD
#define I2C_INIT()          i2c_init()

uint8_t I2C_WRITESEQ(uint8_t slave, uint8_t *seq, uint8_t n)
{
    121c:	ef 92       	push	r14
    121e:	ff 92       	push	r15
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	7b 01       	movw	r14, r22
    122a:	14 2f       	mov	r17, r20
    uint8_t ret = 1;
    if (i2c_start(slave << 1) == 0) {
    122c:	88 0f       	add	r24, r24
    122e:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <i2c_start>
    1232:	81 11       	cpse	r24, r1
    1234:	12 c0       	rjmp	.+36     	; 0x125a <I2C_WRITESEQ+0x3e>
        uint8_t i;
        for (i = 0; i < n; i++) {
    1236:	11 23       	and	r17, r17
    1238:	91 f0       	breq	.+36     	; 0x125e <I2C_WRITESEQ+0x42>
    123a:	e7 01       	movw	r28, r14
    123c:	11 50       	subi	r17, 0x01	; 1
    123e:	01 2f       	mov	r16, r17
    1240:	10 e0       	ldi	r17, 0x00	; 0
    1242:	0f 5f       	subi	r16, 0xFF	; 255
    1244:	1f 4f       	sbci	r17, 0xFF	; 255
    1246:	0e 0d       	add	r16, r14
    1248:	1f 1d       	adc	r17, r15
            i2c_write(seq[i]);
    124a:	89 91       	ld	r24, Y+
    124c:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <i2c_write>
uint8_t I2C_WRITESEQ(uint8_t slave, uint8_t *seq, uint8_t n)
{
    uint8_t ret = 1;
    if (i2c_start(slave << 1) == 0) {
        uint8_t i;
        for (i = 0; i < n; i++) {
    1250:	c0 17       	cp	r28, r16
    1252:	d1 07       	cpc	r29, r17
    1254:	d1 f7       	brne	.-12     	; 0x124a <I2C_WRITESEQ+0x2e>
            i2c_write(seq[i]);
        }
        ret = 0;
    1256:	c0 e0       	ldi	r28, 0x00	; 0
    1258:	03 c0       	rjmp	.+6      	; 0x1260 <I2C_WRITESEQ+0x44>
#include "lcd.h"            //Fleury LCD
#define I2C_INIT()          i2c_init()

uint8_t I2C_WRITESEQ(uint8_t slave, uint8_t *seq, uint8_t n)
{
    uint8_t ret = 1;
    125a:	c1 e0       	ldi	r28, 0x01	; 1
    125c:	01 c0       	rjmp	.+2      	; 0x1260 <I2C_WRITESEQ+0x44>
    if (i2c_start(slave << 1) == 0) {
        uint8_t i;
        for (i = 0; i < n; i++) {
            i2c_write(seq[i]);
        }
        ret = 0;
    125e:	c0 e0       	ldi	r28, 0x00	; 0
    }
    i2c_stop();
    1260:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <i2c_stop>
    return ret;
}
    1264:	8c 2f       	mov	r24, r28
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	1f 91       	pop	r17
    126c:	0f 91       	pop	r16
    126e:	ff 90       	pop	r15
    1270:	ef 90       	pop	r14
    1272:	08 95       	ret

00001274 <wr_lcd_mode>:

static unsigned char _base_y[4]={0x80,0xc0};
unsigned char _lcd_x,_lcd_y,_lcd_maxx;

static char wr_lcd_mode(unsigned char c, unsigned char mode)
{
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	00 d0       	rcall	.+0      	; 0x127e <wr_lcd_mode+0xa>
    127e:	00 d0       	rcall	.+0      	; 0x1280 <wr_lcd_mode+0xc>
    1280:	1f 92       	push	r1
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	08 2f       	mov	r16, r24
    char ret = 1;
    unsigned char seq[5];
    static unsigned char backlight = 8;
    if (mode == 8) {
    1288:	68 30       	cpi	r22, 0x08	; 8
    128a:	71 f4       	brne	.+28     	; 0x12a8 <wr_lcd_mode+0x34>
        backlight = (c != 0) ? 8 : 0;
    128c:	81 11       	cpse	r24, r1
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <wr_lcd_mode+0x20>
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	01 c0       	rjmp	.+2      	; 0x1296 <wr_lcd_mode+0x22>
    1294:	88 e0       	ldi	r24, 0x08	; 8
    1296:	80 93 66 00 	sts	0x0066, r24
        return I2C_WRITESEQ(PCF8574A, &backlight, 1);
    129a:	41 e0       	ldi	r20, 0x01	; 1
    129c:	66 e6       	ldi	r22, 0x66	; 102
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	87 e2       	ldi	r24, 0x27	; 39
    12a2:	0e 94 0e 09 	call	0x121c	; 0x121c <I2C_WRITESEQ>
    12a6:	26 c0       	rjmp	.+76     	; 0x12f4 <wr_lcd_mode+0x80>
    }
    mode |= backlight;
    12a8:	90 91 66 00 	lds	r25, 0x0066
    12ac:	16 2f       	mov	r17, r22
    12ae:	19 2b       	or	r17, r25
    seq[0] = mode;                      // EN=0, RW=0, RS=mode
    12b0:	19 83       	std	Y+1, r17	; 0x01
    seq[1] = (c & 0xF0) | mode | 4;     // EN=1, RW=0, RS=mode
    12b2:	98 2f       	mov	r25, r24
    12b4:	90 7f       	andi	r25, 0xF0	; 240
    12b6:	94 60       	ori	r25, 0x04	; 4
    12b8:	91 2b       	or	r25, r17
    12ba:	9a 83       	std	Y+2, r25	; 0x02
    seq[2] = seq[1] & ~4;               // EN=0, RW=0, RS=mode
    12bc:	9b 7f       	andi	r25, 0xFB	; 251
    12be:	9b 83       	std	Y+3, r25	; 0x03
    seq[3] = (c << 4) | mode | 4;       // EN=1, RW=0, RS=mode
    12c0:	80 e1       	ldi	r24, 0x10	; 16
    12c2:	08 9f       	mul	r16, r24
    12c4:	90 01       	movw	r18, r0
    12c6:	11 24       	eor	r1, r1
    12c8:	21 2b       	or	r18, r17
    12ca:	24 60       	ori	r18, 0x04	; 4
    12cc:	2c 83       	std	Y+4, r18	; 0x04
    seq[4] = seq[3] & ~4;               // EN=0, RW=0, RS=mode
    12ce:	2b 7f       	andi	r18, 0xFB	; 251
    12d0:	2d 83       	std	Y+5, r18	; 0x05
    ret = I2C_WRITESEQ(PCF8574A, seq, 5);
    12d2:	45 e0       	ldi	r20, 0x05	; 5
    12d4:	be 01       	movw	r22, r28
    12d6:	6f 5f       	subi	r22, 0xFF	; 255
    12d8:	7f 4f       	sbci	r23, 0xFF	; 255
    12da:	87 e2       	ldi	r24, 0x27	; 39
    12dc:	0e 94 0e 09 	call	0x121c	; 0x121c <I2C_WRITESEQ>
    if (!(mode & 1) && c <= 2)
    12e0:	10 fd       	sbrc	r17, 0
    12e2:	08 c0       	rjmp	.+16     	; 0x12f4 <wr_lcd_mode+0x80>
    12e4:	03 30       	cpi	r16, 0x03	; 3
    12e6:	30 f4       	brcc	.+12     	; 0x12f4 <wr_lcd_mode+0x80>
    12e8:	e3 ef       	ldi	r30, 0xF3	; 243
    12ea:	f1 e0       	ldi	r31, 0x01	; 1
    12ec:	31 97       	sbiw	r30, 0x01	; 1
    12ee:	f1 f7       	brne	.-4      	; 0x12ec <wr_lcd_mode+0x78>
    12f0:	00 c0       	rjmp	.+0      	; 0x12f2 <wr_lcd_mode+0x7e>
    12f2:	00 00       	nop
        _delay_ms(2);                    // CLS and HOME
    return ret;
}
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	1f 91       	pop	r17
    1304:	0f 91       	pop	r16
    1306:	08 95       	ret

00001308 <lcd_gotoxy>:

// set the LCD display position  x=0..39 y=0..3
void lcd_gotoxy(unsigned char x, unsigned char y)
{
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	d8 2f       	mov	r29, r24
    130e:	c6 2f       	mov	r28, r22
    1310:	98 2f       	mov	r25, r24
    1312:	90 68       	ori	r25, 0x80	; 128
    wr_lcd_mode(0x80 | (_base_y[y] | x), 0);
    1314:	e6 2f       	mov	r30, r22
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	e9 59       	subi	r30, 0x99	; 153
    131a:	ff 4f       	sbci	r31, 0xFF	; 255
    131c:	80 81       	ld	r24, Z
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	89 2b       	or	r24, r25
    1322:	0e 94 3a 09 	call	0x1274	; 0x1274 <wr_lcd_mode>
    _lcd_x=x;
    1326:	d0 93 e8 02 	sts	0x02E8, r29
    _lcd_y=y;
    132a:	c0 93 e9 02 	sts	0x02E9, r28
}
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	08 95       	ret

00001334 <lcd_clrscr>:
// clear the LCD
void lcd_clrscr(void)
{
    wr_lcd_mode(0x01, 0);
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	0e 94 3a 09 	call	0x1274	; 0x1274 <wr_lcd_mode>
    _lcd_x = _lcd_y = 0;
    133c:	10 92 e9 02 	sts	0x02E9, r1
    1340:	10 92 e8 02 	sts	0x02E8, r1
    1344:	08 95       	ret

00001346 <lcd_putc>:
{
    wr_lcd_mode(0x02, 0);
    _lcd_x = _lcd_y = 0;
}
void lcd_putc(char c)
{
    1346:	cf 93       	push	r28
    1348:	c8 2f       	mov	r28, r24
    if (_lcd_x>=_lcd_maxx || c == '\n')
    134a:	90 91 e8 02 	lds	r25, 0x02E8
    134e:	80 91 e7 02 	lds	r24, 0x02E7
    1352:	98 17       	cp	r25, r24
    1354:	18 f4       	brcc	.+6      	; 0x135c <lcd_putc+0x16>
    1356:	ca 30       	cpi	r28, 0x0A	; 10
    1358:	59 f4       	brne	.+22     	; 0x1370 <lcd_putc+0x2a>
    135a:	14 c0       	rjmp	.+40     	; 0x1384 <lcd_putc+0x3e>
    {
        lcd_gotoxy(0,++_lcd_y);
    135c:	60 91 e9 02 	lds	r22, 0x02E9
    1360:	6f 5f       	subi	r22, 0xFF	; 255
    1362:	60 93 e9 02 	sts	0x02E9, r22
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	0e 94 84 09 	call	0x1308	; 0x1308 <lcd_gotoxy>
    }
    if (c != '\n') {
    136c:	ca 30       	cpi	r28, 0x0A	; 10
    136e:	91 f0       	breq	.+36     	; 0x1394 <lcd_putc+0x4e>
        ++_lcd_x;
    1370:	80 91 e8 02 	lds	r24, 0x02E8
    1374:	8f 5f       	subi	r24, 0xFF	; 255
    1376:	80 93 e8 02 	sts	0x02E8, r24
        wr_lcd_mode(c, 1);
    137a:	61 e0       	ldi	r22, 0x01	; 1
    137c:	8c 2f       	mov	r24, r28
    137e:	0e 94 3a 09 	call	0x1274	; 0x1274 <wr_lcd_mode>
    1382:	08 c0       	rjmp	.+16     	; 0x1394 <lcd_putc+0x4e>
}
void lcd_putc(char c)
{
    if (_lcd_x>=_lcd_maxx || c == '\n')
    {
        lcd_gotoxy(0,++_lcd_y);
    1384:	60 91 e9 02 	lds	r22, 0x02E9
    1388:	6f 5f       	subi	r22, 0xFF	; 255
    138a:	60 93 e9 02 	sts	0x02E9, r22
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	0e 94 84 09 	call	0x1308	; 0x1308 <lcd_gotoxy>
    }
    if (c != '\n') {
        ++_lcd_x;
        wr_lcd_mode(c, 1);
    }
}
    1394:	cf 91       	pop	r28
    1396:	08 95       	ret

00001398 <lcd_puts>:
// write the string str located in SRAM to the LCD
void lcd_puts(const char *str)
{
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	ec 01       	movw	r28, r24
    while (*str) lcd_putc(*str++);
    139e:	88 81       	ld	r24, Y
    13a0:	88 23       	and	r24, r24
    13a2:	31 f0       	breq	.+12     	; 0x13b0 <lcd_puts+0x18>
    13a4:	21 96       	adiw	r28, 0x01	; 1
    13a6:	0e 94 a3 09 	call	0x1346	; 0x1346 <lcd_putc>
    13aa:	89 91       	ld	r24, Y+
    13ac:	81 11       	cpse	r24, r1
    13ae:	fb cf       	rjmp	.-10     	; 0x13a6 <lcd_puts+0xe>
}
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	08 95       	ret

000013b6 <lcd_init>:
{
    wr_lcd_mode(data, 1);
}
// initialize the LCD controller
void lcd_init(unsigned char command)
{
    13b6:	0f 93       	push	r16
    13b8:	1f 93       	push	r17
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <lcd_init+0xa>
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <lcd_init+0xc>
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <lcd_init+0xe>
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	08 2f       	mov	r16, r24
    uint8_t nibbleval30[] = {0x30, 0x34, 0x30};
    13ca:	90 e3       	ldi	r25, 0x30	; 48
    13cc:	99 83       	std	Y+1, r25	; 0x01
    13ce:	84 e3       	ldi	r24, 0x34	; 52
    13d0:	8a 83       	std	Y+2, r24	; 0x02
    13d2:	9b 83       	std	Y+3, r25	; 0x03
    uint8_t nibbleval20[] = {0x20, 0x24, 0x20};
    13d4:	90 e2       	ldi	r25, 0x20	; 32
    13d6:	9c 83       	std	Y+4, r25	; 0x04
    13d8:	84 e2       	ldi	r24, 0x24	; 36
    13da:	8d 83       	std	Y+5, r24	; 0x05
    13dc:	9e 83       	std	Y+6, r25	; 0x06
	uint8_t ret = 0;
    _lcd_maxx = LCD_DISP_LENGTH;
    13de:	80 e1       	ldi	r24, 0x10	; 16
    13e0:	80 93 e7 02 	sts	0x02E7, r24
    _base_y[2] = _base_y[0] + _lcd_maxx;
    13e4:	e7 e6       	ldi	r30, 0x67	; 103
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	90 81       	ld	r25, Z
    13ea:	90 5f       	subi	r25, 0xF0	; 240
    13ec:	92 83       	std	Z+2, r25	; 0x02
    _base_y[3] = _base_y[1] + _lcd_maxx;
    13ee:	91 81       	ldd	r25, Z+1	; 0x01
    13f0:	90 5f       	subi	r25, 0xF0	; 240
    13f2:	93 83       	std	Z+3, r25	; 0x03
    DDRB |= (1<<5); PORTB |= (1<<5);
    13f4:	bd 9a       	sbi	0x17, 5	; 23
    13f6:	c5 9a       	sbi	0x18, 5	; 24
    I2C_INIT();
    13f8:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <i2c_init>
    13fc:	8b e4       	ldi	r24, 0x4B	; 75
    13fe:	9d e1       	ldi	r25, 0x1D	; 29
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	f1 f7       	brne	.-4      	; 0x1400 <lcd_init+0x4a>
    1404:	00 c0       	rjmp	.+0      	; 0x1406 <lcd_init+0x50>
    1406:	00 00       	nop
    _delay_ms(30);               // 30 ms Delay nach power-up
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit  
    1408:	43 e0       	ldi	r20, 0x03	; 3
    140a:	be 01       	movw	r22, r28
    140c:	6f 5f       	subi	r22, 0xFF	; 255
    140e:	7f 4f       	sbci	r23, 0xFF	; 255
    1410:	87 e2       	ldi	r24, 0x27	; 39
    1412:	0e 94 0e 09 	call	0x121c	; 0x121c <I2C_WRITESEQ>
    1416:	18 2f       	mov	r17, r24
    1418:	81 ee       	ldi	r24, 0xE1	; 225
    141a:	94 e0       	ldi	r25, 0x04	; 4
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	f1 f7       	brne	.-4      	; 0x141c <lcd_init+0x66>
    1420:	00 c0       	rjmp	.+0      	; 0x1422 <lcd_init+0x6c>
    1422:	00 00       	nop
    _delay_ms(5);
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
    1424:	43 e0       	ldi	r20, 0x03	; 3
    1426:	be 01       	movw	r22, r28
    1428:	6f 5f       	subi	r22, 0xFF	; 255
    142a:	7f 4f       	sbci	r23, 0xFF	; 255
    142c:	87 e2       	ldi	r24, 0x27	; 39
    142e:	0e 94 0e 09 	call	0x121c	; 0x121c <I2C_WRITESEQ>
    1432:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
    1434:	43 e0       	ldi	r20, 0x03	; 3
    1436:	be 01       	movw	r22, r28
    1438:	6f 5f       	subi	r22, 0xFF	; 255
    143a:	7f 4f       	sbci	r23, 0xFF	; 255
    143c:	87 e2       	ldi	r24, 0x27	; 39
    143e:	0e 94 0e 09 	call	0x121c	; 0x121c <I2C_WRITESEQ>
    1442:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval20, 3);    //0x2- 8-bit
    1444:	43 e0       	ldi	r20, 0x03	; 3
    1446:	be 01       	movw	r22, r28
    1448:	6c 5f       	subi	r22, 0xFC	; 252
    144a:	7f 4f       	sbci	r23, 0xFF	; 255
    144c:	87 e2       	ldi	r24, 0x27	; 39
    144e:	0e 94 0e 09 	call	0x121c	; 0x121c <I2C_WRITESEQ>
    1452:	18 2b       	or	r17, r24
	ret |= wr_lcd_mode(0x28, 0);                      //0x28 set 4-bit 2 lines
    1454:	60 e0       	ldi	r22, 0x00	; 0
    1456:	88 e2       	ldi	r24, 0x28	; 40
    1458:	0e 94 3a 09 	call	0x1274	; 0x1274 <wr_lcd_mode>
    145c:	81 2b       	or	r24, r17
    if (ret) { PORTB &= ~(1<<5); }
    145e:	09 f0       	breq	.+2      	; 0x1462 <lcd_init+0xac>
    1460:	c5 98       	cbi	0x18, 5	; 24
    wr_lcd_mode(0x0c, 0);
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	8c e0       	ldi	r24, 0x0C	; 12
    1466:	0e 94 3a 09 	call	0x1274	; 0x1274 <wr_lcd_mode>
    wr_lcd_mode(0x06, 0);
    146a:	60 e0       	ldi	r22, 0x00	; 0
    146c:	86 e0       	ldi	r24, 0x06	; 6
    146e:	0e 94 3a 09 	call	0x1274	; 0x1274 <wr_lcd_mode>
    wr_lcd_mode(0x01, 0);
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	0e 94 3a 09 	call	0x1274	; 0x1274 <wr_lcd_mode>
    wr_lcd_mode(command, 0);
    147a:	60 e0       	ldi	r22, 0x00	; 0
    147c:	80 2f       	mov	r24, r16
    147e:	0e 94 3a 09 	call	0x1274	; 0x1274 <wr_lcd_mode>
}
    1482:	26 96       	adiw	r28, 0x06	; 6
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	1f 91       	pop	r17
    1494:	0f 91       	pop	r16
    1496:	08 95       	ret

00001498 <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
    1498:	68 e0       	ldi	r22, 0x08	; 8
    149a:	0e 94 3a 09 	call	0x1274	; 0x1274 <wr_lcd_mode>
    149e:	08 95       	ret

000014a0 <Lm35_Init>:
#include "../all.h"

void Lm35_Init()
{
	ADMUX = 0b11000000; 		//internal voltage 2.56V, right-justified, input ADC0
    14a0:	80 ec       	ldi	r24, 0xC0	; 192
    14a2:	87 b9       	out	0x07, r24	; 7
	ADCSRA =0b10000000; 		//enable = true ,start conversion = false , auto trigger = false , 
    14a4:	80 e8       	ldi	r24, 0x80	; 128
    14a6:	86 b9       	out	0x06, r24	; 6
							//interrupt flag = false  ,interrupt enable = false ,  prescaler factor 2
	DDRA &= ~1;
    14a8:	d0 98       	cbi	0x1a, 0	; 26
    14aa:	08 95       	ret

000014ac <Lm35_GetTemp>:

float Lm35_GetTemp()
{
	float tempC, tempF, vref = 2.56;

	ADCSRA |= (1<<ADSC);
    14ac:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC));
    14ae:	36 99       	sbic	0x06, 6	; 6
    14b0:	fe cf       	rjmp	.-4      	; 0x14ae <Lm35_GetTemp+0x2>

	unsigned int i = ADC;
    14b2:	64 b1       	in	r22, 0x04	; 4
    14b4:	75 b1       	in	r23, 0x05	; 5
	//tempC = i/4;  
	tempF = i * 9.0 / 20  + 32.0;
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 cf 10 	call	0x219e	; 0x219e <__floatunsisf>
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e1       	ldi	r20, 0x10	; 16
    14c4:	51 e4       	ldi	r21, 0x41	; 65
    14c6:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__mulsf3>
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	40 ea       	ldi	r20, 0xA0	; 160
    14d0:	51 e4       	ldi	r21, 0x41	; 65
    14d2:	0e 94 27 10 	call	0x204e	; 0x204e <__divsf3>
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	40 e0       	ldi	r20, 0x00	; 0
    14dc:	52 e4       	ldi	r21, 0x42	; 66
    14de:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__addsf3>

	return tempF;
    14e2:	08 95       	ret

000014e4 <enqueue>:
{
	return qptr->rear_num - qptr->front_num + 1 ;
}

void enqueue(struct Queue *qptr, struct Patient x)
{
    14e4:	0f 93       	push	r16
    14e6:	1f 93       	push	r17
    14e8:	cf 93       	push	r28
    14ea:	df 93       	push	r29
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	8c 01       	movw	r16, r24
	if(empty(&q))
    14f2:	20 91 c6 05 	lds	r18, 0x05C6
    14f6:	30 91 c7 05 	lds	r19, 0x05C7
    14fa:	80 91 c8 05 	lds	r24, 0x05C8
    14fe:	90 91 c9 05 	lds	r25, 0x05C9
    1502:	82 17       	cp	r24, r18
    1504:	93 07       	cpc	r25, r19
    1506:	74 f4       	brge	.+28     	; 0x1524 <enqueue+0x40>
	{
		
		Lcd_PrintLine(LCDNOTICE , 0 , "Patients are Wai");
    1508:	48 e8       	ldi	r20, 0x88	; 136
    150a:	51 e0       	ldi	r21, 0x01	; 1
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
		Lcd_PrintLine(LCDNOTICE , 1 , "ting.use button");
    1516:	49 e9       	ldi	r20, 0x99	; 153
    1518:	51 e0       	ldi	r21, 0x01	; 1
    151a:	61 e0       	ldi	r22, 0x01	; 1
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
		
	}
	qptr->queue[++(qptr->rear_num)] = x;
    1524:	f8 01       	movw	r30, r16
    1526:	e2 52       	subi	r30, 0x22	; 34
    1528:	fd 4f       	sbci	r31, 0xFD	; 253
    152a:	20 81       	ld	r18, Z
    152c:	31 81       	ldd	r19, Z+1	; 0x01
    152e:	2f 5f       	subi	r18, 0xFF	; 255
    1530:	3f 4f       	sbci	r19, 0xFF	; 255
    1532:	31 83       	std	Z+1, r19	; 0x01
    1534:	20 83       	st	Z, r18
    1536:	89 e4       	ldi	r24, 0x49	; 73
    1538:	82 9f       	mul	r24, r18
    153a:	a0 01       	movw	r20, r0
    153c:	83 9f       	mul	r24, r19
    153e:	50 0d       	add	r21, r0
    1540:	11 24       	eor	r1, r1
    1542:	d8 01       	movw	r26, r16
    1544:	a4 0f       	add	r26, r20
    1546:	b5 1f       	adc	r27, r21
    1548:	fe 01       	movw	r30, r28
    154a:	37 96       	adiw	r30, 0x07	; 7
    154c:	01 90       	ld	r0, Z+
    154e:	0d 92       	st	X+, r0
    1550:	8a 95       	dec	r24
    1552:	e1 f7       	brne	.-8      	; 0x154c <enqueue+0x68>
}
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	08 95       	ret

0000155e <dequeue>:
	qptr->rear_num = -1;
}

bool empty(struct Queue *qptr)
{
	if(qptr->front_num > qptr->rear_num)
    155e:	fc 01       	movw	r30, r24
    1560:	e4 52       	subi	r30, 0x24	; 36
    1562:	fd 4f       	sbci	r31, 0xFD	; 253
    1564:	40 81       	ld	r20, Z
    1566:	51 81       	ldd	r21, Z+1	; 0x01
    1568:	32 96       	adiw	r30, 0x02	; 2
}

struct Patient* dequeue(struct Queue *qptr)
{
	struct Patient* value;
	if(empty(qptr))
    156a:	20 81       	ld	r18, Z
    156c:	31 81       	ldd	r19, Z+1	; 0x01
    156e:	24 17       	cp	r18, r20
    1570:	35 07       	cpc	r19, r21
    1572:	7c f0       	brlt	.+30     	; 0x1592 <dequeue+0x34>
	{
		return NULL;
	}
	
	value = &qptr->queue[qptr->front_num++];
    1574:	32 97       	sbiw	r30, 0x02	; 2
    1576:	9a 01       	movw	r18, r20
    1578:	2f 5f       	subi	r18, 0xFF	; 255
    157a:	3f 4f       	sbci	r19, 0xFF	; 255
    157c:	31 83       	std	Z+1, r19	; 0x01
    157e:	20 83       	st	Z, r18
    1580:	69 e4       	ldi	r22, 0x49	; 73
    1582:	64 9f       	mul	r22, r20
    1584:	90 01       	movw	r18, r0
    1586:	65 9f       	mul	r22, r21
    1588:	30 0d       	add	r19, r0
    158a:	11 24       	eor	r1, r1
    158c:	82 0f       	add	r24, r18
    158e:	93 1f       	adc	r25, r19

	return value;
    1590:	08 95       	ret
struct Patient* dequeue(struct Queue *qptr)
{
	struct Patient* value;
	if(empty(qptr))
	{
		return NULL;
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	value = &qptr->queue[qptr->front_num++];

	return value;
}
    1596:	08 95       	ret

00001598 <front>:
	qptr->rear_num = -1;
}

bool empty(struct Queue *qptr)
{
	if(qptr->front_num > qptr->rear_num)
    1598:	fc 01       	movw	r30, r24
    159a:	e4 52       	subi	r30, 0x24	; 36
    159c:	fd 4f       	sbci	r31, 0xFD	; 253
    159e:	40 81       	ld	r20, Z
    15a0:	51 81       	ldd	r21, Z+1	; 0x01
    15a2:	32 96       	adiw	r30, 0x02	; 2
	return value;
}

struct Patient* front(struct Queue *qptr)
{
	if(!empty(qptr))
    15a4:	20 81       	ld	r18, Z
    15a6:	31 81       	ldd	r19, Z+1	; 0x01
    15a8:	24 17       	cp	r18, r20
    15aa:	35 07       	cpc	r19, r21
    15ac:	4c f0       	brlt	.+18     	; 0x15c0 <front+0x28>
	return &qptr->queue[qptr->front_num];
    15ae:	69 e4       	ldi	r22, 0x49	; 73
    15b0:	64 9f       	mul	r22, r20
    15b2:	90 01       	movw	r18, r0
    15b4:	65 9f       	mul	r22, r21
    15b6:	30 0d       	add	r19, r0
    15b8:	11 24       	eor	r1, r1
    15ba:	82 0f       	add	r24, r18
    15bc:	93 1f       	adc	r25, r19
    15be:	08 95       	ret
	else
	return NULL;
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	90 e0       	ldi	r25, 0x00	; 0
}
    15c4:	08 95       	ret

000015c6 <disable_jtag>:
// Function to disable JTAG to use PORTC pins
void disable_jtag(void)
{
	// Disable JTAG interface to use PC2, PC3, PC4, PC5 as normal I/O
	// This must be done within 4 clock cycles
	MCUCSR |= (1 << JTD);
    15c6:	84 b7       	in	r24, 0x34	; 52
    15c8:	80 68       	ori	r24, 0x80	; 128
    15ca:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= (1 << JTD);  // Write twice within 4 clock cycles
    15cc:	84 b7       	in	r24, 0x34	; 52
    15ce:	80 68       	ori	r24, 0x80	; 128
    15d0:	84 bf       	out	0x34, r24	; 52
    15d2:	08 95       	ret

000015d4 <updateSerialDisplay>:
}

// Function to update the 3rd LCD (Serial Display)
void updateSerialDisplay()
{
    15d4:	ef 92       	push	r14
    15d6:	ff 92       	push	r15
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	61 97       	sbiw	r28, 0x11	; 17
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
	// Clear the serial LCD
	Lcd_ClearScreen(LCDSERIAL);
    15f0:	82 e0       	ldi	r24, 0x02	; 2
    15f2:	0e 94 37 06 	call	0xc6e	; 0xc6e <Lcd_ClearScreen>
	
	// Set position to first line, first column
	Lcd_Position(LCDSERIAL, 0, 0);
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	82 e0       	ldi	r24, 0x02	; 2
    1600:	0e 94 62 06 	call	0xcc4	; 0xcc4 <Lcd_Position>
	
	if(empty(&q))
    1604:	20 91 c6 05 	lds	r18, 0x05C6
    1608:	30 91 c7 05 	lds	r19, 0x05C7
    160c:	80 91 c8 05 	lds	r24, 0x05C8
    1610:	90 91 c9 05 	lds	r25, 0x05C9
    1614:	82 17       	cp	r24, r18
    1616:	93 07       	cpc	r25, r19
    1618:	94 f4       	brge	.+36     	; 0x163e <updateSerialDisplay+0x6a>
	{
		// Display "Serial:" when no patients
		Lcd_Prints(LCDSERIAL, "Serial:");
    161a:	69 ea       	ldi	r22, 0xA9	; 169
    161c:	71 e0       	ldi	r23, 0x01	; 1
    161e:	82 e0       	ldi	r24, 0x02	; 2
    1620:	0e 94 4b 06 	call	0xc96	; 0xc96 <Lcd_Prints>
		
		// Second line - display "None"
		Lcd_Position(LCDSERIAL, 1, 0);
    1624:	40 e0       	ldi	r20, 0x00	; 0
    1626:	50 e0       	ldi	r21, 0x00	; 0
    1628:	61 e0       	ldi	r22, 0x01	; 1
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	82 e0       	ldi	r24, 0x02	; 2
    162e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <Lcd_Position>
		Lcd_Prints(LCDSERIAL, "None");
    1632:	61 eb       	ldi	r22, 0xB1	; 177
    1634:	71 e0       	ldi	r23, 0x01	; 1
    1636:	82 e0       	ldi	r24, 0x02	; 2
    1638:	0e 94 4b 06 	call	0xc96	; 0xc96 <Lcd_Prints>
    163c:	2c c0       	rjmp	.+88     	; 0x1696 <updateSerialDisplay+0xc2>
	}
	else
	{
		// Display current patient serial
		struct Patient* now = front(&q);
    163e:	8a ee       	ldi	r24, 0xEA	; 234
    1640:	92 e0       	ldi	r25, 0x02	; 2
    1642:	0e 94 cc 0a 	call	0x1598	; 0x1598 <front>
    1646:	8c 01       	movw	r16, r24
		char serialStr[17];
		sprintf(serialStr, "Serial: %d", now->serial);
    1648:	fc 01       	movw	r30, r24
    164a:	e9 5b       	subi	r30, 0xB9	; 185
    164c:	ff 4f       	sbci	r31, 0xFF	; 255
    164e:	81 81       	ldd	r24, Z+1	; 0x01
    1650:	8f 93       	push	r24
    1652:	80 81       	ld	r24, Z
    1654:	8f 93       	push	r24
    1656:	86 eb       	ldi	r24, 0xB6	; 182
    1658:	91 e0       	ldi	r25, 0x01	; 1
    165a:	9f 93       	push	r25
    165c:	8f 93       	push	r24
    165e:	ce 01       	movw	r24, r28
    1660:	01 96       	adiw	r24, 0x01	; 1
    1662:	7c 01       	movw	r14, r24
    1664:	9f 93       	push	r25
    1666:	8f 93       	push	r24
    1668:	0e 94 71 13 	call	0x26e2	; 0x26e2 <sprintf>
		Lcd_Prints(LCDSERIAL, serialStr);
    166c:	b7 01       	movw	r22, r14
    166e:	82 e0       	ldi	r24, 0x02	; 2
    1670:	0e 94 4b 06 	call	0xc96	; 0xc96 <Lcd_Prints>
		
		// Second line - display patient name
		Lcd_Position(LCDSERIAL, 1, 0);
    1674:	40 e0       	ldi	r20, 0x00	; 0
    1676:	50 e0       	ldi	r21, 0x00	; 0
    1678:	61 e0       	ldi	r22, 0x01	; 1
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	82 e0       	ldi	r24, 0x02	; 2
    167e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <Lcd_Position>
		Lcd_Prints(LCDSERIAL, now->name);
    1682:	b8 01       	movw	r22, r16
    1684:	82 e0       	ldi	r24, 0x02	; 2
    1686:	0e 94 4b 06 	call	0xc96	; 0xc96 <Lcd_Prints>
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
	}
}
    1696:	61 96       	adiw	r28, 0x11	; 17
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	1f 91       	pop	r17
    16a8:	0f 91       	pop	r16
    16aa:	ff 90       	pop	r15
    16ac:	ef 90       	pop	r14
    16ae:	08 95       	ret

000016b0 <main>:

int main(void)
{
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	61 97       	sbiw	r28, 0x11	; 17
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	de bf       	out	0x3e, r29	; 62
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	cd bf       	out	0x3d, r28	; 61
	// FIRST THING: Disable JTAG to use PORTC pins
	disable_jtag();
    16c4:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <disable_jtag>
    16c8:	8f e1       	ldi	r24, 0x1F	; 31
    16ca:	9e e4       	ldi	r25, 0x4E	; 78
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <main+0x1c>
    16d0:	00 c0       	rjmp	.+0      	; 0x16d2 <main+0x22>
    16d2:	00 00       	nop
struct Queue q;

void Queue_Init(struct Queue *qptr)
{
	//toq=0;
	qptr->front_num = 0;
    16d4:	10 92 c7 05 	sts	0x05C7, r1
    16d8:	10 92 c6 05 	sts	0x05C6, r1
	qptr->rear_num = -1;
    16dc:	8f ef       	ldi	r24, 0xFF	; 255
    16de:	9f ef       	ldi	r25, 0xFF	; 255
    16e0:	90 93 c9 05 	sts	0x05C9, r25
    16e4:	80 93 c8 05 	sts	0x05C8, r24
	
	// Small delay after JTAG disable
	_delay_ms(10);
	
	Queue_Init(&q);
	doctorSeeing = 0;
    16e8:	10 92 d2 02 	sts	0x02D2, r1
	//HC05_Init_ATCommand_Mode();
	
	//HC05_SendString("hello there");
	
	// Initialize all LCDs
	Lcd_Init(LCDKEYPAD);
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	0e 94 05 06 	call	0xc0a	; 0xc0a <Lcd_Init>
	Lcd_Init(LCDNOTICE);
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	0e 94 05 06 	call	0xc0a	; 0xc0a <Lcd_Init>
	Lcd_Init(LCDSERIAL);  // Initialize the 3rd LCD
    16f8:	82 e0       	ldi	r24, 0x02	; 2
    16fa:	0e 94 05 06 	call	0xc0a	; 0xc0a <Lcd_Init>
    16fe:	9f ef       	ldi	r25, 0xFF	; 255
    1700:	e0 e7       	ldi	r30, 0x70	; 112
    1702:	f2 e0       	ldi	r31, 0x02	; 2
    1704:	91 50       	subi	r25, 0x01	; 1
    1706:	e0 40       	sbci	r30, 0x00	; 0
    1708:	f0 40       	sbci	r31, 0x00	; 0
    170a:	e1 f7       	brne	.-8      	; 0x1704 <main+0x54>
    170c:	00 c0       	rjmp	.+0      	; 0x170e <main+0x5e>
    170e:	00 00       	nop
	//Lcd_Prints(LCDNOTICE , "abcdefghijklmnopqrstuvwxyz");
	//Lcd_Position(LCDNOTICE , 0,0);
	//Lcd_Prints(LCDNOTICE , "abcdefghijklmnopqrstuvwxyz");
	//Lcd_Prints(LCDNOTICE , "abcdefghijklmnopqrstuvwxyz");
	
	States_GotoState(IDLE);
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <States_GotoState>
	//States_GotoState(GENERATE_SERIAL);
	//States_GotoState(ENTERING_BP);
	
	Keypad_Init();
    1716:	0e 94 2c 03 	call	0x658	; 0x658 <Keypad_Init>
	Button_Init();
    171a:	0e 94 0d 03 	call	0x61a	; 0x61a <Button_Init>
	
	Lcd_PrintLine(LCDNOTICE , 0,"No Patient in ");
    171e:	41 ec       	ldi	r20, 0xC1	; 193
    1720:	51 e0       	ldi	r21, 0x01	; 1
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	70 e0       	ldi	r23, 0x00	; 0
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
	Lcd_PrintLine(LCDNOTICE , 1,"the queue");
    172c:	40 ed       	ldi	r20, 0xD0	; 208
    172e:	51 e0       	ldi	r21, 0x01	; 1
    1730:	61 e0       	ldi	r22, 0x01	; 1
    1732:	70 e0       	ldi	r23, 0x00	; 0
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
	
	// Test the 3rd LCD with initial display
	Lcd_ClearScreen(LCDSERIAL);
    173a:	82 e0       	ldi	r24, 0x02	; 2
    173c:	0e 94 37 06 	call	0xc6e	; 0xc6e <Lcd_ClearScreen>
	Lcd_Position(LCDSERIAL, 0, 0);
    1740:	40 e0       	ldi	r20, 0x00	; 0
    1742:	50 e0       	ldi	r21, 0x00	; 0
    1744:	60 e0       	ldi	r22, 0x00	; 0
    1746:	70 e0       	ldi	r23, 0x00	; 0
    1748:	82 e0       	ldi	r24, 0x02	; 2
    174a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <Lcd_Position>
	Lcd_Prints(LCDSERIAL, "JTAG Disabled");
    174e:	6a ed       	ldi	r22, 0xDA	; 218
    1750:	71 e0       	ldi	r23, 0x01	; 1
    1752:	82 e0       	ldi	r24, 0x02	; 2
    1754:	0e 94 4b 06 	call	0xc96	; 0xc96 <Lcd_Prints>
	Lcd_Position(LCDSERIAL, 1, 0);
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	61 e0       	ldi	r22, 0x01	; 1
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	82 e0       	ldi	r24, 0x02	; 2
    1762:	0e 94 62 06 	call	0xcc4	; 0xcc4 <Lcd_Position>
	Lcd_Prints(LCDSERIAL, "LCD Working");
    1766:	68 ee       	ldi	r22, 0xE8	; 232
    1768:	71 e0       	ldi	r23, 0x01	; 1
    176a:	82 e0       	ldi	r24, 0x02	; 2
    176c:	0e 94 4b 06 	call	0xc96	; 0xc96 <Lcd_Prints>
    1770:	2f ef       	ldi	r18, 0xFF	; 255
    1772:	83 ed       	ldi	r24, 0xD3	; 211
    1774:	90 e3       	ldi	r25, 0x30	; 48
    1776:	21 50       	subi	r18, 0x01	; 1
    1778:	80 40       	sbci	r24, 0x00	; 0
    177a:	90 40       	sbci	r25, 0x00	; 0
    177c:	e1 f7       	brne	.-8      	; 0x1776 <main+0xc6>
    177e:	00 c0       	rjmp	.+0      	; 0x1780 <main+0xd0>
    1780:	00 00       	nop
	
	// Wait a moment to see the test message
	_delay_ms(2000);
	
	// Initialize the 3rd LCD with proper display
	updateSerialDisplay();
    1782:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <updateSerialDisplay>
	qptr->rear_num = -1;
}

bool empty(struct Queue *qptr)
{
	if(qptr->front_num > qptr->rear_num)
    1786:	0f 2e       	mov	r0, r31
    1788:	f6 ec       	ldi	r31, 0xC6	; 198
    178a:	af 2e       	mov	r10, r31
    178c:	f5 e0       	ldi	r31, 0x05	; 5
    178e:	bf 2e       	mov	r11, r31
    1790:	f0 2d       	mov	r31, r0
    1792:	0f 2e       	mov	r0, r31
    1794:	f8 ec       	ldi	r31, 0xC8	; 200
    1796:	cf 2e       	mov	r12, r31
    1798:	f5 e0       	ldi	r31, 0x05	; 5
    179a:	df 2e       	mov	r13, r31
    179c:	f0 2d       	mov	r31, r0
					Lcd_PrintLine(LCDNOTICE , 0,"No Patient in ");
					Lcd_PrintLine(LCDNOTICE , 1,"the queue");
				}
				else 
				{
					doctorSeeing = 1;
    179e:	55 24       	eor	r5, r5
    17a0:	53 94       	inc	r5
					
					struct Patient* now =  front(&q);
					char s[17];
					sprintf(s,"%2d-%13s",now->serial , now->name);
    17a2:	0f 2e       	mov	r0, r31
    17a4:	f7 ef       	ldi	r31, 0xF7	; 247
    17a6:	8f 2e       	mov	r8, r31
    17a8:	f1 e0       	ldi	r31, 0x01	; 1
    17aa:	9f 2e       	mov	r9, r31
    17ac:	f0 2d       	mov	r31, r0
    17ae:	fe 01       	movw	r30, r28
    17b0:	31 96       	adiw	r30, 0x01	; 1
    17b2:	7f 01       	movw	r14, r30
					Lcd_PrintLine(LCDNOTICE , 0,s);
					sprintf(s,"%6sF%3sBPM%2sY",now->temperature,now->bp,now->age);
    17b4:	0f 2e       	mov	r0, r31
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	6f 2e       	mov	r6, r31
    17ba:	f2 e0       	ldi	r31, 0x02	; 2
    17bc:	7f 2e       	mov	r7, r31
    17be:	f0 2d       	mov	r31, r0
	// Initialize the 3rd LCD with proper display
	updateSerialDisplay();
	
	while (1)
	{
		if(Keypad_KeyPressed())
    17c0:	0e 94 b0 03 	call	0x760	; 0x760 <Keypad_KeyPressed>
    17c4:	88 23       	and	r24, r24
    17c6:	e1 f0       	breq	.+56     	; 0x1800 <main+0x150>
    17c8:	ff ef       	ldi	r31, 0xFF	; 255
    17ca:	20 e7       	ldi	r18, 0x70	; 112
    17cc:	82 e0       	ldi	r24, 0x02	; 2
    17ce:	f1 50       	subi	r31, 0x01	; 1
    17d0:	20 40       	sbci	r18, 0x00	; 0
    17d2:	80 40       	sbci	r24, 0x00	; 0
    17d4:	e1 f7       	brne	.-8      	; 0x17ce <main+0x11e>
    17d6:	00 c0       	rjmp	.+0      	; 0x17d8 <main+0x128>
    17d8:	00 00       	nop
		{
			_delay_ms(100);
			if(Keypad_KeyPressed())
    17da:	0e 94 b0 03 	call	0x760	; 0x760 <Keypad_KeyPressed>
    17de:	88 23       	and	r24, r24
    17e0:	79 f0       	breq	.+30     	; 0x1800 <main+0x150>
			{
				int_fast8_t x = Keypad_GetKey();
    17e2:	0e 94 96 04 	call	0x92c	; 0x92c <Keypad_GetKey>
				KeyProcessor_ProcessKey(x);
    17e6:	0e 94 b6 04 	call	0x96c	; 0x96c <KeyProcessor_ProcessKey>
    17ea:	9f ef       	ldi	r25, 0xFF	; 255
    17ec:	e0 e7       	ldi	r30, 0x70	; 112
    17ee:	f2 e0       	ldi	r31, 0x02	; 2
    17f0:	91 50       	subi	r25, 0x01	; 1
    17f2:	e0 40       	sbci	r30, 0x00	; 0
    17f4:	f0 40       	sbci	r31, 0x00	; 0
    17f6:	e1 f7       	brne	.-8      	; 0x17f0 <main+0x140>
    17f8:	00 c0       	rjmp	.+0      	; 0x17fa <main+0x14a>
    17fa:	00 00       	nop
				_delay_ms(100);
				Keypad_Init();
    17fc:	0e 94 2c 03 	call	0x658	; 0x658 <Keypad_Init>
				
			}
		}
		States_Refresh();
    1800:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <States_Refresh>
		if(Button_ButtonPressed())
    1804:	0e 94 0f 03 	call	0x61e	; 0x61e <Button_ButtonPressed>
    1808:	88 23       	and	r24, r24
    180a:	d1 f2       	breq	.-76     	; 0x17c0 <main+0x110>
		{
			
			//Buzzer_Sound();
			Error_ErrorNum("dc",doctorSeeing);
    180c:	60 91 d2 02 	lds	r22, 0x02D2
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	84 ef       	ldi	r24, 0xF4	; 244
    1814:	91 e0       	ldi	r25, 0x01	; 1
    1816:	0e 94 17 03 	call	0x62e	; 0x62e <Error_ErrorNum>
			if(doctorSeeing)
    181a:	80 91 d2 02 	lds	r24, 0x02D2
    181e:	88 23       	and	r24, r24
    1820:	09 f4       	brne	.+2      	; 0x1824 <main+0x174>
    1822:	55 c0       	rjmp	.+170    	; 0x18ce <main+0x21e>
			{
				dequeue(&q);// ager ta falailam
    1824:	8a ee       	ldi	r24, 0xEA	; 234
    1826:	92 e0       	ldi	r25, 0x02	; 2
    1828:	0e 94 af 0a 	call	0x155e	; 0x155e <dequeue>
				if(empty(&q))
    182c:	f5 01       	movw	r30, r10
    182e:	20 81       	ld	r18, Z
    1830:	31 81       	ldd	r19, Z+1	; 0x01
    1832:	f6 01       	movw	r30, r12
    1834:	80 81       	ld	r24, Z
    1836:	91 81       	ldd	r25, Z+1	; 0x01
    1838:	82 17       	cp	r24, r18
    183a:	93 07       	cpc	r25, r19
    183c:	8c f4       	brge	.+34     	; 0x1860 <main+0x1b0>
				{
					Lcd_PrintLine(LCDNOTICE , 0,"No Patient in ");
    183e:	41 ec       	ldi	r20, 0xC1	; 193
    1840:	51 e0       	ldi	r21, 0x01	; 1
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	85 2d       	mov	r24, r5
    1848:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
					Lcd_PrintLine(LCDNOTICE , 1,"the queue");
    184c:	40 ed       	ldi	r20, 0xD0	; 208
    184e:	51 e0       	ldi	r21, 0x01	; 1
    1850:	61 e0       	ldi	r22, 0x01	; 1
    1852:	70 e0       	ldi	r23, 0x00	; 0
    1854:	85 2d       	mov	r24, r5
    1856:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
					doctorSeeing = 0;
    185a:	10 92 d2 02 	sts	0x02D2, r1
    185e:	87 c0       	rjmp	.+270    	; 0x196e <main+0x2be>
				}
				else 
				{
					struct Patient* now =  front(&q);
    1860:	8a ee       	ldi	r24, 0xEA	; 234
    1862:	92 e0       	ldi	r25, 0x02	; 2
    1864:	0e 94 cc 0a 	call	0x1598	; 0x1598 <front>
    1868:	8c 01       	movw	r16, r24
					char s[17];
					sprintf(s,"%2d-%13s",now->serial , now->name);
    186a:	1f 93       	push	r17
    186c:	8f 93       	push	r24
    186e:	fc 01       	movw	r30, r24
    1870:	e9 5b       	subi	r30, 0xB9	; 185
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	81 81       	ldd	r24, Z+1	; 0x01
    1876:	8f 93       	push	r24
    1878:	80 81       	ld	r24, Z
    187a:	8f 93       	push	r24
    187c:	9f 92       	push	r9
    187e:	8f 92       	push	r8
    1880:	ff 92       	push	r15
    1882:	ef 92       	push	r14
    1884:	0e 94 71 13 	call	0x26e2	; 0x26e2 <sprintf>
					Lcd_PrintLine(LCDNOTICE , 0,s);
    1888:	a7 01       	movw	r20, r14
    188a:	60 e0       	ldi	r22, 0x00	; 0
    188c:	70 e0       	ldi	r23, 0x00	; 0
    188e:	85 2d       	mov	r24, r5
    1890:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
					sprintf(s,"%6sF%3sBPM%2sY",now->temperature,now->bp,now->age);
    1894:	c8 01       	movw	r24, r16
    1896:	41 96       	adiw	r24, 0x11	; 17
    1898:	9f 93       	push	r25
    189a:	8f 93       	push	r24
    189c:	8c 96       	adiw	r24, 0x2c	; 44
    189e:	9f 93       	push	r25
    18a0:	8f 93       	push	r24
    18a2:	0d 5c       	subi	r16, 0xCD	; 205
    18a4:	1f 4f       	sbci	r17, 0xFF	; 255
    18a6:	1f 93       	push	r17
    18a8:	0f 93       	push	r16
    18aa:	7f 92       	push	r7
    18ac:	6f 92       	push	r6
    18ae:	ff 92       	push	r15
    18b0:	ef 92       	push	r14
    18b2:	0e 94 71 13 	call	0x26e2	; 0x26e2 <sprintf>
					Lcd_PrintLine(LCDNOTICE , 1,s);
    18b6:	a7 01       	movw	r20, r14
    18b8:	61 e0       	ldi	r22, 0x01	; 1
    18ba:	70 e0       	ldi	r23, 0x00	; 0
    18bc:	85 2d       	mov	r24, r5
    18be:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	50 c0       	rjmp	.+160    	; 0x196e <main+0x2be>
				}
				
			}
			else
			{
				if(empty(&q))
    18ce:	f5 01       	movw	r30, r10
    18d0:	20 81       	ld	r18, Z
    18d2:	31 81       	ldd	r19, Z+1	; 0x01
    18d4:	f6 01       	movw	r30, r12
    18d6:	80 81       	ld	r24, Z
    18d8:	91 81       	ldd	r25, Z+1	; 0x01
    18da:	82 17       	cp	r24, r18
    18dc:	93 07       	cpc	r25, r19
    18de:	7c f4       	brge	.+30     	; 0x18fe <main+0x24e>
				{
					Lcd_PrintLine(LCDNOTICE , 0,"No Patient in ");
    18e0:	41 ec       	ldi	r20, 0xC1	; 193
    18e2:	51 e0       	ldi	r21, 0x01	; 1
    18e4:	60 e0       	ldi	r22, 0x00	; 0
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	85 2d       	mov	r24, r5
    18ea:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
					Lcd_PrintLine(LCDNOTICE , 1,"the queue");
    18ee:	40 ed       	ldi	r20, 0xD0	; 208
    18f0:	51 e0       	ldi	r21, 0x01	; 1
    18f2:	61 e0       	ldi	r22, 0x01	; 1
    18f4:	70 e0       	ldi	r23, 0x00	; 0
    18f6:	85 2d       	mov	r24, r5
    18f8:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
    18fc:	38 c0       	rjmp	.+112    	; 0x196e <main+0x2be>
				}
				else 
				{
					doctorSeeing = 1;
    18fe:	50 92 d2 02 	sts	0x02D2, r5
					
					struct Patient* now =  front(&q);
    1902:	8a ee       	ldi	r24, 0xEA	; 234
    1904:	92 e0       	ldi	r25, 0x02	; 2
    1906:	0e 94 cc 0a 	call	0x1598	; 0x1598 <front>
    190a:	8c 01       	movw	r16, r24
					char s[17];
					sprintf(s,"%2d-%13s",now->serial , now->name);
    190c:	1f 93       	push	r17
    190e:	8f 93       	push	r24
    1910:	fc 01       	movw	r30, r24
    1912:	e9 5b       	subi	r30, 0xB9	; 185
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	81 81       	ldd	r24, Z+1	; 0x01
    1918:	8f 93       	push	r24
    191a:	80 81       	ld	r24, Z
    191c:	8f 93       	push	r24
    191e:	9f 92       	push	r9
    1920:	8f 92       	push	r8
    1922:	ff 92       	push	r15
    1924:	ef 92       	push	r14
    1926:	0e 94 71 13 	call	0x26e2	; 0x26e2 <sprintf>
					Lcd_PrintLine(LCDNOTICE , 0,s);
    192a:	a7 01       	movw	r20, r14
    192c:	60 e0       	ldi	r22, 0x00	; 0
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	85 2d       	mov	r24, r5
    1932:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
					sprintf(s,"%6sF%3sBPM%2sY",now->temperature,now->bp,now->age);
    1936:	c8 01       	movw	r24, r16
    1938:	41 96       	adiw	r24, 0x11	; 17
    193a:	9f 93       	push	r25
    193c:	8f 93       	push	r24
    193e:	8c 96       	adiw	r24, 0x2c	; 44
    1940:	9f 93       	push	r25
    1942:	8f 93       	push	r24
    1944:	0d 5c       	subi	r16, 0xCD	; 205
    1946:	1f 4f       	sbci	r17, 0xFF	; 255
    1948:	1f 93       	push	r17
    194a:	0f 93       	push	r16
    194c:	7f 92       	push	r7
    194e:	6f 92       	push	r6
    1950:	ff 92       	push	r15
    1952:	ef 92       	push	r14
    1954:	0e 94 71 13 	call	0x26e2	; 0x26e2 <sprintf>
					Lcd_PrintLine(LCDNOTICE , 1,s);
    1958:	a7 01       	movw	r20, r14
    195a:	61 e0       	ldi	r22, 0x01	; 1
    195c:	70 e0       	ldi	r23, 0x00	; 0
    195e:	85 2d       	mov	r24, r5
    1960:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	cd bf       	out	0x3d, r28	; 61
				}
			}
			
			// Update the 3rd LCD whenever button is pressed
			updateSerialDisplay();
    196e:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <updateSerialDisplay>
    1972:	9f ef       	ldi	r25, 0xFF	; 255
    1974:	e4 e3       	ldi	r30, 0x34	; 52
    1976:	fc e0       	ldi	r31, 0x0C	; 12
    1978:	91 50       	subi	r25, 0x01	; 1
    197a:	e0 40       	sbci	r30, 0x00	; 0
    197c:	f0 40       	sbci	r31, 0x00	; 0
    197e:	e1 f7       	brne	.-8      	; 0x1978 <main+0x2c8>
    1980:	00 c0       	rjmp	.+0      	; 0x1982 <main+0x2d2>
    1982:	00 00       	nop
    1984:	1d cf       	rjmp	.-454    	; 0x17c0 <main+0x110>

00001986 <Patient_UpdateName>:
struct Patient currentPatient ;
int patientsCount = 0;

void Patient_UpdateName(struct Patient * p, char *newName)
{
	strcpy(p->name , newName);
    1986:	0e 94 45 13 	call	0x268a	; 0x268a <strcpy>
    198a:	08 95       	ret

0000198c <Patient_UpdateAge>:
}
void Patient_UpdateAge(struct Patient *p, char *newAge)
{
	strcpy(p->age , newAge);
    198c:	41 96       	adiw	r24, 0x11	; 17
    198e:	0e 94 45 13 	call	0x268a	; 0x268a <strcpy>
    1992:	08 95       	ret

00001994 <Patient_UpdatePhone>:
}
void Patient_UpdatePhone(struct Patient *p, char *newPhone)
{
	strcpy(p->phone , newPhone);
    1994:	82 96       	adiw	r24, 0x22	; 34
    1996:	0e 94 45 13 	call	0x268a	; 0x268a <strcpy>
    199a:	08 95       	ret

0000199c <Patient_UpdateSerial>:
}
void Patient_UpdateSerial(struct Patient *p, int newSerial)
{
	p->serial = newSerial;
    199c:	fc 01       	movw	r30, r24
    199e:	e9 5b       	subi	r30, 0xB9	; 185
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	71 83       	std	Z+1, r23	; 0x01
    19a4:	60 83       	st	Z, r22
    19a6:	08 95       	ret

000019a8 <Patient_UpdateTemperature>:
}
void Patient_UpdateTemperature(struct Patient *p, char *newTemp)
{
	strcpy(p->temperature , newTemp);
    19a8:	c3 96       	adiw	r24, 0x33	; 51
    19aa:	0e 94 45 13 	call	0x268a	; 0x268a <strcpy>
    19ae:	08 95       	ret

000019b0 <Patient_UpdateBp>:
}
void Patient_UpdateBp(struct Patient *p, char *newBp)
{
	strcpy(p->bp, newBp);
    19b0:	cd 96       	adiw	r24, 0x3d	; 61
    19b2:	0e 94 45 13 	call	0x268a	; 0x268a <strcpy>
    19b6:	08 95       	ret

000019b8 <EnteringAge_Init>:
void EnteringAge_Init()
{
	// clear screen of keypad display , 
	// since both row is used and printed ' ' 
	// so no clear screen func is required
    Lcd_PrintLine(LCDKEYPAD,0,"Enter Age:");
    19b8:	4f e0       	ldi	r20, 0x0F	; 15
    19ba:	52 e0       	ldi	r21, 0x02	; 2
    19bc:	60 e0       	ldi	r22, 0x00	; 0
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
	Keypad_InitNumpad();
    19c6:	0e 94 81 03 	call	0x702	; 0x702 <Keypad_InitNumpad>
	Keypad_UpdateKeyMode();
    19ca:	0e 94 96 03 	call	0x72c	; 0x72c <Keypad_UpdateKeyMode>
	
	// restore old age
	Keypad_WriteToBuffer(currentPatient.age);
    19ce:	8d ed       	ldi	r24, 0xDD	; 221
    19d0:	95 e0       	ldi	r25, 0x05	; 5
    19d2:	0e 94 3e 03 	call	0x67c	; 0x67c <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    19d6:	46 ed       	ldi	r20, 0xD6	; 214
    19d8:	52 e0       	ldi	r21, 0x02	; 2
    19da:	61 e0       	ldi	r22, 0x01	; 1
    19dc:	70 e0       	ldi	r23, 0x00	; 0
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
    19e4:	08 95       	ret

000019e6 <EnteringAge_ProcessKey>:
}

void EnteringAge_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    19e6:	8f 31       	cpi	r24, 0x1F	; 31
    19e8:	61 f4       	brne	.+24     	; 0x1a02 <EnteringAge_ProcessKey+0x1c>
	{
		// nxt
		
		// save age
		Patient_UpdateAge(&currentPatient , keyBuffer);
    19ea:	66 ed       	ldi	r22, 0xD6	; 214
    19ec:	72 e0       	ldi	r23, 0x02	; 2
    19ee:	8c ec       	ldi	r24, 0xCC	; 204
    19f0:	95 e0       	ldi	r25, 0x05	; 5
    19f2:	0e 94 c6 0c 	call	0x198c	; 0x198c <Patient_UpdateAge>
		
		Keypad_ResetBuffer();
    19f6:	0e 94 33 03 	call	0x666	; 0x666 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_PHONE);
    19fa:	83 e0       	ldi	r24, 0x03	; 3
    19fc:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <States_GotoState>
    1a00:	08 95       	ret
	}
	else if(key == 30)
    1a02:	8e 31       	cpi	r24, 0x1E	; 30
    1a04:	61 f4       	brne	.+24     	; 0x1a1e <EnteringAge_ProcessKey+0x38>
	{
		// prev
		
		// save age
		Patient_UpdateAge(&currentPatient , keyBuffer);
    1a06:	66 ed       	ldi	r22, 0xD6	; 214
    1a08:	72 e0       	ldi	r23, 0x02	; 2
    1a0a:	8c ec       	ldi	r24, 0xCC	; 204
    1a0c:	95 e0       	ldi	r25, 0x05	; 5
    1a0e:	0e 94 c6 0c 	call	0x198c	; 0x198c <Patient_UpdateAge>
		
		Keypad_ResetBuffer();
    1a12:	0e 94 33 03 	call	0x666	; 0x666 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_NAME);
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <States_GotoState>
    1a1c:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
    1a1e:	0e 94 22 04 	call	0x844	; 0x844 <Keypad_AddKey>
		
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    1a22:	46 ed       	ldi	r20, 0xD6	; 214
    1a24:	52 e0       	ldi	r21, 0x02	; 2
    1a26:	61 e0       	ldi	r22, 0x01	; 1
    1a28:	70 e0       	ldi	r23, 0x00	; 0
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
		HC05_SendString(keyBuffer);
    1a30:	86 ed       	ldi	r24, 0xD6	; 214
    1a32:	92 e0       	ldi	r25, 0x02	; 2
    1a34:	0e 94 1d 03 	call	0x63a	; 0x63a <HC05_SendString>
		
		Keypad_UpdateKeyMode();
    1a38:	0e 94 96 03 	call	0x72c	; 0x72c <Keypad_UpdateKeyMode>
    1a3c:	08 95       	ret

00001a3e <EnteringBp_Init>:
#include "../../all.h"

bool scanning = 0;
void EnteringBp_Init()
{
    Lcd_PrintLine(LCDKEYPAD,0,"Finger on green-");
    1a3e:	4a e1       	ldi	r20, 0x1A	; 26
    1a40:	52 e0       	ldi	r21, 0x02	; 2
    1a42:	60 e0       	ldi	r22, 0x00	; 0
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
	Lcd_PrintLine(LCDKEYPAD , 1, "Light, press next");
    1a4c:	4b e2       	ldi	r20, 0x2B	; 43
    1a4e:	52 e0       	ldi	r21, 0x02	; 2
    1a50:	61 e0       	ldi	r22, 0x01	; 1
    1a52:	70 e0       	ldi	r23, 0x00	; 0
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
	Bp_Init();
    1a5a:	0e 94 2a 02 	call	0x454	; 0x454 <Bp_Init>
	scanning = 0;
    1a5e:	10 92 d5 02 	sts	0x02D5, r1
    1a62:	08 95       	ret

00001a64 <EntetingBp_Refresh>:
}

void EntetingBp_Refresh()
{
    1a64:	08 95       	ret

00001a66 <EnteringBp_ProcessKey>:
	
}

void EnteringBp_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    1a66:	8f 31       	cpi	r24, 0x1F	; 31
    1a68:	f9 f4       	brne	.+62     	; 0x1aa8 <EnteringBp_ProcessKey+0x42>
	{
		if(scanning == 0)
    1a6a:	80 91 d5 02 	lds	r24, 0x02D5
    1a6e:	81 11       	cpse	r24, r1
    1a70:	0d c0       	rjmp	.+26     	; 0x1a8c <EnteringBp_ProcessKey+0x26>
		{
			scanning = 1;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	80 93 d5 02 	sts	0x02D5, r24
			Lcd_PrintLine(LCDKEYPAD , 1, "Light");
    1a78:	4d e3       	ldi	r20, 0x3D	; 61
    1a7a:	52 e0       	ldi	r21, 0x02	; 2
    1a7c:	61 e0       	ldi	r22, 0x01	; 1
    1a7e:	70 e0       	ldi	r23, 0x00	; 0
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
			Bp_PrintBp();
    1a86:	0e 94 30 02 	call	0x460	; 0x460 <Bp_PrintBp>
    1a8a:	08 95       	ret
		}
		else 
		{
			scanning = 0;
    1a8c:	10 92 d5 02 	sts	0x02D5, r1
			Patient_UpdateBp(&currentPatient , keyBuffer);
    1a90:	66 ed       	ldi	r22, 0xD6	; 214
    1a92:	72 e0       	ldi	r23, 0x02	; 2
    1a94:	8c ec       	ldi	r24, 0xCC	; 204
    1a96:	95 e0       	ldi	r25, 0x05	; 5
    1a98:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <Patient_UpdateBp>
			Keypad_ResetBuffer();
    1a9c:	0e 94 33 03 	call	0x666	; 0x666 <Keypad_ResetBuffer>
			States_GotoState(GENERATE_SERIAL);
    1aa0:	86 e0       	ldi	r24, 0x06	; 6
    1aa2:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <States_GotoState>
    1aa6:	08 95       	ret
		}
		// print serial
	}
	else if(key == 30)
    1aa8:	8e 31       	cpi	r24, 0x1E	; 30
    1aaa:	59 f4       	brne	.+22     	; 0x1ac2 <EnteringBp_ProcessKey+0x5c>
	{
		Patient_UpdateBp(&currentPatient , keyBuffer);
    1aac:	66 ed       	ldi	r22, 0xD6	; 214
    1aae:	72 e0       	ldi	r23, 0x02	; 2
    1ab0:	8c ec       	ldi	r24, 0xCC	; 204
    1ab2:	95 e0       	ldi	r25, 0x05	; 5
    1ab4:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <Patient_UpdateBp>
		Keypad_ResetBuffer();
    1ab8:	0e 94 33 03 	call	0x666	; 0x666 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_TEMP);
    1abc:	84 e0       	ldi	r24, 0x04	; 4
    1abe:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <States_GotoState>
    1ac2:	08 95       	ret

00001ac4 <EnteringName_Init>:
//extern struct storeRecords records[100];
//extern unsigned int serial;

void EnteringName_Init()
{
    Lcd_ClearScreen(LCDKEYPAD);
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	0e 94 37 06 	call	0xc6e	; 0xc6e <Lcd_ClearScreen>
    Lcd_Position(LCDKEYPAD,0,0);
    1aca:	40 e0       	ldi	r20, 0x00	; 0
    1acc:	50 e0       	ldi	r21, 0x00	; 0
    1ace:	60 e0       	ldi	r22, 0x00	; 0
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	0e 94 62 06 	call	0xcc4	; 0xcc4 <Lcd_Position>
    Lcd_Prints(LCDKEYPAD,"Enter Name:");
    1ad8:	63 e4       	ldi	r22, 0x43	; 67
    1ada:	72 e0       	ldi	r23, 0x02	; 2
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	0e 94 4b 06 	call	0xc96	; 0xc96 <Lcd_Prints>
	Keypad_UpdateKeyMode();
    1ae2:	0e 94 96 03 	call	0x72c	; 0x72c <Keypad_UpdateKeyMode>
	
	Keypad_WriteToBuffer(currentPatient.name);
    1ae6:	8c ec       	ldi	r24, 0xCC	; 204
    1ae8:	95 e0       	ldi	r25, 0x05	; 5
    1aea:	0e 94 3e 03 	call	0x67c	; 0x67c <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    1aee:	46 ed       	ldi	r20, 0xD6	; 214
    1af0:	52 e0       	ldi	r21, 0x02	; 2
    1af2:	61 e0       	ldi	r22, 0x01	; 1
    1af4:	70 e0       	ldi	r23, 0x00	; 0
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
    1afc:	08 95       	ret

00001afe <EnteringName_ProcessKey>:
}

void EnteringName_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    1afe:	8f 31       	cpi	r24, 0x1F	; 31
    1b00:	61 f4       	brne	.+24     	; 0x1b1a <EnteringName_ProcessKey+0x1c>
	{
		// nxt
		// save name and procced
		Patient_UpdateName(&currentPatient , keyBuffer);
    1b02:	66 ed       	ldi	r22, 0xD6	; 214
    1b04:	72 e0       	ldi	r23, 0x02	; 2
    1b06:	8c ec       	ldi	r24, 0xCC	; 204
    1b08:	95 e0       	ldi	r25, 0x05	; 5
    1b0a:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Patient_UpdateName>
		Keypad_ResetBuffer();
    1b0e:	0e 94 33 03 	call	0x666	; 0x666 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_AGE);
    1b12:	82 e0       	ldi	r24, 0x02	; 2
    1b14:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <States_GotoState>
    1b18:	08 95       	ret
	}
	else if(key == 30)
    1b1a:	8e 31       	cpi	r24, 0x1E	; 30
    1b1c:	61 f4       	brne	.+24     	; 0x1b36 <EnteringName_ProcessKey+0x38>
	{
		//prev
		// save name and procced
		Patient_UpdateName(&currentPatient , keyBuffer);
    1b1e:	66 ed       	ldi	r22, 0xD6	; 214
    1b20:	72 e0       	ldi	r23, 0x02	; 2
    1b22:	8c ec       	ldi	r24, 0xCC	; 204
    1b24:	95 e0       	ldi	r25, 0x05	; 5
    1b26:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Patient_UpdateName>
		Keypad_ResetBuffer();
    1b2a:	0e 94 33 03 	call	0x666	; 0x666 <Keypad_ResetBuffer>
		States_GotoState(IDLE);
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <States_GotoState>
    1b34:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
    1b36:	0e 94 22 04 	call	0x844	; 0x844 <Keypad_AddKey>
		// print input in lower line
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    1b3a:	46 ed       	ldi	r20, 0xD6	; 214
    1b3c:	52 e0       	ldi	r21, 0x02	; 2
    1b3e:	61 e0       	ldi	r22, 0x01	; 1
    1b40:	70 e0       	ldi	r23, 0x00	; 0
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
		HC05_SendString(keyBuffer);
    1b48:	86 ed       	ldi	r24, 0xD6	; 214
    1b4a:	92 e0       	ldi	r25, 0x02	; 2
    1b4c:	0e 94 1d 03 	call	0x63a	; 0x63a <HC05_SendString>
		
		Keypad_UpdateKeyMode();
    1b50:	0e 94 96 03 	call	0x72c	; 0x72c <Keypad_UpdateKeyMode>
    1b54:	08 95       	ret

00001b56 <EnteringPhone_Init>:


void EnteringPhone_Init()
{
	
    Lcd_PrintLine(LCDKEYPAD,0,"Phone no:");
    1b56:	4f e4       	ldi	r20, 0x4F	; 79
    1b58:	52 e0       	ldi	r21, 0x02	; 2
    1b5a:	60 e0       	ldi	r22, 0x00	; 0
    1b5c:	70 e0       	ldi	r23, 0x00	; 0
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
	
	Keypad_InitNumpad();
    1b64:	0e 94 81 03 	call	0x702	; 0x702 <Keypad_InitNumpad>
	Keypad_UpdateKeyMode();
    1b68:	0e 94 96 03 	call	0x72c	; 0x72c <Keypad_UpdateKeyMode>
	
	//restore old age
	Keypad_WriteToBuffer(currentPatient.phone);
    1b6c:	8e ee       	ldi	r24, 0xEE	; 238
    1b6e:	95 e0       	ldi	r25, 0x05	; 5
    1b70:	0e 94 3e 03 	call	0x67c	; 0x67c <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    1b74:	46 ed       	ldi	r20, 0xD6	; 214
    1b76:	52 e0       	ldi	r21, 0x02	; 2
    1b78:	61 e0       	ldi	r22, 0x01	; 1
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
    1b82:	08 95       	ret

00001b84 <EnteringPhone_ProcessKey>:
}

void EnteringPhone_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    1b84:	8f 31       	cpi	r24, 0x1F	; 31
    1b86:	61 f4       	brne	.+24     	; 0x1ba0 <EnteringPhone_ProcessKey+0x1c>
	{
		// nxt
		
		// save phone patient
		Patient_UpdatePhone(&currentPatient , keyBuffer);
    1b88:	66 ed       	ldi	r22, 0xD6	; 214
    1b8a:	72 e0       	ldi	r23, 0x02	; 2
    1b8c:	8c ec       	ldi	r24, 0xCC	; 204
    1b8e:	95 e0       	ldi	r25, 0x05	; 5
    1b90:	0e 94 ca 0c 	call	0x1994	; 0x1994 <Patient_UpdatePhone>
		Keypad_ResetBuffer();
    1b94:	0e 94 33 03 	call	0x666	; 0x666 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_TEMP);
    1b98:	84 e0       	ldi	r24, 0x04	; 4
    1b9a:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <States_GotoState>
    1b9e:	08 95       	ret
		// print serial
	}
	else if(key == 30)
    1ba0:	8e 31       	cpi	r24, 0x1E	; 30
    1ba2:	61 f4       	brne	.+24     	; 0x1bbc <EnteringPhone_ProcessKey+0x38>
	{
		// prev
		// save phone 
		Patient_UpdatePhone(&currentPatient , keyBuffer);
    1ba4:	66 ed       	ldi	r22, 0xD6	; 214
    1ba6:	72 e0       	ldi	r23, 0x02	; 2
    1ba8:	8c ec       	ldi	r24, 0xCC	; 204
    1baa:	95 e0       	ldi	r25, 0x05	; 5
    1bac:	0e 94 ca 0c 	call	0x1994	; 0x1994 <Patient_UpdatePhone>
		
		Keypad_ResetBuffer();
    1bb0:	0e 94 33 03 	call	0x666	; 0x666 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_AGE);
    1bb4:	82 e0       	ldi	r24, 0x02	; 2
    1bb6:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <States_GotoState>
    1bba:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
    1bbc:	0e 94 22 04 	call	0x844	; 0x844 <Keypad_AddKey>
		
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    1bc0:	46 ed       	ldi	r20, 0xD6	; 214
    1bc2:	52 e0       	ldi	r21, 0x02	; 2
    1bc4:	61 e0       	ldi	r22, 0x01	; 1
    1bc6:	70 e0       	ldi	r23, 0x00	; 0
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
		
		HC05_SendString(keyBuffer);
    1bce:	86 ed       	ldi	r24, 0xD6	; 214
    1bd0:	92 e0       	ldi	r25, 0x02	; 2
    1bd2:	0e 94 1d 03 	call	0x63a	; 0x63a <HC05_SendString>
		
		Keypad_InitNumpad();
    1bd6:	0e 94 81 03 	call	0x702	; 0x702 <Keypad_InitNumpad>
		Keypad_UpdateKeyMode();
    1bda:	0e 94 96 03 	call	0x72c	; 0x72c <Keypad_UpdateKeyMode>
    1bde:	08 95       	ret

00001be0 <EnteringTemp_Init>:
#include "../../all.h"

void EnteringTemp_Init()
{
	Lcd_PrintLine(LCDKEYPAD, 0, "Temperature:");
    1be0:	49 e5       	ldi	r20, 0x59	; 89
    1be2:	52 e0       	ldi	r21, 0x02	; 2
    1be4:	60 e0       	ldi	r22, 0x00	; 0
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
    Lm35_Init();
    1bee:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <Lm35_Init>
    1bf2:	08 95       	ret

00001bf4 <EnteringTemp_Refresh>:
}

void EnteringTemp_Refresh()
{
    1bf4:	0f 93       	push	r16
    1bf6:	1f 93       	push	r17
    1bf8:	cf 93       	push	r28
    1bfa:	df 93       	push	r29
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	64 97       	sbiw	r28, 0x14	; 20
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
	float tempF = Lm35_GetTemp();
    1c0c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <Lm35_GetTemp>
	char tempF_txt[20];
	dtostrf(tempF, 5, 2, tempF_txt);
    1c10:	8e 01       	movw	r16, r28
    1c12:	0f 5f       	subi	r16, 0xFF	; 255
    1c14:	1f 4f       	sbci	r17, 0xFF	; 255
    1c16:	22 e0       	ldi	r18, 0x02	; 2
    1c18:	45 e0       	ldi	r20, 0x05	; 5
    1c1a:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <dtostrf>
	Lcd_PrintLine(LCDKEYPAD, 1, tempF_txt);
    1c1e:	a8 01       	movw	r20, r16
    1c20:	61 e0       	ldi	r22, 0x01	; 1
    1c22:	70 e0       	ldi	r23, 0x00	; 0
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
	strcpy(keyBuffer, tempF_txt);
    1c2a:	b8 01       	movw	r22, r16
    1c2c:	86 ed       	ldi	r24, 0xD6	; 214
    1c2e:	92 e0       	ldi	r25, 0x02	; 2
    1c30:	0e 94 45 13 	call	0x268a	; 0x268a <strcpy>
}
    1c34:	64 96       	adiw	r28, 0x14	; 20
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	cd bf       	out	0x3d, r28	; 61
    1c40:	df 91       	pop	r29
    1c42:	cf 91       	pop	r28
    1c44:	1f 91       	pop	r17
    1c46:	0f 91       	pop	r16
    1c48:	08 95       	ret

00001c4a <EnteringTemp_ProcessKey>:

void EnteringTemp_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    1c4a:	8f 31       	cpi	r24, 0x1F	; 31
    1c4c:	61 f4       	brne	.+24     	; 0x1c66 <EnteringTemp_ProcessKey+0x1c>
	{
		Patient_UpdateTemperature(&currentPatient , keyBuffer);
    1c4e:	66 ed       	ldi	r22, 0xD6	; 214
    1c50:	72 e0       	ldi	r23, 0x02	; 2
    1c52:	8c ec       	ldi	r24, 0xCC	; 204
    1c54:	95 e0       	ldi	r25, 0x05	; 5
    1c56:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Patient_UpdateTemperature>
		Keypad_ResetBuffer();
    1c5a:	0e 94 33 03 	call	0x666	; 0x666 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_BP);
    1c5e:	85 e0       	ldi	r24, 0x05	; 5
    1c60:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <States_GotoState>
    1c64:	08 95       	ret
	}
	else if(key == 30)
    1c66:	8e 31       	cpi	r24, 0x1E	; 30
    1c68:	59 f4       	brne	.+22     	; 0x1c80 <EnteringTemp_ProcessKey+0x36>
	{
		Patient_UpdateTemperature(&currentPatient , keyBuffer);
    1c6a:	66 ed       	ldi	r22, 0xD6	; 214
    1c6c:	72 e0       	ldi	r23, 0x02	; 2
    1c6e:	8c ec       	ldi	r24, 0xCC	; 204
    1c70:	95 e0       	ldi	r25, 0x05	; 5
    1c72:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Patient_UpdateTemperature>
		Keypad_ResetBuffer();
    1c76:	0e 94 33 03 	call	0x666	; 0x666 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_PHONE);
    1c7a:	83 e0       	ldi	r24, 0x03	; 3
    1c7c:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <States_GotoState>
    1c80:	08 95       	ret

00001c82 <Update_Serial>:
		
	}
}

void Update_Serial()
{
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	c4 56       	subi	r28, 0x64	; 100
    1c90:	d1 09       	sbc	r29, r1
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
	char s[100];
	dtostrf((float)(patientsCount+1), 3, 0, s);
    1c9c:	60 91 d3 02 	lds	r22, 0x02D3
    1ca0:	70 91 d4 02 	lds	r23, 0x02D4
    1ca4:	6f 5f       	subi	r22, 0xFF	; 255
    1ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca8:	07 2e       	mov	r0, r23
    1caa:	00 0c       	add	r0, r0
    1cac:	88 0b       	sbc	r24, r24
    1cae:	99 0b       	sbc	r25, r25
    1cb0:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__floatsisf>
    1cb4:	8e 01       	movw	r16, r28
    1cb6:	0f 5f       	subi	r16, 0xFF	; 255
    1cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	43 e0       	ldi	r20, 0x03	; 3
    1cbe:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <dtostrf>
	Lcd_Position(LCDKEYPAD,0,13);
    1cc2:	4d e0       	ldi	r20, 0x0D	; 13
    1cc4:	50 e0       	ldi	r21, 0x00	; 0
    1cc6:	60 e0       	ldi	r22, 0x00	; 0
    1cc8:	70 e0       	ldi	r23, 0x00	; 0
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	0e 94 62 06 	call	0xcc4	; 0xcc4 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,s);
    1cd0:	b8 01       	movw	r22, r16
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	0e 94 4b 06 	call	0xc96	; 0xc96 <Lcd_Prints>
	Patient_UpdateSerial(&currentPatient, patientsCount+1);
    1cd8:	60 91 d3 02 	lds	r22, 0x02D3
    1cdc:	70 91 d4 02 	lds	r23, 0x02D4
    1ce0:	6f 5f       	subi	r22, 0xFF	; 255
    1ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce4:	8c ec       	ldi	r24, 0xCC	; 204
    1ce6:	95 e0       	ldi	r25, 0x05	; 5
    1ce8:	0e 94 ce 0c 	call	0x199c	; 0x199c <Patient_UpdateSerial>
	
}
    1cec:	cc 59       	subi	r28, 0x9C	; 156
    1cee:	df 4f       	sbci	r29, 0xFF	; 255
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	de bf       	out	0x3e, r29	; 62
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	cd bf       	out	0x3d, r28	; 61
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	1f 91       	pop	r17
    1d00:	0f 91       	pop	r16
    1d02:	08 95       	ret

00001d04 <GenerateSerial_Init>:


void GenerateSerial_Init()
{
    
	Lcd_Position(LCDKEYPAD,0,0);
    1d04:	40 e0       	ldi	r20, 0x00	; 0
    1d06:	50 e0       	ldi	r21, 0x00	; 0
    1d08:	60 e0       	ldi	r22, 0x00	; 0
    1d0a:	70 e0       	ldi	r23, 0x00	; 0
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <Lcd_Position>
	Lcd_PrintLine(LCDKEYPAD,0,"Your Serial: ");
    1d12:	46 e6       	ldi	r20, 0x66	; 102
    1d14:	52 e0       	ldi	r21, 0x02	; 2
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    1d18:	70 e0       	ldi	r23, 0x00	; 0
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
	Update_Serial();
    1d20:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <Update_Serial>
	Lcd_Position(LCDKEYPAD,1,0);
    1d24:	40 e0       	ldi	r20, 0x00	; 0
    1d26:	50 e0       	ldi	r21, 0x00	; 0
    1d28:	61 e0       	ldi	r22, 0x01	; 1
    1d2a:	70 e0       	ldi	r23, 0x00	; 0
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <Lcd_Position>
	Lcd_PrintLine(LCDKEYPAD,1,"N:Confirm P:Back");
    1d32:	44 e7       	ldi	r20, 0x74	; 116
    1d34:	52 e0       	ldi	r21, 0x02	; 2
    1d36:	61 e0       	ldi	r22, 0x01	; 1
    1d38:	70 e0       	ldi	r23, 0x00	; 0
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_PrintLine>
    1d40:	08 95       	ret

00001d42 <Update_PatientsList>:
	Patient_UpdateSerial(&currentPatient, patientsCount+1);
	
}

void Update_PatientsList()
{
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
	struct Patient *cp = (struct Patient*) malloc(sizeof(struct Patient));
    1d46:	89 e4       	ldi	r24, 0x49	; 73
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	0e 94 18 12 	call	0x2430	; 0x2430 <malloc>
    1d4e:	ec 01       	movw	r28, r24
	strcpy(cp->name, currentPatient.name);
    1d50:	6c ec       	ldi	r22, 0xCC	; 204
    1d52:	75 e0       	ldi	r23, 0x05	; 5
    1d54:	0e 94 45 13 	call	0x268a	; 0x268a <strcpy>
	strcpy(cp->age, currentPatient.age);
    1d58:	6d ed       	ldi	r22, 0xDD	; 221
    1d5a:	75 e0       	ldi	r23, 0x05	; 5
    1d5c:	ce 01       	movw	r24, r28
    1d5e:	41 96       	adiw	r24, 0x11	; 17
    1d60:	0e 94 45 13 	call	0x268a	; 0x268a <strcpy>
	strcpy(cp->phone, currentPatient.phone);
    1d64:	6e ee       	ldi	r22, 0xEE	; 238
    1d66:	75 e0       	ldi	r23, 0x05	; 5
    1d68:	ce 01       	movw	r24, r28
    1d6a:	82 96       	adiw	r24, 0x22	; 34
    1d6c:	0e 94 45 13 	call	0x268a	; 0x268a <strcpy>
	cp->serial = currentPatient.serial;
    1d70:	fe 01       	movw	r30, r28
    1d72:	e9 5b       	subi	r30, 0xB9	; 185
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	80 91 13 06 	lds	r24, 0x0613
    1d7a:	90 91 14 06 	lds	r25, 0x0614
    1d7e:	91 83       	std	Z+1, r25	; 0x01
    1d80:	80 83       	st	Z, r24
	strcpy(cp->temperature, currentPatient.temperature);
    1d82:	6f ef       	ldi	r22, 0xFF	; 255
    1d84:	75 e0       	ldi	r23, 0x05	; 5
    1d86:	ce 01       	movw	r24, r28
    1d88:	c3 96       	adiw	r24, 0x33	; 51
    1d8a:	0e 94 45 13 	call	0x268a	; 0x268a <strcpy>
	strcpy(cp->bp, currentPatient.bp);
    1d8e:	69 e0       	ldi	r22, 0x09	; 9
    1d90:	76 e0       	ldi	r23, 0x06	; 6
    1d92:	ce 01       	movw	r24, r28
    1d94:	cd 96       	adiw	r24, 0x3d	; 61
    1d96:	0e 94 45 13 	call	0x268a	; 0x268a <strcpy>
	enqueue(&q,*cp);
    1d9a:	8d b7       	in	r24, 0x3d	; 61
    1d9c:	9e b7       	in	r25, 0x3e	; 62
    1d9e:	89 54       	subi	r24, 0x49	; 73
    1da0:	91 09       	sbc	r25, r1
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	9e bf       	out	0x3e, r25	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	8d bf       	out	0x3d, r24	; 61
    1dac:	ad b7       	in	r26, 0x3d	; 61
    1dae:	be b7       	in	r27, 0x3e	; 62
    1db0:	11 96       	adiw	r26, 0x01	; 1
    1db2:	89 e4       	ldi	r24, 0x49	; 73
    1db4:	fe 01       	movw	r30, r28
    1db6:	01 90       	ld	r0, Z+
    1db8:	0d 92       	st	X+, r0
    1dba:	8a 95       	dec	r24
    1dbc:	e1 f7       	brne	.-8      	; 0x1db6 <Update_PatientsList+0x74>
    1dbe:	8a ee       	ldi	r24, 0xEA	; 234
    1dc0:	92 e0       	ldi	r25, 0x02	; 2
    1dc2:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <enqueue>
	free(cp);
    1dc6:	8d b7       	in	r24, 0x3d	; 61
    1dc8:	9e b7       	in	r25, 0x3e	; 62
    1dca:	87 5b       	subi	r24, 0xB7	; 183
    1dcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	f8 94       	cli
    1dd2:	9e bf       	out	0x3e, r25	; 62
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	8d bf       	out	0x3d, r24	; 61
    1dd8:	ce 01       	movw	r24, r28
    1dda:	0e 94 ad 12 	call	0x255a	; 0x255a <free>
}
    1dde:	df 91       	pop	r29
    1de0:	cf 91       	pop	r28
    1de2:	08 95       	ret

00001de4 <Clear_CurrentPatient_Data>:

void Clear_CurrentPatient_Data(){
	strcpy(currentPatient.name, "");
    1de4:	ec ec       	ldi	r30, 0xCC	; 204
    1de6:	f5 e0       	ldi	r31, 0x05	; 5
    1de8:	10 82       	st	Z, r1
	strcpy(currentPatient.age, "");
    1dea:	11 8a       	std	Z+17, r1	; 0x11
	strcpy(currentPatient.phone, "");
    1dec:	12 a2       	std	Z+34, r1	; 0x22
	strcpy(currentPatient.temperature, "");
    1dee:	13 aa       	std	Z+51, r1	; 0x33
	strcpy(currentPatient.bp, "");
    1df0:	10 92 09 06 	sts	0x0609, r1
    1df4:	08 95       	ret

00001df6 <GenerateSerial_ProcessKey>:
	Lcd_PrintLine(LCDKEYPAD,1,"N:Confirm P:Back");
}

void GenerateSerial_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    1df6:	8f 31       	cpi	r24, 0x1F	; 31
    1df8:	49 f5       	brne	.+82     	; 0x1e4c <GenerateSerial_ProcessKey+0x56>
	{
		Lcd_ClearScreen(LCDKEYPAD);
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	0e 94 37 06 	call	0xc6e	; 0xc6e <Lcd_ClearScreen>
		Lcd_Position(LCDKEYPAD,0,3);
    1e00:	43 e0       	ldi	r20, 0x03	; 3
    1e02:	50 e0       	ldi	r21, 0x00	; 0
    1e04:	60 e0       	ldi	r22, 0x00	; 0
    1e06:	70 e0       	ldi	r23, 0x00	; 0
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <Lcd_Position>
		patientsCount++;
    1e0e:	80 91 d3 02 	lds	r24, 0x02D3
    1e12:	90 91 d4 02 	lds	r25, 0x02D4
    1e16:	01 96       	adiw	r24, 0x01	; 1
    1e18:	90 93 d4 02 	sts	0x02D4, r25
    1e1c:	80 93 d3 02 	sts	0x02D3, r24
		Update_PatientsList();
    1e20:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <Update_PatientsList>
		Lcd_Prints(LCDKEYPAD,"Thank You");
    1e24:	65 e8       	ldi	r22, 0x85	; 133
    1e26:	72 e0       	ldi	r23, 0x02	; 2
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	0e 94 4b 06 	call	0xc96	; 0xc96 <Lcd_Prints>
    1e2e:	2f ef       	ldi	r18, 0xFF	; 255
    1e30:	87 e8       	ldi	r24, 0x87	; 135
    1e32:	93 e1       	ldi	r25, 0x13	; 19
    1e34:	21 50       	subi	r18, 0x01	; 1
    1e36:	80 40       	sbci	r24, 0x00	; 0
    1e38:	90 40       	sbci	r25, 0x00	; 0
    1e3a:	e1 f7       	brne	.-8      	; 0x1e34 <GenerateSerial_ProcessKey+0x3e>
    1e3c:	00 c0       	rjmp	.+0      	; 0x1e3e <GenerateSerial_ProcessKey+0x48>
    1e3e:	00 00       	nop
		_delay_ms(800);
		States_GotoState(IDLE);
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <States_GotoState>
		Clear_CurrentPatient_Data();
    1e46:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <Clear_CurrentPatient_Data>
    1e4a:	08 95       	ret
	}
	else if(key == 30)
    1e4c:	8e 31       	cpi	r24, 0x1E	; 30
    1e4e:	19 f4       	brne	.+6      	; 0x1e56 <GenerateSerial_ProcessKey+0x60>
	{
		States_GotoState(ENTERING_BP);
    1e50:	85 e0       	ldi	r24, 0x05	; 5
    1e52:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <States_GotoState>
    1e56:	08 95       	ret

00001e58 <Idle_ProcessKey>:
#include "../../all.h"

void Idle_ProcessKey(int_fast8_t key)
{
	States_GotoState(ENTERING_NAME);
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <States_GotoState>
    1e5e:	08 95       	ret

00001e60 <Idle_Init>:
}
void Idle_Init()
{
	Lcd_ClearScreen(LCDKEYPAD);
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	0e 94 37 06 	call	0xc6e	; 0xc6e <Lcd_ClearScreen>
	Lcd_Position(LCDKEYPAD , 0,0);
    1e66:	40 e0       	ldi	r20, 0x00	; 0
    1e68:	50 e0       	ldi	r21, 0x00	; 0
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	70 e0       	ldi	r23, 0x00	; 0
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	0e 94 62 06 	call	0xcc4	; 0xcc4 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "Welcome!");
    1e74:	6f e8       	ldi	r22, 0x8F	; 143
    1e76:	72 e0       	ldi	r23, 0x02	; 2
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	0e 94 4b 06 	call	0xc96	; 0xc96 <Lcd_Prints>
	Lcd_Position(LCDKEYPAD , 1,0);
    1e7e:	40 e0       	ldi	r20, 0x00	; 0
    1e80:	50 e0       	ldi	r21, 0x00	; 0
    1e82:	61 e0       	ldi	r22, 0x01	; 1
    1e84:	70 e0       	ldi	r23, 0x00	; 0
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	0e 94 62 06 	call	0xcc4	; 0xcc4 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "1. New Entry");
    1e8c:	68 e9       	ldi	r22, 0x98	; 152
    1e8e:	72 e0       	ldi	r23, 0x02	; 2
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	0e 94 4b 06 	call	0xc96	; 0xc96 <Lcd_Prints>
    1e96:	08 95       	ret

00001e98 <States_GotoState>:
#include "../all.h"

volatile int_fast8_t currentState;

void States_GotoState(int_fast8_t newState)
{
    1e98:	cf 93       	push	r28
    1e9a:	c8 2f       	mov	r28, r24
	switch(newState)
    1e9c:	48 2f       	mov	r20, r24
    1e9e:	88 0f       	add	r24, r24
    1ea0:	55 0b       	sbc	r21, r21
    1ea2:	66 0b       	sbc	r22, r22
    1ea4:	77 0b       	sbc	r23, r23
    1ea6:	47 30       	cpi	r20, 0x07	; 7
    1ea8:	51 05       	cpc	r21, r1
    1eaa:	d0 f4       	brcc	.+52     	; 0x1ee0 <States_GotoState+0x48>
    1eac:	fa 01       	movw	r30, r20
    1eae:	ef 5c       	subi	r30, 0xCF	; 207
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <__tablejump2__>
	{
		case IDLE:
			Idle_Init();
    1eb6:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Idle_Init>
			break;
    1eba:	16 c0       	rjmp	.+44     	; 0x1ee8 <States_GotoState+0x50>
		case ENTERING_NAME:
			EnteringName_Init();
    1ebc:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <EnteringName_Init>
			break;
    1ec0:	13 c0       	rjmp	.+38     	; 0x1ee8 <States_GotoState+0x50>
		case ENTERING_AGE:
			EnteringAge_Init();
    1ec2:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <EnteringAge_Init>
			break;
    1ec6:	10 c0       	rjmp	.+32     	; 0x1ee8 <States_GotoState+0x50>
		case ENTERING_PHONE:
			EnteringPhone_Init();
    1ec8:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <EnteringPhone_Init>
			break;
    1ecc:	0d c0       	rjmp	.+26     	; 0x1ee8 <States_GotoState+0x50>
		case ENTERING_TEMP:
			EnteringTemp_Init();
    1ece:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <EnteringTemp_Init>
			break;
    1ed2:	0a c0       	rjmp	.+20     	; 0x1ee8 <States_GotoState+0x50>
		case ENTERING_BP:
			EnteringBp_Init();
    1ed4:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <EnteringBp_Init>
			break;
    1ed8:	07 c0       	rjmp	.+14     	; 0x1ee8 <States_GotoState+0x50>
		case GENERATE_SERIAL:
			GenerateSerial_Init();
    1eda:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <GenerateSerial_Init>
			break;
    1ede:	04 c0       	rjmp	.+8      	; 0x1ee8 <States_GotoState+0x50>
		default:
			Error_Error("GotoState: newState not defined");
    1ee0:	85 ea       	ldi	r24, 0xA5	; 165
    1ee2:	92 e0       	ldi	r25, 0x02	; 2
    1ee4:	0e 94 16 03 	call	0x62c	; 0x62c <Error_Error>
	}
	currentState = newState;
    1ee8:	c0 93 15 06 	sts	0x0615, r28
}
    1eec:	cf 91       	pop	r28
    1eee:	08 95       	ret

00001ef0 <States_Refresh>:
void States_Refresh()
{
	switch(currentState)
    1ef0:	80 91 15 06 	lds	r24, 0x0615
    1ef4:	84 30       	cpi	r24, 0x04	; 4
    1ef6:	19 f0       	breq	.+6      	; 0x1efe <States_Refresh+0xe>
    1ef8:	85 30       	cpi	r24, 0x05	; 5
    1efa:	21 f0       	breq	.+8      	; 0x1f04 <States_Refresh+0x14>
    1efc:	08 95       	ret
		
		case ENTERING_PHONE:
		
			break;
		case ENTERING_TEMP:
			EnteringTemp_Refresh();
    1efe:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <EnteringTemp_Refresh>
			break;
    1f02:	08 95       	ret
		case ENTERING_BP:
			EntetingBp_Refresh();
    1f04:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <EntetingBp_Refresh>
    1f08:	08 95       	ret

00001f0a <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    1f0a:	11 b8       	out	0x01, r1	; 1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    1f0c:	80 e2       	ldi	r24, 0x20	; 32
    1f0e:	80 b9       	out	0x00, r24	; 0
    1f10:	08 95       	ret

00001f12 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1f12:	94 ea       	ldi	r25, 0xA4	; 164
    1f14:	96 bf       	out	0x36, r25	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1f16:	06 b6       	in	r0, 0x36	; 54
    1f18:	07 fe       	sbrs	r0, 7
    1f1a:	fd cf       	rjmp	.-6      	; 0x1f16 <i2c_start+0x4>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1f1c:	91 b1       	in	r25, 0x01	; 1
    1f1e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1f20:	98 30       	cpi	r25, 0x08	; 8
    1f22:	11 f0       	breq	.+4      	; 0x1f28 <i2c_start+0x16>
    1f24:	90 31       	cpi	r25, 0x10	; 16
    1f26:	79 f4       	brne	.+30     	; 0x1f46 <i2c_start+0x34>

	// send device address
	TWDR = address;
    1f28:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    1f2a:	84 e8       	ldi	r24, 0x84	; 132
    1f2c:	86 bf       	out	0x36, r24	; 54

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1f2e:	06 b6       	in	r0, 0x36	; 54
    1f30:	07 fe       	sbrs	r0, 7
    1f32:	fd cf       	rjmp	.-6      	; 0x1f2e <i2c_start+0x1c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1f34:	91 b1       	in	r25, 0x01	; 1
    1f36:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1f38:	98 31       	cpi	r25, 0x18	; 24
    1f3a:	39 f0       	breq	.+14     	; 0x1f4a <i2c_start+0x38>
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 34       	cpi	r25, 0x40	; 64
    1f40:	29 f4       	brne	.+10     	; 0x1f4c <i2c_start+0x3a>
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
    1f4a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    1f4c:	08 95       	ret

00001f4e <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1f4e:	84 e9       	ldi	r24, 0x94	; 148
    1f50:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    1f52:	06 b6       	in	r0, 0x36	; 54
    1f54:	04 fc       	sbrc	r0, 4
    1f56:	fd cf       	rjmp	.-6      	; 0x1f52 <i2c_stop+0x4>

}/* i2c_stop */
    1f58:	08 95       	ret

00001f5a <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1f5a:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    1f5c:	84 e8       	ldi	r24, 0x84	; 132
    1f5e:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1f60:	06 b6       	in	r0, 0x36	; 54
    1f62:	07 fe       	sbrs	r0, 7
    1f64:	fd cf       	rjmp	.-6      	; 0x1f60 <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1f66:	91 b1       	in	r25, 0x01	; 1
    1f68:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	98 32       	cpi	r25, 0x28	; 40
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <i2c_write+0x18>
    1f70:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    1f72:	08 95       	ret

00001f74 <__subsf3>:
    1f74:	50 58       	subi	r21, 0x80	; 128

00001f76 <__addsf3>:
    1f76:	bb 27       	eor	r27, r27
    1f78:	aa 27       	eor	r26, r26
    1f7a:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__addsf3x>
    1f7e:	0c 94 23 11 	jmp	0x2246	; 0x2246 <__fp_round>
    1f82:	0e 94 15 11 	call	0x222a	; 0x222a <__fp_pscA>
    1f86:	38 f0       	brcs	.+14     	; 0x1f96 <__addsf3+0x20>
    1f88:	0e 94 1c 11 	call	0x2238	; 0x2238 <__fp_pscB>
    1f8c:	20 f0       	brcs	.+8      	; 0x1f96 <__addsf3+0x20>
    1f8e:	39 f4       	brne	.+14     	; 0x1f9e <__addsf3+0x28>
    1f90:	9f 3f       	cpi	r25, 0xFF	; 255
    1f92:	19 f4       	brne	.+6      	; 0x1f9a <__addsf3+0x24>
    1f94:	26 f4       	brtc	.+8      	; 0x1f9e <__addsf3+0x28>
    1f96:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__fp_nan>
    1f9a:	0e f4       	brtc	.+2      	; 0x1f9e <__addsf3+0x28>
    1f9c:	e0 95       	com	r30
    1f9e:	e7 fb       	bst	r30, 7
    1fa0:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__fp_inf>

00001fa4 <__addsf3x>:
    1fa4:	e9 2f       	mov	r30, r25
    1fa6:	0e 94 34 11 	call	0x2268	; 0x2268 <__fp_split3>
    1faa:	58 f3       	brcs	.-42     	; 0x1f82 <__addsf3+0xc>
    1fac:	ba 17       	cp	r27, r26
    1fae:	62 07       	cpc	r22, r18
    1fb0:	73 07       	cpc	r23, r19
    1fb2:	84 07       	cpc	r24, r20
    1fb4:	95 07       	cpc	r25, r21
    1fb6:	20 f0       	brcs	.+8      	; 0x1fc0 <__addsf3x+0x1c>
    1fb8:	79 f4       	brne	.+30     	; 0x1fd8 <__addsf3x+0x34>
    1fba:	a6 f5       	brtc	.+104    	; 0x2024 <__addsf3x+0x80>
    1fbc:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__fp_zero>
    1fc0:	0e f4       	brtc	.+2      	; 0x1fc4 <__addsf3x+0x20>
    1fc2:	e0 95       	com	r30
    1fc4:	0b 2e       	mov	r0, r27
    1fc6:	ba 2f       	mov	r27, r26
    1fc8:	a0 2d       	mov	r26, r0
    1fca:	0b 01       	movw	r0, r22
    1fcc:	b9 01       	movw	r22, r18
    1fce:	90 01       	movw	r18, r0
    1fd0:	0c 01       	movw	r0, r24
    1fd2:	ca 01       	movw	r24, r20
    1fd4:	a0 01       	movw	r20, r0
    1fd6:	11 24       	eor	r1, r1
    1fd8:	ff 27       	eor	r31, r31
    1fda:	59 1b       	sub	r21, r25
    1fdc:	99 f0       	breq	.+38     	; 0x2004 <__addsf3x+0x60>
    1fde:	59 3f       	cpi	r21, 0xF9	; 249
    1fe0:	50 f4       	brcc	.+20     	; 0x1ff6 <__addsf3x+0x52>
    1fe2:	50 3e       	cpi	r21, 0xE0	; 224
    1fe4:	68 f1       	brcs	.+90     	; 0x2040 <__addsf3x+0x9c>
    1fe6:	1a 16       	cp	r1, r26
    1fe8:	f0 40       	sbci	r31, 0x00	; 0
    1fea:	a2 2f       	mov	r26, r18
    1fec:	23 2f       	mov	r18, r19
    1fee:	34 2f       	mov	r19, r20
    1ff0:	44 27       	eor	r20, r20
    1ff2:	58 5f       	subi	r21, 0xF8	; 248
    1ff4:	f3 cf       	rjmp	.-26     	; 0x1fdc <__addsf3x+0x38>
    1ff6:	46 95       	lsr	r20
    1ff8:	37 95       	ror	r19
    1ffa:	27 95       	ror	r18
    1ffc:	a7 95       	ror	r26
    1ffe:	f0 40       	sbci	r31, 0x00	; 0
    2000:	53 95       	inc	r21
    2002:	c9 f7       	brne	.-14     	; 0x1ff6 <__addsf3x+0x52>
    2004:	7e f4       	brtc	.+30     	; 0x2024 <__addsf3x+0x80>
    2006:	1f 16       	cp	r1, r31
    2008:	ba 0b       	sbc	r27, r26
    200a:	62 0b       	sbc	r22, r18
    200c:	73 0b       	sbc	r23, r19
    200e:	84 0b       	sbc	r24, r20
    2010:	ba f0       	brmi	.+46     	; 0x2040 <__addsf3x+0x9c>
    2012:	91 50       	subi	r25, 0x01	; 1
    2014:	a1 f0       	breq	.+40     	; 0x203e <__addsf3x+0x9a>
    2016:	ff 0f       	add	r31, r31
    2018:	bb 1f       	adc	r27, r27
    201a:	66 1f       	adc	r22, r22
    201c:	77 1f       	adc	r23, r23
    201e:	88 1f       	adc	r24, r24
    2020:	c2 f7       	brpl	.-16     	; 0x2012 <__addsf3x+0x6e>
    2022:	0e c0       	rjmp	.+28     	; 0x2040 <__addsf3x+0x9c>
    2024:	ba 0f       	add	r27, r26
    2026:	62 1f       	adc	r22, r18
    2028:	73 1f       	adc	r23, r19
    202a:	84 1f       	adc	r24, r20
    202c:	48 f4       	brcc	.+18     	; 0x2040 <__addsf3x+0x9c>
    202e:	87 95       	ror	r24
    2030:	77 95       	ror	r23
    2032:	67 95       	ror	r22
    2034:	b7 95       	ror	r27
    2036:	f7 95       	ror	r31
    2038:	9e 3f       	cpi	r25, 0xFE	; 254
    203a:	08 f0       	brcs	.+2      	; 0x203e <__addsf3x+0x9a>
    203c:	b0 cf       	rjmp	.-160    	; 0x1f9e <__addsf3+0x28>
    203e:	93 95       	inc	r25
    2040:	88 0f       	add	r24, r24
    2042:	08 f0       	brcs	.+2      	; 0x2046 <__addsf3x+0xa2>
    2044:	99 27       	eor	r25, r25
    2046:	ee 0f       	add	r30, r30
    2048:	97 95       	ror	r25
    204a:	87 95       	ror	r24
    204c:	08 95       	ret

0000204e <__divsf3>:
    204e:	0e 94 3b 10 	call	0x2076	; 0x2076 <__divsf3x>
    2052:	0c 94 23 11 	jmp	0x2246	; 0x2246 <__fp_round>
    2056:	0e 94 1c 11 	call	0x2238	; 0x2238 <__fp_pscB>
    205a:	58 f0       	brcs	.+22     	; 0x2072 <__divsf3+0x24>
    205c:	0e 94 15 11 	call	0x222a	; 0x222a <__fp_pscA>
    2060:	40 f0       	brcs	.+16     	; 0x2072 <__divsf3+0x24>
    2062:	29 f4       	brne	.+10     	; 0x206e <__divsf3+0x20>
    2064:	5f 3f       	cpi	r21, 0xFF	; 255
    2066:	29 f0       	breq	.+10     	; 0x2072 <__divsf3+0x24>
    2068:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__fp_inf>
    206c:	51 11       	cpse	r21, r1
    206e:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__fp_szero>
    2072:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__fp_nan>

00002076 <__divsf3x>:
    2076:	0e 94 34 11 	call	0x2268	; 0x2268 <__fp_split3>
    207a:	68 f3       	brcs	.-38     	; 0x2056 <__divsf3+0x8>

0000207c <__divsf3_pse>:
    207c:	99 23       	and	r25, r25
    207e:	b1 f3       	breq	.-20     	; 0x206c <__divsf3+0x1e>
    2080:	55 23       	and	r21, r21
    2082:	91 f3       	breq	.-28     	; 0x2068 <__divsf3+0x1a>
    2084:	95 1b       	sub	r25, r21
    2086:	55 0b       	sbc	r21, r21
    2088:	bb 27       	eor	r27, r27
    208a:	aa 27       	eor	r26, r26
    208c:	62 17       	cp	r22, r18
    208e:	73 07       	cpc	r23, r19
    2090:	84 07       	cpc	r24, r20
    2092:	38 f0       	brcs	.+14     	; 0x20a2 <__divsf3_pse+0x26>
    2094:	9f 5f       	subi	r25, 0xFF	; 255
    2096:	5f 4f       	sbci	r21, 0xFF	; 255
    2098:	22 0f       	add	r18, r18
    209a:	33 1f       	adc	r19, r19
    209c:	44 1f       	adc	r20, r20
    209e:	aa 1f       	adc	r26, r26
    20a0:	a9 f3       	breq	.-22     	; 0x208c <__divsf3_pse+0x10>
    20a2:	35 d0       	rcall	.+106    	; 0x210e <__divsf3_pse+0x92>
    20a4:	0e 2e       	mov	r0, r30
    20a6:	3a f0       	brmi	.+14     	; 0x20b6 <__divsf3_pse+0x3a>
    20a8:	e0 e8       	ldi	r30, 0x80	; 128
    20aa:	32 d0       	rcall	.+100    	; 0x2110 <__divsf3_pse+0x94>
    20ac:	91 50       	subi	r25, 0x01	; 1
    20ae:	50 40       	sbci	r21, 0x00	; 0
    20b0:	e6 95       	lsr	r30
    20b2:	00 1c       	adc	r0, r0
    20b4:	ca f7       	brpl	.-14     	; 0x20a8 <__divsf3_pse+0x2c>
    20b6:	2b d0       	rcall	.+86     	; 0x210e <__divsf3_pse+0x92>
    20b8:	fe 2f       	mov	r31, r30
    20ba:	29 d0       	rcall	.+82     	; 0x210e <__divsf3_pse+0x92>
    20bc:	66 0f       	add	r22, r22
    20be:	77 1f       	adc	r23, r23
    20c0:	88 1f       	adc	r24, r24
    20c2:	bb 1f       	adc	r27, r27
    20c4:	26 17       	cp	r18, r22
    20c6:	37 07       	cpc	r19, r23
    20c8:	48 07       	cpc	r20, r24
    20ca:	ab 07       	cpc	r26, r27
    20cc:	b0 e8       	ldi	r27, 0x80	; 128
    20ce:	09 f0       	breq	.+2      	; 0x20d2 <__divsf3_pse+0x56>
    20d0:	bb 0b       	sbc	r27, r27
    20d2:	80 2d       	mov	r24, r0
    20d4:	bf 01       	movw	r22, r30
    20d6:	ff 27       	eor	r31, r31
    20d8:	93 58       	subi	r25, 0x83	; 131
    20da:	5f 4f       	sbci	r21, 0xFF	; 255
    20dc:	3a f0       	brmi	.+14     	; 0x20ec <__divsf3_pse+0x70>
    20de:	9e 3f       	cpi	r25, 0xFE	; 254
    20e0:	51 05       	cpc	r21, r1
    20e2:	78 f0       	brcs	.+30     	; 0x2102 <__divsf3_pse+0x86>
    20e4:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__fp_inf>
    20e8:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__fp_szero>
    20ec:	5f 3f       	cpi	r21, 0xFF	; 255
    20ee:	e4 f3       	brlt	.-8      	; 0x20e8 <__divsf3_pse+0x6c>
    20f0:	98 3e       	cpi	r25, 0xE8	; 232
    20f2:	d4 f3       	brlt	.-12     	; 0x20e8 <__divsf3_pse+0x6c>
    20f4:	86 95       	lsr	r24
    20f6:	77 95       	ror	r23
    20f8:	67 95       	ror	r22
    20fa:	b7 95       	ror	r27
    20fc:	f7 95       	ror	r31
    20fe:	9f 5f       	subi	r25, 0xFF	; 255
    2100:	c9 f7       	brne	.-14     	; 0x20f4 <__divsf3_pse+0x78>
    2102:	88 0f       	add	r24, r24
    2104:	91 1d       	adc	r25, r1
    2106:	96 95       	lsr	r25
    2108:	87 95       	ror	r24
    210a:	97 f9       	bld	r25, 7
    210c:	08 95       	ret
    210e:	e1 e0       	ldi	r30, 0x01	; 1
    2110:	66 0f       	add	r22, r22
    2112:	77 1f       	adc	r23, r23
    2114:	88 1f       	adc	r24, r24
    2116:	bb 1f       	adc	r27, r27
    2118:	62 17       	cp	r22, r18
    211a:	73 07       	cpc	r23, r19
    211c:	84 07       	cpc	r24, r20
    211e:	ba 07       	cpc	r27, r26
    2120:	20 f0       	brcs	.+8      	; 0x212a <__divsf3_pse+0xae>
    2122:	62 1b       	sub	r22, r18
    2124:	73 0b       	sbc	r23, r19
    2126:	84 0b       	sbc	r24, r20
    2128:	ba 0b       	sbc	r27, r26
    212a:	ee 1f       	adc	r30, r30
    212c:	88 f7       	brcc	.-30     	; 0x2110 <__divsf3_pse+0x94>
    212e:	e0 95       	com	r30
    2130:	08 95       	ret

00002132 <__fixsfsi>:
    2132:	0e 94 a0 10 	call	0x2140	; 0x2140 <__fixunssfsi>
    2136:	68 94       	set
    2138:	b1 11       	cpse	r27, r1
    213a:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__fp_szero>
    213e:	08 95       	ret

00002140 <__fixunssfsi>:
    2140:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fp_splitA>
    2144:	88 f0       	brcs	.+34     	; 0x2168 <__fixunssfsi+0x28>
    2146:	9f 57       	subi	r25, 0x7F	; 127
    2148:	98 f0       	brcs	.+38     	; 0x2170 <__fixunssfsi+0x30>
    214a:	b9 2f       	mov	r27, r25
    214c:	99 27       	eor	r25, r25
    214e:	b7 51       	subi	r27, 0x17	; 23
    2150:	b0 f0       	brcs	.+44     	; 0x217e <__fixunssfsi+0x3e>
    2152:	e1 f0       	breq	.+56     	; 0x218c <__fixunssfsi+0x4c>
    2154:	66 0f       	add	r22, r22
    2156:	77 1f       	adc	r23, r23
    2158:	88 1f       	adc	r24, r24
    215a:	99 1f       	adc	r25, r25
    215c:	1a f0       	brmi	.+6      	; 0x2164 <__fixunssfsi+0x24>
    215e:	ba 95       	dec	r27
    2160:	c9 f7       	brne	.-14     	; 0x2154 <__fixunssfsi+0x14>
    2162:	14 c0       	rjmp	.+40     	; 0x218c <__fixunssfsi+0x4c>
    2164:	b1 30       	cpi	r27, 0x01	; 1
    2166:	91 f0       	breq	.+36     	; 0x218c <__fixunssfsi+0x4c>
    2168:	0e 94 56 11 	call	0x22ac	; 0x22ac <__fp_zero>
    216c:	b1 e0       	ldi	r27, 0x01	; 1
    216e:	08 95       	ret
    2170:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__fp_zero>
    2174:	67 2f       	mov	r22, r23
    2176:	78 2f       	mov	r23, r24
    2178:	88 27       	eor	r24, r24
    217a:	b8 5f       	subi	r27, 0xF8	; 248
    217c:	39 f0       	breq	.+14     	; 0x218c <__fixunssfsi+0x4c>
    217e:	b9 3f       	cpi	r27, 0xF9	; 249
    2180:	cc f3       	brlt	.-14     	; 0x2174 <__fixunssfsi+0x34>
    2182:	86 95       	lsr	r24
    2184:	77 95       	ror	r23
    2186:	67 95       	ror	r22
    2188:	b3 95       	inc	r27
    218a:	d9 f7       	brne	.-10     	; 0x2182 <__fixunssfsi+0x42>
    218c:	3e f4       	brtc	.+14     	; 0x219c <__fixunssfsi+0x5c>
    218e:	90 95       	com	r25
    2190:	80 95       	com	r24
    2192:	70 95       	com	r23
    2194:	61 95       	neg	r22
    2196:	7f 4f       	sbci	r23, 0xFF	; 255
    2198:	8f 4f       	sbci	r24, 0xFF	; 255
    219a:	9f 4f       	sbci	r25, 0xFF	; 255
    219c:	08 95       	ret

0000219e <__floatunsisf>:
    219e:	e8 94       	clt
    21a0:	09 c0       	rjmp	.+18     	; 0x21b4 <__floatsisf+0x12>

000021a2 <__floatsisf>:
    21a2:	97 fb       	bst	r25, 7
    21a4:	3e f4       	brtc	.+14     	; 0x21b4 <__floatsisf+0x12>
    21a6:	90 95       	com	r25
    21a8:	80 95       	com	r24
    21aa:	70 95       	com	r23
    21ac:	61 95       	neg	r22
    21ae:	7f 4f       	sbci	r23, 0xFF	; 255
    21b0:	8f 4f       	sbci	r24, 0xFF	; 255
    21b2:	9f 4f       	sbci	r25, 0xFF	; 255
    21b4:	99 23       	and	r25, r25
    21b6:	a9 f0       	breq	.+42     	; 0x21e2 <__floatsisf+0x40>
    21b8:	f9 2f       	mov	r31, r25
    21ba:	96 e9       	ldi	r25, 0x96	; 150
    21bc:	bb 27       	eor	r27, r27
    21be:	93 95       	inc	r25
    21c0:	f6 95       	lsr	r31
    21c2:	87 95       	ror	r24
    21c4:	77 95       	ror	r23
    21c6:	67 95       	ror	r22
    21c8:	b7 95       	ror	r27
    21ca:	f1 11       	cpse	r31, r1
    21cc:	f8 cf       	rjmp	.-16     	; 0x21be <__floatsisf+0x1c>
    21ce:	fa f4       	brpl	.+62     	; 0x220e <__floatsisf+0x6c>
    21d0:	bb 0f       	add	r27, r27
    21d2:	11 f4       	brne	.+4      	; 0x21d8 <__floatsisf+0x36>
    21d4:	60 ff       	sbrs	r22, 0
    21d6:	1b c0       	rjmp	.+54     	; 0x220e <__floatsisf+0x6c>
    21d8:	6f 5f       	subi	r22, 0xFF	; 255
    21da:	7f 4f       	sbci	r23, 0xFF	; 255
    21dc:	8f 4f       	sbci	r24, 0xFF	; 255
    21de:	9f 4f       	sbci	r25, 0xFF	; 255
    21e0:	16 c0       	rjmp	.+44     	; 0x220e <__floatsisf+0x6c>
    21e2:	88 23       	and	r24, r24
    21e4:	11 f0       	breq	.+4      	; 0x21ea <__floatsisf+0x48>
    21e6:	96 e9       	ldi	r25, 0x96	; 150
    21e8:	11 c0       	rjmp	.+34     	; 0x220c <__floatsisf+0x6a>
    21ea:	77 23       	and	r23, r23
    21ec:	21 f0       	breq	.+8      	; 0x21f6 <__floatsisf+0x54>
    21ee:	9e e8       	ldi	r25, 0x8E	; 142
    21f0:	87 2f       	mov	r24, r23
    21f2:	76 2f       	mov	r23, r22
    21f4:	05 c0       	rjmp	.+10     	; 0x2200 <__floatsisf+0x5e>
    21f6:	66 23       	and	r22, r22
    21f8:	71 f0       	breq	.+28     	; 0x2216 <__floatsisf+0x74>
    21fa:	96 e8       	ldi	r25, 0x86	; 134
    21fc:	86 2f       	mov	r24, r22
    21fe:	70 e0       	ldi	r23, 0x00	; 0
    2200:	60 e0       	ldi	r22, 0x00	; 0
    2202:	2a f0       	brmi	.+10     	; 0x220e <__floatsisf+0x6c>
    2204:	9a 95       	dec	r25
    2206:	66 0f       	add	r22, r22
    2208:	77 1f       	adc	r23, r23
    220a:	88 1f       	adc	r24, r24
    220c:	da f7       	brpl	.-10     	; 0x2204 <__floatsisf+0x62>
    220e:	88 0f       	add	r24, r24
    2210:	96 95       	lsr	r25
    2212:	87 95       	ror	r24
    2214:	97 f9       	bld	r25, 7
    2216:	08 95       	ret

00002218 <__fp_inf>:
    2218:	97 f9       	bld	r25, 7
    221a:	9f 67       	ori	r25, 0x7F	; 127
    221c:	80 e8       	ldi	r24, 0x80	; 128
    221e:	70 e0       	ldi	r23, 0x00	; 0
    2220:	60 e0       	ldi	r22, 0x00	; 0
    2222:	08 95       	ret

00002224 <__fp_nan>:
    2224:	9f ef       	ldi	r25, 0xFF	; 255
    2226:	80 ec       	ldi	r24, 0xC0	; 192
    2228:	08 95       	ret

0000222a <__fp_pscA>:
    222a:	00 24       	eor	r0, r0
    222c:	0a 94       	dec	r0
    222e:	16 16       	cp	r1, r22
    2230:	17 06       	cpc	r1, r23
    2232:	18 06       	cpc	r1, r24
    2234:	09 06       	cpc	r0, r25
    2236:	08 95       	ret

00002238 <__fp_pscB>:
    2238:	00 24       	eor	r0, r0
    223a:	0a 94       	dec	r0
    223c:	12 16       	cp	r1, r18
    223e:	13 06       	cpc	r1, r19
    2240:	14 06       	cpc	r1, r20
    2242:	05 06       	cpc	r0, r21
    2244:	08 95       	ret

00002246 <__fp_round>:
    2246:	09 2e       	mov	r0, r25
    2248:	03 94       	inc	r0
    224a:	00 0c       	add	r0, r0
    224c:	11 f4       	brne	.+4      	; 0x2252 <__fp_round+0xc>
    224e:	88 23       	and	r24, r24
    2250:	52 f0       	brmi	.+20     	; 0x2266 <__fp_round+0x20>
    2252:	bb 0f       	add	r27, r27
    2254:	40 f4       	brcc	.+16     	; 0x2266 <__fp_round+0x20>
    2256:	bf 2b       	or	r27, r31
    2258:	11 f4       	brne	.+4      	; 0x225e <__fp_round+0x18>
    225a:	60 ff       	sbrs	r22, 0
    225c:	04 c0       	rjmp	.+8      	; 0x2266 <__fp_round+0x20>
    225e:	6f 5f       	subi	r22, 0xFF	; 255
    2260:	7f 4f       	sbci	r23, 0xFF	; 255
    2262:	8f 4f       	sbci	r24, 0xFF	; 255
    2264:	9f 4f       	sbci	r25, 0xFF	; 255
    2266:	08 95       	ret

00002268 <__fp_split3>:
    2268:	57 fd       	sbrc	r21, 7
    226a:	90 58       	subi	r25, 0x80	; 128
    226c:	44 0f       	add	r20, r20
    226e:	55 1f       	adc	r21, r21
    2270:	59 f0       	breq	.+22     	; 0x2288 <__fp_splitA+0x10>
    2272:	5f 3f       	cpi	r21, 0xFF	; 255
    2274:	71 f0       	breq	.+28     	; 0x2292 <__fp_splitA+0x1a>
    2276:	47 95       	ror	r20

00002278 <__fp_splitA>:
    2278:	88 0f       	add	r24, r24
    227a:	97 fb       	bst	r25, 7
    227c:	99 1f       	adc	r25, r25
    227e:	61 f0       	breq	.+24     	; 0x2298 <__fp_splitA+0x20>
    2280:	9f 3f       	cpi	r25, 0xFF	; 255
    2282:	79 f0       	breq	.+30     	; 0x22a2 <__fp_splitA+0x2a>
    2284:	87 95       	ror	r24
    2286:	08 95       	ret
    2288:	12 16       	cp	r1, r18
    228a:	13 06       	cpc	r1, r19
    228c:	14 06       	cpc	r1, r20
    228e:	55 1f       	adc	r21, r21
    2290:	f2 cf       	rjmp	.-28     	; 0x2276 <__fp_split3+0xe>
    2292:	46 95       	lsr	r20
    2294:	f1 df       	rcall	.-30     	; 0x2278 <__fp_splitA>
    2296:	08 c0       	rjmp	.+16     	; 0x22a8 <__fp_splitA+0x30>
    2298:	16 16       	cp	r1, r22
    229a:	17 06       	cpc	r1, r23
    229c:	18 06       	cpc	r1, r24
    229e:	99 1f       	adc	r25, r25
    22a0:	f1 cf       	rjmp	.-30     	; 0x2284 <__fp_splitA+0xc>
    22a2:	86 95       	lsr	r24
    22a4:	71 05       	cpc	r23, r1
    22a6:	61 05       	cpc	r22, r1
    22a8:	08 94       	sec
    22aa:	08 95       	ret

000022ac <__fp_zero>:
    22ac:	e8 94       	clt

000022ae <__fp_szero>:
    22ae:	bb 27       	eor	r27, r27
    22b0:	66 27       	eor	r22, r22
    22b2:	77 27       	eor	r23, r23
    22b4:	cb 01       	movw	r24, r22
    22b6:	97 f9       	bld	r25, 7
    22b8:	08 95       	ret

000022ba <__mulsf3>:
    22ba:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__mulsf3x>
    22be:	0c 94 23 11 	jmp	0x2246	; 0x2246 <__fp_round>
    22c2:	0e 94 15 11 	call	0x222a	; 0x222a <__fp_pscA>
    22c6:	38 f0       	brcs	.+14     	; 0x22d6 <__mulsf3+0x1c>
    22c8:	0e 94 1c 11 	call	0x2238	; 0x2238 <__fp_pscB>
    22cc:	20 f0       	brcs	.+8      	; 0x22d6 <__mulsf3+0x1c>
    22ce:	95 23       	and	r25, r21
    22d0:	11 f0       	breq	.+4      	; 0x22d6 <__mulsf3+0x1c>
    22d2:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__fp_inf>
    22d6:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__fp_nan>
    22da:	11 24       	eor	r1, r1
    22dc:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__fp_szero>

000022e0 <__mulsf3x>:
    22e0:	0e 94 34 11 	call	0x2268	; 0x2268 <__fp_split3>
    22e4:	70 f3       	brcs	.-36     	; 0x22c2 <__mulsf3+0x8>

000022e6 <__mulsf3_pse>:
    22e6:	95 9f       	mul	r25, r21
    22e8:	c1 f3       	breq	.-16     	; 0x22da <__mulsf3+0x20>
    22ea:	95 0f       	add	r25, r21
    22ec:	50 e0       	ldi	r21, 0x00	; 0
    22ee:	55 1f       	adc	r21, r21
    22f0:	62 9f       	mul	r22, r18
    22f2:	f0 01       	movw	r30, r0
    22f4:	72 9f       	mul	r23, r18
    22f6:	bb 27       	eor	r27, r27
    22f8:	f0 0d       	add	r31, r0
    22fa:	b1 1d       	adc	r27, r1
    22fc:	63 9f       	mul	r22, r19
    22fe:	aa 27       	eor	r26, r26
    2300:	f0 0d       	add	r31, r0
    2302:	b1 1d       	adc	r27, r1
    2304:	aa 1f       	adc	r26, r26
    2306:	64 9f       	mul	r22, r20
    2308:	66 27       	eor	r22, r22
    230a:	b0 0d       	add	r27, r0
    230c:	a1 1d       	adc	r26, r1
    230e:	66 1f       	adc	r22, r22
    2310:	82 9f       	mul	r24, r18
    2312:	22 27       	eor	r18, r18
    2314:	b0 0d       	add	r27, r0
    2316:	a1 1d       	adc	r26, r1
    2318:	62 1f       	adc	r22, r18
    231a:	73 9f       	mul	r23, r19
    231c:	b0 0d       	add	r27, r0
    231e:	a1 1d       	adc	r26, r1
    2320:	62 1f       	adc	r22, r18
    2322:	83 9f       	mul	r24, r19
    2324:	a0 0d       	add	r26, r0
    2326:	61 1d       	adc	r22, r1
    2328:	22 1f       	adc	r18, r18
    232a:	74 9f       	mul	r23, r20
    232c:	33 27       	eor	r19, r19
    232e:	a0 0d       	add	r26, r0
    2330:	61 1d       	adc	r22, r1
    2332:	23 1f       	adc	r18, r19
    2334:	84 9f       	mul	r24, r20
    2336:	60 0d       	add	r22, r0
    2338:	21 1d       	adc	r18, r1
    233a:	82 2f       	mov	r24, r18
    233c:	76 2f       	mov	r23, r22
    233e:	6a 2f       	mov	r22, r26
    2340:	11 24       	eor	r1, r1
    2342:	9f 57       	subi	r25, 0x7F	; 127
    2344:	50 40       	sbci	r21, 0x00	; 0
    2346:	9a f0       	brmi	.+38     	; 0x236e <__mulsf3_pse+0x88>
    2348:	f1 f0       	breq	.+60     	; 0x2386 <__mulsf3_pse+0xa0>
    234a:	88 23       	and	r24, r24
    234c:	4a f0       	brmi	.+18     	; 0x2360 <__mulsf3_pse+0x7a>
    234e:	ee 0f       	add	r30, r30
    2350:	ff 1f       	adc	r31, r31
    2352:	bb 1f       	adc	r27, r27
    2354:	66 1f       	adc	r22, r22
    2356:	77 1f       	adc	r23, r23
    2358:	88 1f       	adc	r24, r24
    235a:	91 50       	subi	r25, 0x01	; 1
    235c:	50 40       	sbci	r21, 0x00	; 0
    235e:	a9 f7       	brne	.-22     	; 0x234a <__mulsf3_pse+0x64>
    2360:	9e 3f       	cpi	r25, 0xFE	; 254
    2362:	51 05       	cpc	r21, r1
    2364:	80 f0       	brcs	.+32     	; 0x2386 <__mulsf3_pse+0xa0>
    2366:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__fp_inf>
    236a:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__fp_szero>
    236e:	5f 3f       	cpi	r21, 0xFF	; 255
    2370:	e4 f3       	brlt	.-8      	; 0x236a <__mulsf3_pse+0x84>
    2372:	98 3e       	cpi	r25, 0xE8	; 232
    2374:	d4 f3       	brlt	.-12     	; 0x236a <__mulsf3_pse+0x84>
    2376:	86 95       	lsr	r24
    2378:	77 95       	ror	r23
    237a:	67 95       	ror	r22
    237c:	b7 95       	ror	r27
    237e:	f7 95       	ror	r31
    2380:	e7 95       	ror	r30
    2382:	9f 5f       	subi	r25, 0xFF	; 255
    2384:	c1 f7       	brne	.-16     	; 0x2376 <__mulsf3_pse+0x90>
    2386:	fe 2b       	or	r31, r30
    2388:	88 0f       	add	r24, r24
    238a:	91 1d       	adc	r25, r1
    238c:	96 95       	lsr	r25
    238e:	87 95       	ror	r24
    2390:	97 f9       	bld	r25, 7
    2392:	08 95       	ret

00002394 <__divmodhi4>:
    2394:	97 fb       	bst	r25, 7
    2396:	07 2e       	mov	r0, r23
    2398:	16 f4       	brtc	.+4      	; 0x239e <__divmodhi4+0xa>
    239a:	00 94       	com	r0
    239c:	07 d0       	rcall	.+14     	; 0x23ac <__divmodhi4_neg1>
    239e:	77 fd       	sbrc	r23, 7
    23a0:	09 d0       	rcall	.+18     	; 0x23b4 <__divmodhi4_neg2>
    23a2:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__udivmodhi4>
    23a6:	07 fc       	sbrc	r0, 7
    23a8:	05 d0       	rcall	.+10     	; 0x23b4 <__divmodhi4_neg2>
    23aa:	3e f4       	brtc	.+14     	; 0x23ba <__divmodhi4_exit>

000023ac <__divmodhi4_neg1>:
    23ac:	90 95       	com	r25
    23ae:	81 95       	neg	r24
    23b0:	9f 4f       	sbci	r25, 0xFF	; 255
    23b2:	08 95       	ret

000023b4 <__divmodhi4_neg2>:
    23b4:	70 95       	com	r23
    23b6:	61 95       	neg	r22
    23b8:	7f 4f       	sbci	r23, 0xFF	; 255

000023ba <__divmodhi4_exit>:
    23ba:	08 95       	ret

000023bc <__tablejump2__>:
    23bc:	ee 0f       	add	r30, r30
    23be:	ff 1f       	adc	r31, r31
    23c0:	05 90       	lpm	r0, Z+
    23c2:	f4 91       	lpm	r31, Z
    23c4:	e0 2d       	mov	r30, r0
    23c6:	09 94       	ijmp

000023c8 <__udivmodhi4>:
    23c8:	aa 1b       	sub	r26, r26
    23ca:	bb 1b       	sub	r27, r27
    23cc:	51 e1       	ldi	r21, 0x11	; 17
    23ce:	07 c0       	rjmp	.+14     	; 0x23de <__udivmodhi4_ep>

000023d0 <__udivmodhi4_loop>:
    23d0:	aa 1f       	adc	r26, r26
    23d2:	bb 1f       	adc	r27, r27
    23d4:	a6 17       	cp	r26, r22
    23d6:	b7 07       	cpc	r27, r23
    23d8:	10 f0       	brcs	.+4      	; 0x23de <__udivmodhi4_ep>
    23da:	a6 1b       	sub	r26, r22
    23dc:	b7 0b       	sbc	r27, r23

000023de <__udivmodhi4_ep>:
    23de:	88 1f       	adc	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	5a 95       	dec	r21
    23e4:	a9 f7       	brne	.-22     	; 0x23d0 <__udivmodhi4_loop>
    23e6:	80 95       	com	r24
    23e8:	90 95       	com	r25
    23ea:	bc 01       	movw	r22, r24
    23ec:	cd 01       	movw	r24, r26
    23ee:	08 95       	ret

000023f0 <dtostrf>:
    23f0:	ef 92       	push	r14
    23f2:	0f 93       	push	r16
    23f4:	1f 93       	push	r17
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	e8 01       	movw	r28, r16
    23fc:	47 fd       	sbrc	r20, 7
    23fe:	02 c0       	rjmp	.+4      	; 0x2404 <dtostrf+0x14>
    2400:	34 e0       	ldi	r19, 0x04	; 4
    2402:	01 c0       	rjmp	.+2      	; 0x2406 <dtostrf+0x16>
    2404:	34 e1       	ldi	r19, 0x14	; 20
    2406:	e4 2f       	mov	r30, r20
    2408:	44 0f       	add	r20, r20
    240a:	ff 0b       	sbc	r31, r31
    240c:	f7 ff       	sbrs	r31, 7
    240e:	03 c0       	rjmp	.+6      	; 0x2416 <dtostrf+0x26>
    2410:	f1 95       	neg	r31
    2412:	e1 95       	neg	r30
    2414:	f1 09       	sbc	r31, r1
    2416:	e3 2e       	mov	r14, r19
    2418:	02 2f       	mov	r16, r18
    241a:	2e 2f       	mov	r18, r30
    241c:	ae 01       	movw	r20, r28
    241e:	0e 94 66 15 	call	0x2acc	; 0x2acc <dtoa_prf>
    2422:	ce 01       	movw	r24, r28
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	1f 91       	pop	r17
    242a:	0f 91       	pop	r16
    242c:	ef 90       	pop	r14
    242e:	08 95       	ret

00002430 <malloc>:
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	82 30       	cpi	r24, 0x02	; 2
    2436:	91 05       	cpc	r25, r1
    2438:	10 f4       	brcc	.+4      	; 0x243e <malloc+0xe>
    243a:	82 e0       	ldi	r24, 0x02	; 2
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	e0 91 18 06 	lds	r30, 0x0618
    2442:	f0 91 19 06 	lds	r31, 0x0619
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	c0 e0       	ldi	r28, 0x00	; 0
    244c:	d0 e0       	ldi	r29, 0x00	; 0
    244e:	30 97       	sbiw	r30, 0x00	; 0
    2450:	11 f1       	breq	.+68     	; 0x2496 <malloc+0x66>
    2452:	40 81       	ld	r20, Z
    2454:	51 81       	ldd	r21, Z+1	; 0x01
    2456:	48 17       	cp	r20, r24
    2458:	59 07       	cpc	r21, r25
    245a:	c0 f0       	brcs	.+48     	; 0x248c <malloc+0x5c>
    245c:	48 17       	cp	r20, r24
    245e:	59 07       	cpc	r21, r25
    2460:	61 f4       	brne	.+24     	; 0x247a <malloc+0x4a>
    2462:	82 81       	ldd	r24, Z+2	; 0x02
    2464:	93 81       	ldd	r25, Z+3	; 0x03
    2466:	20 97       	sbiw	r28, 0x00	; 0
    2468:	19 f0       	breq	.+6      	; 0x2470 <malloc+0x40>
    246a:	9b 83       	std	Y+3, r25	; 0x03
    246c:	8a 83       	std	Y+2, r24	; 0x02
    246e:	2b c0       	rjmp	.+86     	; 0x24c6 <malloc+0x96>
    2470:	90 93 19 06 	sts	0x0619, r25
    2474:	80 93 18 06 	sts	0x0618, r24
    2478:	26 c0       	rjmp	.+76     	; 0x24c6 <malloc+0x96>
    247a:	21 15       	cp	r18, r1
    247c:	31 05       	cpc	r19, r1
    247e:	19 f0       	breq	.+6      	; 0x2486 <malloc+0x56>
    2480:	42 17       	cp	r20, r18
    2482:	53 07       	cpc	r21, r19
    2484:	18 f4       	brcc	.+6      	; 0x248c <malloc+0x5c>
    2486:	9a 01       	movw	r18, r20
    2488:	be 01       	movw	r22, r28
    248a:	df 01       	movw	r26, r30
    248c:	ef 01       	movw	r28, r30
    248e:	02 80       	ldd	r0, Z+2	; 0x02
    2490:	f3 81       	ldd	r31, Z+3	; 0x03
    2492:	e0 2d       	mov	r30, r0
    2494:	dc cf       	rjmp	.-72     	; 0x244e <malloc+0x1e>
    2496:	21 15       	cp	r18, r1
    2498:	31 05       	cpc	r19, r1
    249a:	09 f1       	breq	.+66     	; 0x24de <malloc+0xae>
    249c:	28 1b       	sub	r18, r24
    249e:	39 0b       	sbc	r19, r25
    24a0:	24 30       	cpi	r18, 0x04	; 4
    24a2:	31 05       	cpc	r19, r1
    24a4:	90 f4       	brcc	.+36     	; 0x24ca <malloc+0x9a>
    24a6:	12 96       	adiw	r26, 0x02	; 2
    24a8:	8d 91       	ld	r24, X+
    24aa:	9c 91       	ld	r25, X
    24ac:	13 97       	sbiw	r26, 0x03	; 3
    24ae:	61 15       	cp	r22, r1
    24b0:	71 05       	cpc	r23, r1
    24b2:	21 f0       	breq	.+8      	; 0x24bc <malloc+0x8c>
    24b4:	fb 01       	movw	r30, r22
    24b6:	93 83       	std	Z+3, r25	; 0x03
    24b8:	82 83       	std	Z+2, r24	; 0x02
    24ba:	04 c0       	rjmp	.+8      	; 0x24c4 <malloc+0x94>
    24bc:	90 93 19 06 	sts	0x0619, r25
    24c0:	80 93 18 06 	sts	0x0618, r24
    24c4:	fd 01       	movw	r30, r26
    24c6:	32 96       	adiw	r30, 0x02	; 2
    24c8:	44 c0       	rjmp	.+136    	; 0x2552 <malloc+0x122>
    24ca:	fd 01       	movw	r30, r26
    24cc:	e2 0f       	add	r30, r18
    24ce:	f3 1f       	adc	r31, r19
    24d0:	81 93       	st	Z+, r24
    24d2:	91 93       	st	Z+, r25
    24d4:	22 50       	subi	r18, 0x02	; 2
    24d6:	31 09       	sbc	r19, r1
    24d8:	2d 93       	st	X+, r18
    24da:	3c 93       	st	X, r19
    24dc:	3a c0       	rjmp	.+116    	; 0x2552 <malloc+0x122>
    24de:	20 91 16 06 	lds	r18, 0x0616
    24e2:	30 91 17 06 	lds	r19, 0x0617
    24e6:	23 2b       	or	r18, r19
    24e8:	41 f4       	brne	.+16     	; 0x24fa <malloc+0xca>
    24ea:	20 91 62 00 	lds	r18, 0x0062
    24ee:	30 91 63 00 	lds	r19, 0x0063
    24f2:	30 93 17 06 	sts	0x0617, r19
    24f6:	20 93 16 06 	sts	0x0616, r18
    24fa:	20 91 60 00 	lds	r18, 0x0060
    24fe:	30 91 61 00 	lds	r19, 0x0061
    2502:	21 15       	cp	r18, r1
    2504:	31 05       	cpc	r19, r1
    2506:	41 f4       	brne	.+16     	; 0x2518 <malloc+0xe8>
    2508:	2d b7       	in	r18, 0x3d	; 61
    250a:	3e b7       	in	r19, 0x3e	; 62
    250c:	40 91 64 00 	lds	r20, 0x0064
    2510:	50 91 65 00 	lds	r21, 0x0065
    2514:	24 1b       	sub	r18, r20
    2516:	35 0b       	sbc	r19, r21
    2518:	e0 91 16 06 	lds	r30, 0x0616
    251c:	f0 91 17 06 	lds	r31, 0x0617
    2520:	e2 17       	cp	r30, r18
    2522:	f3 07       	cpc	r31, r19
    2524:	a0 f4       	brcc	.+40     	; 0x254e <malloc+0x11e>
    2526:	2e 1b       	sub	r18, r30
    2528:	3f 0b       	sbc	r19, r31
    252a:	28 17       	cp	r18, r24
    252c:	39 07       	cpc	r19, r25
    252e:	78 f0       	brcs	.+30     	; 0x254e <malloc+0x11e>
    2530:	ac 01       	movw	r20, r24
    2532:	4e 5f       	subi	r20, 0xFE	; 254
    2534:	5f 4f       	sbci	r21, 0xFF	; 255
    2536:	24 17       	cp	r18, r20
    2538:	35 07       	cpc	r19, r21
    253a:	48 f0       	brcs	.+18     	; 0x254e <malloc+0x11e>
    253c:	4e 0f       	add	r20, r30
    253e:	5f 1f       	adc	r21, r31
    2540:	50 93 17 06 	sts	0x0617, r21
    2544:	40 93 16 06 	sts	0x0616, r20
    2548:	81 93       	st	Z+, r24
    254a:	91 93       	st	Z+, r25
    254c:	02 c0       	rjmp	.+4      	; 0x2552 <malloc+0x122>
    254e:	e0 e0       	ldi	r30, 0x00	; 0
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	cf 01       	movw	r24, r30
    2554:	df 91       	pop	r29
    2556:	cf 91       	pop	r28
    2558:	08 95       	ret

0000255a <free>:
    255a:	0f 93       	push	r16
    255c:	1f 93       	push	r17
    255e:	cf 93       	push	r28
    2560:	df 93       	push	r29
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	09 f4       	brne	.+2      	; 0x2568 <free+0xe>
    2566:	8c c0       	rjmp	.+280    	; 0x2680 <free+0x126>
    2568:	fc 01       	movw	r30, r24
    256a:	32 97       	sbiw	r30, 0x02	; 2
    256c:	13 82       	std	Z+3, r1	; 0x03
    256e:	12 82       	std	Z+2, r1	; 0x02
    2570:	00 91 18 06 	lds	r16, 0x0618
    2574:	10 91 19 06 	lds	r17, 0x0619
    2578:	01 15       	cp	r16, r1
    257a:	11 05       	cpc	r17, r1
    257c:	81 f4       	brne	.+32     	; 0x259e <free+0x44>
    257e:	20 81       	ld	r18, Z
    2580:	31 81       	ldd	r19, Z+1	; 0x01
    2582:	82 0f       	add	r24, r18
    2584:	93 1f       	adc	r25, r19
    2586:	20 91 16 06 	lds	r18, 0x0616
    258a:	30 91 17 06 	lds	r19, 0x0617
    258e:	28 17       	cp	r18, r24
    2590:	39 07       	cpc	r19, r25
    2592:	79 f5       	brne	.+94     	; 0x25f2 <free+0x98>
    2594:	f0 93 17 06 	sts	0x0617, r31
    2598:	e0 93 16 06 	sts	0x0616, r30
    259c:	71 c0       	rjmp	.+226    	; 0x2680 <free+0x126>
    259e:	d8 01       	movw	r26, r16
    25a0:	40 e0       	ldi	r20, 0x00	; 0
    25a2:	50 e0       	ldi	r21, 0x00	; 0
    25a4:	ae 17       	cp	r26, r30
    25a6:	bf 07       	cpc	r27, r31
    25a8:	50 f4       	brcc	.+20     	; 0x25be <free+0x64>
    25aa:	12 96       	adiw	r26, 0x02	; 2
    25ac:	2d 91       	ld	r18, X+
    25ae:	3c 91       	ld	r19, X
    25b0:	13 97       	sbiw	r26, 0x03	; 3
    25b2:	ad 01       	movw	r20, r26
    25b4:	21 15       	cp	r18, r1
    25b6:	31 05       	cpc	r19, r1
    25b8:	09 f1       	breq	.+66     	; 0x25fc <free+0xa2>
    25ba:	d9 01       	movw	r26, r18
    25bc:	f3 cf       	rjmp	.-26     	; 0x25a4 <free+0x4a>
    25be:	9d 01       	movw	r18, r26
    25c0:	da 01       	movw	r26, r20
    25c2:	33 83       	std	Z+3, r19	; 0x03
    25c4:	22 83       	std	Z+2, r18	; 0x02
    25c6:	60 81       	ld	r22, Z
    25c8:	71 81       	ldd	r23, Z+1	; 0x01
    25ca:	86 0f       	add	r24, r22
    25cc:	97 1f       	adc	r25, r23
    25ce:	82 17       	cp	r24, r18
    25d0:	93 07       	cpc	r25, r19
    25d2:	69 f4       	brne	.+26     	; 0x25ee <free+0x94>
    25d4:	ec 01       	movw	r28, r24
    25d6:	28 81       	ld	r18, Y
    25d8:	39 81       	ldd	r19, Y+1	; 0x01
    25da:	26 0f       	add	r18, r22
    25dc:	37 1f       	adc	r19, r23
    25de:	2e 5f       	subi	r18, 0xFE	; 254
    25e0:	3f 4f       	sbci	r19, 0xFF	; 255
    25e2:	31 83       	std	Z+1, r19	; 0x01
    25e4:	20 83       	st	Z, r18
    25e6:	8a 81       	ldd	r24, Y+2	; 0x02
    25e8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ea:	93 83       	std	Z+3, r25	; 0x03
    25ec:	82 83       	std	Z+2, r24	; 0x02
    25ee:	45 2b       	or	r20, r21
    25f0:	29 f4       	brne	.+10     	; 0x25fc <free+0xa2>
    25f2:	f0 93 19 06 	sts	0x0619, r31
    25f6:	e0 93 18 06 	sts	0x0618, r30
    25fa:	42 c0       	rjmp	.+132    	; 0x2680 <free+0x126>
    25fc:	13 96       	adiw	r26, 0x03	; 3
    25fe:	fc 93       	st	X, r31
    2600:	ee 93       	st	-X, r30
    2602:	12 97       	sbiw	r26, 0x02	; 2
    2604:	ed 01       	movw	r28, r26
    2606:	49 91       	ld	r20, Y+
    2608:	59 91       	ld	r21, Y+
    260a:	9e 01       	movw	r18, r28
    260c:	24 0f       	add	r18, r20
    260e:	35 1f       	adc	r19, r21
    2610:	e2 17       	cp	r30, r18
    2612:	f3 07       	cpc	r31, r19
    2614:	71 f4       	brne	.+28     	; 0x2632 <free+0xd8>
    2616:	80 81       	ld	r24, Z
    2618:	91 81       	ldd	r25, Z+1	; 0x01
    261a:	84 0f       	add	r24, r20
    261c:	95 1f       	adc	r25, r21
    261e:	02 96       	adiw	r24, 0x02	; 2
    2620:	11 96       	adiw	r26, 0x01	; 1
    2622:	9c 93       	st	X, r25
    2624:	8e 93       	st	-X, r24
    2626:	82 81       	ldd	r24, Z+2	; 0x02
    2628:	93 81       	ldd	r25, Z+3	; 0x03
    262a:	13 96       	adiw	r26, 0x03	; 3
    262c:	9c 93       	st	X, r25
    262e:	8e 93       	st	-X, r24
    2630:	12 97       	sbiw	r26, 0x02	; 2
    2632:	e0 e0       	ldi	r30, 0x00	; 0
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	d8 01       	movw	r26, r16
    2638:	12 96       	adiw	r26, 0x02	; 2
    263a:	8d 91       	ld	r24, X+
    263c:	9c 91       	ld	r25, X
    263e:	13 97       	sbiw	r26, 0x03	; 3
    2640:	00 97       	sbiw	r24, 0x00	; 0
    2642:	19 f0       	breq	.+6      	; 0x264a <free+0xf0>
    2644:	f8 01       	movw	r30, r16
    2646:	8c 01       	movw	r16, r24
    2648:	f6 cf       	rjmp	.-20     	; 0x2636 <free+0xdc>
    264a:	8d 91       	ld	r24, X+
    264c:	9c 91       	ld	r25, X
    264e:	98 01       	movw	r18, r16
    2650:	2e 5f       	subi	r18, 0xFE	; 254
    2652:	3f 4f       	sbci	r19, 0xFF	; 255
    2654:	82 0f       	add	r24, r18
    2656:	93 1f       	adc	r25, r19
    2658:	20 91 16 06 	lds	r18, 0x0616
    265c:	30 91 17 06 	lds	r19, 0x0617
    2660:	28 17       	cp	r18, r24
    2662:	39 07       	cpc	r19, r25
    2664:	69 f4       	brne	.+26     	; 0x2680 <free+0x126>
    2666:	30 97       	sbiw	r30, 0x00	; 0
    2668:	29 f4       	brne	.+10     	; 0x2674 <free+0x11a>
    266a:	10 92 19 06 	sts	0x0619, r1
    266e:	10 92 18 06 	sts	0x0618, r1
    2672:	02 c0       	rjmp	.+4      	; 0x2678 <free+0x11e>
    2674:	13 82       	std	Z+3, r1	; 0x03
    2676:	12 82       	std	Z+2, r1	; 0x02
    2678:	10 93 17 06 	sts	0x0617, r17
    267c:	00 93 16 06 	sts	0x0616, r16
    2680:	df 91       	pop	r29
    2682:	cf 91       	pop	r28
    2684:	1f 91       	pop	r17
    2686:	0f 91       	pop	r16
    2688:	08 95       	ret

0000268a <strcpy>:
    268a:	fb 01       	movw	r30, r22
    268c:	dc 01       	movw	r26, r24
    268e:	01 90       	ld	r0, Z+
    2690:	0d 92       	st	X+, r0
    2692:	00 20       	and	r0, r0
    2694:	e1 f7       	brne	.-8      	; 0x268e <strcpy+0x4>
    2696:	08 95       	ret

00002698 <__itoa_ncheck>:
    2698:	bb 27       	eor	r27, r27
    269a:	4a 30       	cpi	r20, 0x0A	; 10
    269c:	31 f4       	brne	.+12     	; 0x26aa <__itoa_ncheck+0x12>
    269e:	99 23       	and	r25, r25
    26a0:	22 f4       	brpl	.+8      	; 0x26aa <__itoa_ncheck+0x12>
    26a2:	bd e2       	ldi	r27, 0x2D	; 45
    26a4:	90 95       	com	r25
    26a6:	81 95       	neg	r24
    26a8:	9f 4f       	sbci	r25, 0xFF	; 255
    26aa:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <__utoa_common>

000026ae <__utoa_ncheck>:
    26ae:	bb 27       	eor	r27, r27

000026b0 <__utoa_common>:
    26b0:	fb 01       	movw	r30, r22
    26b2:	55 27       	eor	r21, r21
    26b4:	aa 27       	eor	r26, r26
    26b6:	88 0f       	add	r24, r24
    26b8:	99 1f       	adc	r25, r25
    26ba:	aa 1f       	adc	r26, r26
    26bc:	a4 17       	cp	r26, r20
    26be:	10 f0       	brcs	.+4      	; 0x26c4 <__utoa_common+0x14>
    26c0:	a4 1b       	sub	r26, r20
    26c2:	83 95       	inc	r24
    26c4:	50 51       	subi	r21, 0x10	; 16
    26c6:	b9 f7       	brne	.-18     	; 0x26b6 <__utoa_common+0x6>
    26c8:	a0 5d       	subi	r26, 0xD0	; 208
    26ca:	aa 33       	cpi	r26, 0x3A	; 58
    26cc:	08 f0       	brcs	.+2      	; 0x26d0 <__utoa_common+0x20>
    26ce:	a9 5d       	subi	r26, 0xD9	; 217
    26d0:	a1 93       	st	Z+, r26
    26d2:	00 97       	sbiw	r24, 0x00	; 0
    26d4:	79 f7       	brne	.-34     	; 0x26b4 <__utoa_common+0x4>
    26d6:	b1 11       	cpse	r27, r1
    26d8:	b1 93       	st	Z+, r27
    26da:	11 92       	st	Z+, r1
    26dc:	cb 01       	movw	r24, r22
    26de:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <strrev>

000026e2 <sprintf>:
    26e2:	ae e0       	ldi	r26, 0x0E	; 14
    26e4:	b0 e0       	ldi	r27, 0x00	; 0
    26e6:	e7 e7       	ldi	r30, 0x77	; 119
    26e8:	f3 e1       	ldi	r31, 0x13	; 19
    26ea:	0c 94 96 18 	jmp	0x312c	; 0x312c <__prologue_saves__+0x1c>
    26ee:	0d 89       	ldd	r16, Y+21	; 0x15
    26f0:	1e 89       	ldd	r17, Y+22	; 0x16
    26f2:	86 e0       	ldi	r24, 0x06	; 6
    26f4:	8c 83       	std	Y+4, r24	; 0x04
    26f6:	1a 83       	std	Y+2, r17	; 0x02
    26f8:	09 83       	std	Y+1, r16	; 0x01
    26fa:	8f ef       	ldi	r24, 0xFF	; 255
    26fc:	9f e7       	ldi	r25, 0x7F	; 127
    26fe:	9e 83       	std	Y+6, r25	; 0x06
    2700:	8d 83       	std	Y+5, r24	; 0x05
    2702:	ae 01       	movw	r20, r28
    2704:	47 5e       	subi	r20, 0xE7	; 231
    2706:	5f 4f       	sbci	r21, 0xFF	; 255
    2708:	6f 89       	ldd	r22, Y+23	; 0x17
    270a:	78 8d       	ldd	r23, Y+24	; 0x18
    270c:	ce 01       	movw	r24, r28
    270e:	01 96       	adiw	r24, 0x01	; 1
    2710:	0e 94 94 13 	call	0x2728	; 0x2728 <vfprintf>
    2714:	2f 81       	ldd	r18, Y+7	; 0x07
    2716:	38 85       	ldd	r19, Y+8	; 0x08
    2718:	f8 01       	movw	r30, r16
    271a:	e2 0f       	add	r30, r18
    271c:	f3 1f       	adc	r31, r19
    271e:	10 82       	st	Z, r1
    2720:	2e 96       	adiw	r28, 0x0e	; 14
    2722:	e4 e0       	ldi	r30, 0x04	; 4
    2724:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__epilogue_restores__+0x1c>

00002728 <vfprintf>:
    2728:	ac e0       	ldi	r26, 0x0C	; 12
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	ea e9       	ldi	r30, 0x9A	; 154
    272e:	f3 e1       	ldi	r31, 0x13	; 19
    2730:	0c 94 88 18 	jmp	0x3110	; 0x3110 <__prologue_saves__>
    2734:	7c 01       	movw	r14, r24
    2736:	6b 01       	movw	r12, r22
    2738:	8a 01       	movw	r16, r20
    273a:	fc 01       	movw	r30, r24
    273c:	17 82       	std	Z+7, r1	; 0x07
    273e:	16 82       	std	Z+6, r1	; 0x06
    2740:	83 81       	ldd	r24, Z+3	; 0x03
    2742:	81 ff       	sbrs	r24, 1
    2744:	bd c1       	rjmp	.+890    	; 0x2ac0 <vfprintf+0x398>
    2746:	ce 01       	movw	r24, r28
    2748:	01 96       	adiw	r24, 0x01	; 1
    274a:	4c 01       	movw	r8, r24
    274c:	f7 01       	movw	r30, r14
    274e:	93 81       	ldd	r25, Z+3	; 0x03
    2750:	f6 01       	movw	r30, r12
    2752:	93 fd       	sbrc	r25, 3
    2754:	85 91       	lpm	r24, Z+
    2756:	93 ff       	sbrs	r25, 3
    2758:	81 91       	ld	r24, Z+
    275a:	6f 01       	movw	r12, r30
    275c:	88 23       	and	r24, r24
    275e:	09 f4       	brne	.+2      	; 0x2762 <vfprintf+0x3a>
    2760:	ab c1       	rjmp	.+854    	; 0x2ab8 <vfprintf+0x390>
    2762:	85 32       	cpi	r24, 0x25	; 37
    2764:	39 f4       	brne	.+14     	; 0x2774 <vfprintf+0x4c>
    2766:	93 fd       	sbrc	r25, 3
    2768:	85 91       	lpm	r24, Z+
    276a:	93 ff       	sbrs	r25, 3
    276c:	81 91       	ld	r24, Z+
    276e:	6f 01       	movw	r12, r30
    2770:	85 32       	cpi	r24, 0x25	; 37
    2772:	29 f4       	brne	.+10     	; 0x277e <vfprintf+0x56>
    2774:	b7 01       	movw	r22, r14
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <fputc>
    277c:	e7 cf       	rjmp	.-50     	; 0x274c <vfprintf+0x24>
    277e:	51 2c       	mov	r5, r1
    2780:	31 2c       	mov	r3, r1
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	20 32       	cpi	r18, 0x20	; 32
    2786:	a0 f4       	brcc	.+40     	; 0x27b0 <vfprintf+0x88>
    2788:	8b 32       	cpi	r24, 0x2B	; 43
    278a:	69 f0       	breq	.+26     	; 0x27a6 <vfprintf+0x7e>
    278c:	30 f4       	brcc	.+12     	; 0x279a <vfprintf+0x72>
    278e:	80 32       	cpi	r24, 0x20	; 32
    2790:	59 f0       	breq	.+22     	; 0x27a8 <vfprintf+0x80>
    2792:	83 32       	cpi	r24, 0x23	; 35
    2794:	69 f4       	brne	.+26     	; 0x27b0 <vfprintf+0x88>
    2796:	20 61       	ori	r18, 0x10	; 16
    2798:	2c c0       	rjmp	.+88     	; 0x27f2 <vfprintf+0xca>
    279a:	8d 32       	cpi	r24, 0x2D	; 45
    279c:	39 f0       	breq	.+14     	; 0x27ac <vfprintf+0x84>
    279e:	80 33       	cpi	r24, 0x30	; 48
    27a0:	39 f4       	brne	.+14     	; 0x27b0 <vfprintf+0x88>
    27a2:	21 60       	ori	r18, 0x01	; 1
    27a4:	26 c0       	rjmp	.+76     	; 0x27f2 <vfprintf+0xca>
    27a6:	22 60       	ori	r18, 0x02	; 2
    27a8:	24 60       	ori	r18, 0x04	; 4
    27aa:	23 c0       	rjmp	.+70     	; 0x27f2 <vfprintf+0xca>
    27ac:	28 60       	ori	r18, 0x08	; 8
    27ae:	21 c0       	rjmp	.+66     	; 0x27f2 <vfprintf+0xca>
    27b0:	27 fd       	sbrc	r18, 7
    27b2:	27 c0       	rjmp	.+78     	; 0x2802 <vfprintf+0xda>
    27b4:	30 ed       	ldi	r19, 0xD0	; 208
    27b6:	38 0f       	add	r19, r24
    27b8:	3a 30       	cpi	r19, 0x0A	; 10
    27ba:	78 f4       	brcc	.+30     	; 0x27da <vfprintf+0xb2>
    27bc:	26 ff       	sbrs	r18, 6
    27be:	06 c0       	rjmp	.+12     	; 0x27cc <vfprintf+0xa4>
    27c0:	fa e0       	ldi	r31, 0x0A	; 10
    27c2:	5f 9e       	mul	r5, r31
    27c4:	30 0d       	add	r19, r0
    27c6:	11 24       	eor	r1, r1
    27c8:	53 2e       	mov	r5, r19
    27ca:	13 c0       	rjmp	.+38     	; 0x27f2 <vfprintf+0xca>
    27cc:	8a e0       	ldi	r24, 0x0A	; 10
    27ce:	38 9e       	mul	r3, r24
    27d0:	30 0d       	add	r19, r0
    27d2:	11 24       	eor	r1, r1
    27d4:	33 2e       	mov	r3, r19
    27d6:	20 62       	ori	r18, 0x20	; 32
    27d8:	0c c0       	rjmp	.+24     	; 0x27f2 <vfprintf+0xca>
    27da:	8e 32       	cpi	r24, 0x2E	; 46
    27dc:	21 f4       	brne	.+8      	; 0x27e6 <vfprintf+0xbe>
    27de:	26 fd       	sbrc	r18, 6
    27e0:	6b c1       	rjmp	.+726    	; 0x2ab8 <vfprintf+0x390>
    27e2:	20 64       	ori	r18, 0x40	; 64
    27e4:	06 c0       	rjmp	.+12     	; 0x27f2 <vfprintf+0xca>
    27e6:	8c 36       	cpi	r24, 0x6C	; 108
    27e8:	11 f4       	brne	.+4      	; 0x27ee <vfprintf+0xc6>
    27ea:	20 68       	ori	r18, 0x80	; 128
    27ec:	02 c0       	rjmp	.+4      	; 0x27f2 <vfprintf+0xca>
    27ee:	88 36       	cpi	r24, 0x68	; 104
    27f0:	41 f4       	brne	.+16     	; 0x2802 <vfprintf+0xda>
    27f2:	f6 01       	movw	r30, r12
    27f4:	93 fd       	sbrc	r25, 3
    27f6:	85 91       	lpm	r24, Z+
    27f8:	93 ff       	sbrs	r25, 3
    27fa:	81 91       	ld	r24, Z+
    27fc:	6f 01       	movw	r12, r30
    27fe:	81 11       	cpse	r24, r1
    2800:	c1 cf       	rjmp	.-126    	; 0x2784 <vfprintf+0x5c>
    2802:	98 2f       	mov	r25, r24
    2804:	9f 7d       	andi	r25, 0xDF	; 223
    2806:	95 54       	subi	r25, 0x45	; 69
    2808:	93 30       	cpi	r25, 0x03	; 3
    280a:	28 f4       	brcc	.+10     	; 0x2816 <vfprintf+0xee>
    280c:	0c 5f       	subi	r16, 0xFC	; 252
    280e:	1f 4f       	sbci	r17, 0xFF	; 255
    2810:	ff e3       	ldi	r31, 0x3F	; 63
    2812:	f9 83       	std	Y+1, r31	; 0x01
    2814:	0d c0       	rjmp	.+26     	; 0x2830 <vfprintf+0x108>
    2816:	83 36       	cpi	r24, 0x63	; 99
    2818:	31 f0       	breq	.+12     	; 0x2826 <vfprintf+0xfe>
    281a:	83 37       	cpi	r24, 0x73	; 115
    281c:	71 f0       	breq	.+28     	; 0x283a <vfprintf+0x112>
    281e:	83 35       	cpi	r24, 0x53	; 83
    2820:	09 f0       	breq	.+2      	; 0x2824 <vfprintf+0xfc>
    2822:	5b c0       	rjmp	.+182    	; 0x28da <vfprintf+0x1b2>
    2824:	22 c0       	rjmp	.+68     	; 0x286a <vfprintf+0x142>
    2826:	f8 01       	movw	r30, r16
    2828:	80 81       	ld	r24, Z
    282a:	89 83       	std	Y+1, r24	; 0x01
    282c:	0e 5f       	subi	r16, 0xFE	; 254
    282e:	1f 4f       	sbci	r17, 0xFF	; 255
    2830:	44 24       	eor	r4, r4
    2832:	43 94       	inc	r4
    2834:	51 2c       	mov	r5, r1
    2836:	54 01       	movw	r10, r8
    2838:	15 c0       	rjmp	.+42     	; 0x2864 <vfprintf+0x13c>
    283a:	38 01       	movw	r6, r16
    283c:	f2 e0       	ldi	r31, 0x02	; 2
    283e:	6f 0e       	add	r6, r31
    2840:	71 1c       	adc	r7, r1
    2842:	f8 01       	movw	r30, r16
    2844:	a0 80       	ld	r10, Z
    2846:	b1 80       	ldd	r11, Z+1	; 0x01
    2848:	26 ff       	sbrs	r18, 6
    284a:	03 c0       	rjmp	.+6      	; 0x2852 <vfprintf+0x12a>
    284c:	65 2d       	mov	r22, r5
    284e:	70 e0       	ldi	r23, 0x00	; 0
    2850:	02 c0       	rjmp	.+4      	; 0x2856 <vfprintf+0x12e>
    2852:	6f ef       	ldi	r22, 0xFF	; 255
    2854:	7f ef       	ldi	r23, 0xFF	; 255
    2856:	c5 01       	movw	r24, r10
    2858:	2c 87       	std	Y+12, r18	; 0x0c
    285a:	0e 94 d7 17 	call	0x2fae	; 0x2fae <strnlen>
    285e:	2c 01       	movw	r4, r24
    2860:	83 01       	movw	r16, r6
    2862:	2c 85       	ldd	r18, Y+12	; 0x0c
    2864:	2f 77       	andi	r18, 0x7F	; 127
    2866:	22 2e       	mov	r2, r18
    2868:	17 c0       	rjmp	.+46     	; 0x2898 <vfprintf+0x170>
    286a:	38 01       	movw	r6, r16
    286c:	f2 e0       	ldi	r31, 0x02	; 2
    286e:	6f 0e       	add	r6, r31
    2870:	71 1c       	adc	r7, r1
    2872:	f8 01       	movw	r30, r16
    2874:	a0 80       	ld	r10, Z
    2876:	b1 80       	ldd	r11, Z+1	; 0x01
    2878:	26 ff       	sbrs	r18, 6
    287a:	03 c0       	rjmp	.+6      	; 0x2882 <vfprintf+0x15a>
    287c:	65 2d       	mov	r22, r5
    287e:	70 e0       	ldi	r23, 0x00	; 0
    2880:	02 c0       	rjmp	.+4      	; 0x2886 <vfprintf+0x15e>
    2882:	6f ef       	ldi	r22, 0xFF	; 255
    2884:	7f ef       	ldi	r23, 0xFF	; 255
    2886:	c5 01       	movw	r24, r10
    2888:	2c 87       	std	Y+12, r18	; 0x0c
    288a:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <strnlen_P>
    288e:	2c 01       	movw	r4, r24
    2890:	2c 85       	ldd	r18, Y+12	; 0x0c
    2892:	20 68       	ori	r18, 0x80	; 128
    2894:	22 2e       	mov	r2, r18
    2896:	83 01       	movw	r16, r6
    2898:	23 fc       	sbrc	r2, 3
    289a:	1b c0       	rjmp	.+54     	; 0x28d2 <vfprintf+0x1aa>
    289c:	83 2d       	mov	r24, r3
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	48 16       	cp	r4, r24
    28a2:	59 06       	cpc	r5, r25
    28a4:	b0 f4       	brcc	.+44     	; 0x28d2 <vfprintf+0x1aa>
    28a6:	b7 01       	movw	r22, r14
    28a8:	80 e2       	ldi	r24, 0x20	; 32
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <fputc>
    28b0:	3a 94       	dec	r3
    28b2:	f4 cf       	rjmp	.-24     	; 0x289c <vfprintf+0x174>
    28b4:	f5 01       	movw	r30, r10
    28b6:	27 fc       	sbrc	r2, 7
    28b8:	85 91       	lpm	r24, Z+
    28ba:	27 fe       	sbrs	r2, 7
    28bc:	81 91       	ld	r24, Z+
    28be:	5f 01       	movw	r10, r30
    28c0:	b7 01       	movw	r22, r14
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <fputc>
    28c8:	31 10       	cpse	r3, r1
    28ca:	3a 94       	dec	r3
    28cc:	f1 e0       	ldi	r31, 0x01	; 1
    28ce:	4f 1a       	sub	r4, r31
    28d0:	51 08       	sbc	r5, r1
    28d2:	41 14       	cp	r4, r1
    28d4:	51 04       	cpc	r5, r1
    28d6:	71 f7       	brne	.-36     	; 0x28b4 <vfprintf+0x18c>
    28d8:	e5 c0       	rjmp	.+458    	; 0x2aa4 <vfprintf+0x37c>
    28da:	84 36       	cpi	r24, 0x64	; 100
    28dc:	11 f0       	breq	.+4      	; 0x28e2 <vfprintf+0x1ba>
    28de:	89 36       	cpi	r24, 0x69	; 105
    28e0:	39 f5       	brne	.+78     	; 0x2930 <vfprintf+0x208>
    28e2:	f8 01       	movw	r30, r16
    28e4:	27 ff       	sbrs	r18, 7
    28e6:	07 c0       	rjmp	.+14     	; 0x28f6 <vfprintf+0x1ce>
    28e8:	60 81       	ld	r22, Z
    28ea:	71 81       	ldd	r23, Z+1	; 0x01
    28ec:	82 81       	ldd	r24, Z+2	; 0x02
    28ee:	93 81       	ldd	r25, Z+3	; 0x03
    28f0:	0c 5f       	subi	r16, 0xFC	; 252
    28f2:	1f 4f       	sbci	r17, 0xFF	; 255
    28f4:	08 c0       	rjmp	.+16     	; 0x2906 <vfprintf+0x1de>
    28f6:	60 81       	ld	r22, Z
    28f8:	71 81       	ldd	r23, Z+1	; 0x01
    28fa:	07 2e       	mov	r0, r23
    28fc:	00 0c       	add	r0, r0
    28fe:	88 0b       	sbc	r24, r24
    2900:	99 0b       	sbc	r25, r25
    2902:	0e 5f       	subi	r16, 0xFE	; 254
    2904:	1f 4f       	sbci	r17, 0xFF	; 255
    2906:	2f 76       	andi	r18, 0x6F	; 111
    2908:	72 2e       	mov	r7, r18
    290a:	97 ff       	sbrs	r25, 7
    290c:	09 c0       	rjmp	.+18     	; 0x2920 <vfprintf+0x1f8>
    290e:	90 95       	com	r25
    2910:	80 95       	com	r24
    2912:	70 95       	com	r23
    2914:	61 95       	neg	r22
    2916:	7f 4f       	sbci	r23, 0xFF	; 255
    2918:	8f 4f       	sbci	r24, 0xFF	; 255
    291a:	9f 4f       	sbci	r25, 0xFF	; 255
    291c:	20 68       	ori	r18, 0x80	; 128
    291e:	72 2e       	mov	r7, r18
    2920:	2a e0       	ldi	r18, 0x0A	; 10
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	a4 01       	movw	r20, r8
    2926:	0e 94 2a 18 	call	0x3054	; 0x3054 <__ultoa_invert>
    292a:	a8 2e       	mov	r10, r24
    292c:	a8 18       	sub	r10, r8
    292e:	44 c0       	rjmp	.+136    	; 0x29b8 <vfprintf+0x290>
    2930:	85 37       	cpi	r24, 0x75	; 117
    2932:	29 f4       	brne	.+10     	; 0x293e <vfprintf+0x216>
    2934:	2f 7e       	andi	r18, 0xEF	; 239
    2936:	b2 2e       	mov	r11, r18
    2938:	2a e0       	ldi	r18, 0x0A	; 10
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	25 c0       	rjmp	.+74     	; 0x2988 <vfprintf+0x260>
    293e:	f2 2f       	mov	r31, r18
    2940:	f9 7f       	andi	r31, 0xF9	; 249
    2942:	bf 2e       	mov	r11, r31
    2944:	8f 36       	cpi	r24, 0x6F	; 111
    2946:	c1 f0       	breq	.+48     	; 0x2978 <vfprintf+0x250>
    2948:	18 f4       	brcc	.+6      	; 0x2950 <vfprintf+0x228>
    294a:	88 35       	cpi	r24, 0x58	; 88
    294c:	79 f0       	breq	.+30     	; 0x296c <vfprintf+0x244>
    294e:	b4 c0       	rjmp	.+360    	; 0x2ab8 <vfprintf+0x390>
    2950:	80 37       	cpi	r24, 0x70	; 112
    2952:	19 f0       	breq	.+6      	; 0x295a <vfprintf+0x232>
    2954:	88 37       	cpi	r24, 0x78	; 120
    2956:	21 f0       	breq	.+8      	; 0x2960 <vfprintf+0x238>
    2958:	af c0       	rjmp	.+350    	; 0x2ab8 <vfprintf+0x390>
    295a:	2f 2f       	mov	r18, r31
    295c:	20 61       	ori	r18, 0x10	; 16
    295e:	b2 2e       	mov	r11, r18
    2960:	b4 fe       	sbrs	r11, 4
    2962:	0d c0       	rjmp	.+26     	; 0x297e <vfprintf+0x256>
    2964:	8b 2d       	mov	r24, r11
    2966:	84 60       	ori	r24, 0x04	; 4
    2968:	b8 2e       	mov	r11, r24
    296a:	09 c0       	rjmp	.+18     	; 0x297e <vfprintf+0x256>
    296c:	24 ff       	sbrs	r18, 4
    296e:	0a c0       	rjmp	.+20     	; 0x2984 <vfprintf+0x25c>
    2970:	9f 2f       	mov	r25, r31
    2972:	96 60       	ori	r25, 0x06	; 6
    2974:	b9 2e       	mov	r11, r25
    2976:	06 c0       	rjmp	.+12     	; 0x2984 <vfprintf+0x25c>
    2978:	28 e0       	ldi	r18, 0x08	; 8
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	05 c0       	rjmp	.+10     	; 0x2988 <vfprintf+0x260>
    297e:	20 e1       	ldi	r18, 0x10	; 16
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	02 c0       	rjmp	.+4      	; 0x2988 <vfprintf+0x260>
    2984:	20 e1       	ldi	r18, 0x10	; 16
    2986:	32 e0       	ldi	r19, 0x02	; 2
    2988:	f8 01       	movw	r30, r16
    298a:	b7 fe       	sbrs	r11, 7
    298c:	07 c0       	rjmp	.+14     	; 0x299c <vfprintf+0x274>
    298e:	60 81       	ld	r22, Z
    2990:	71 81       	ldd	r23, Z+1	; 0x01
    2992:	82 81       	ldd	r24, Z+2	; 0x02
    2994:	93 81       	ldd	r25, Z+3	; 0x03
    2996:	0c 5f       	subi	r16, 0xFC	; 252
    2998:	1f 4f       	sbci	r17, 0xFF	; 255
    299a:	06 c0       	rjmp	.+12     	; 0x29a8 <vfprintf+0x280>
    299c:	60 81       	ld	r22, Z
    299e:	71 81       	ldd	r23, Z+1	; 0x01
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	0e 5f       	subi	r16, 0xFE	; 254
    29a6:	1f 4f       	sbci	r17, 0xFF	; 255
    29a8:	a4 01       	movw	r20, r8
    29aa:	0e 94 2a 18 	call	0x3054	; 0x3054 <__ultoa_invert>
    29ae:	a8 2e       	mov	r10, r24
    29b0:	a8 18       	sub	r10, r8
    29b2:	fb 2d       	mov	r31, r11
    29b4:	ff 77       	andi	r31, 0x7F	; 127
    29b6:	7f 2e       	mov	r7, r31
    29b8:	76 fe       	sbrs	r7, 6
    29ba:	0b c0       	rjmp	.+22     	; 0x29d2 <vfprintf+0x2aa>
    29bc:	37 2d       	mov	r19, r7
    29be:	3e 7f       	andi	r19, 0xFE	; 254
    29c0:	a5 14       	cp	r10, r5
    29c2:	50 f4       	brcc	.+20     	; 0x29d8 <vfprintf+0x2b0>
    29c4:	74 fe       	sbrs	r7, 4
    29c6:	0a c0       	rjmp	.+20     	; 0x29dc <vfprintf+0x2b4>
    29c8:	72 fc       	sbrc	r7, 2
    29ca:	08 c0       	rjmp	.+16     	; 0x29dc <vfprintf+0x2b4>
    29cc:	37 2d       	mov	r19, r7
    29ce:	3e 7e       	andi	r19, 0xEE	; 238
    29d0:	05 c0       	rjmp	.+10     	; 0x29dc <vfprintf+0x2b4>
    29d2:	ba 2c       	mov	r11, r10
    29d4:	37 2d       	mov	r19, r7
    29d6:	03 c0       	rjmp	.+6      	; 0x29de <vfprintf+0x2b6>
    29d8:	ba 2c       	mov	r11, r10
    29da:	01 c0       	rjmp	.+2      	; 0x29de <vfprintf+0x2b6>
    29dc:	b5 2c       	mov	r11, r5
    29de:	34 ff       	sbrs	r19, 4
    29e0:	0d c0       	rjmp	.+26     	; 0x29fc <vfprintf+0x2d4>
    29e2:	fe 01       	movw	r30, r28
    29e4:	ea 0d       	add	r30, r10
    29e6:	f1 1d       	adc	r31, r1
    29e8:	80 81       	ld	r24, Z
    29ea:	80 33       	cpi	r24, 0x30	; 48
    29ec:	11 f4       	brne	.+4      	; 0x29f2 <vfprintf+0x2ca>
    29ee:	39 7e       	andi	r19, 0xE9	; 233
    29f0:	09 c0       	rjmp	.+18     	; 0x2a04 <vfprintf+0x2dc>
    29f2:	32 ff       	sbrs	r19, 2
    29f4:	06 c0       	rjmp	.+12     	; 0x2a02 <vfprintf+0x2da>
    29f6:	b3 94       	inc	r11
    29f8:	b3 94       	inc	r11
    29fa:	04 c0       	rjmp	.+8      	; 0x2a04 <vfprintf+0x2dc>
    29fc:	83 2f       	mov	r24, r19
    29fe:	86 78       	andi	r24, 0x86	; 134
    2a00:	09 f0       	breq	.+2      	; 0x2a04 <vfprintf+0x2dc>
    2a02:	b3 94       	inc	r11
    2a04:	33 fd       	sbrc	r19, 3
    2a06:	13 c0       	rjmp	.+38     	; 0x2a2e <vfprintf+0x306>
    2a08:	30 ff       	sbrs	r19, 0
    2a0a:	06 c0       	rjmp	.+12     	; 0x2a18 <vfprintf+0x2f0>
    2a0c:	5a 2c       	mov	r5, r10
    2a0e:	b3 14       	cp	r11, r3
    2a10:	18 f4       	brcc	.+6      	; 0x2a18 <vfprintf+0x2f0>
    2a12:	53 0c       	add	r5, r3
    2a14:	5b 18       	sub	r5, r11
    2a16:	b3 2c       	mov	r11, r3
    2a18:	b3 14       	cp	r11, r3
    2a1a:	68 f4       	brcc	.+26     	; 0x2a36 <vfprintf+0x30e>
    2a1c:	b7 01       	movw	r22, r14
    2a1e:	80 e2       	ldi	r24, 0x20	; 32
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	3c 87       	std	Y+12, r19	; 0x0c
    2a24:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <fputc>
    2a28:	b3 94       	inc	r11
    2a2a:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a2c:	f5 cf       	rjmp	.-22     	; 0x2a18 <vfprintf+0x2f0>
    2a2e:	b3 14       	cp	r11, r3
    2a30:	10 f4       	brcc	.+4      	; 0x2a36 <vfprintf+0x30e>
    2a32:	3b 18       	sub	r3, r11
    2a34:	01 c0       	rjmp	.+2      	; 0x2a38 <vfprintf+0x310>
    2a36:	31 2c       	mov	r3, r1
    2a38:	34 ff       	sbrs	r19, 4
    2a3a:	12 c0       	rjmp	.+36     	; 0x2a60 <vfprintf+0x338>
    2a3c:	b7 01       	movw	r22, r14
    2a3e:	80 e3       	ldi	r24, 0x30	; 48
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	3c 87       	std	Y+12, r19	; 0x0c
    2a44:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <fputc>
    2a48:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a4a:	32 ff       	sbrs	r19, 2
    2a4c:	17 c0       	rjmp	.+46     	; 0x2a7c <vfprintf+0x354>
    2a4e:	31 fd       	sbrc	r19, 1
    2a50:	03 c0       	rjmp	.+6      	; 0x2a58 <vfprintf+0x330>
    2a52:	88 e7       	ldi	r24, 0x78	; 120
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	02 c0       	rjmp	.+4      	; 0x2a5c <vfprintf+0x334>
    2a58:	88 e5       	ldi	r24, 0x58	; 88
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	b7 01       	movw	r22, r14
    2a5e:	0c c0       	rjmp	.+24     	; 0x2a78 <vfprintf+0x350>
    2a60:	83 2f       	mov	r24, r19
    2a62:	86 78       	andi	r24, 0x86	; 134
    2a64:	59 f0       	breq	.+22     	; 0x2a7c <vfprintf+0x354>
    2a66:	31 ff       	sbrs	r19, 1
    2a68:	02 c0       	rjmp	.+4      	; 0x2a6e <vfprintf+0x346>
    2a6a:	8b e2       	ldi	r24, 0x2B	; 43
    2a6c:	01 c0       	rjmp	.+2      	; 0x2a70 <vfprintf+0x348>
    2a6e:	80 e2       	ldi	r24, 0x20	; 32
    2a70:	37 fd       	sbrc	r19, 7
    2a72:	8d e2       	ldi	r24, 0x2D	; 45
    2a74:	b7 01       	movw	r22, r14
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <fputc>
    2a7c:	a5 14       	cp	r10, r5
    2a7e:	38 f4       	brcc	.+14     	; 0x2a8e <vfprintf+0x366>
    2a80:	b7 01       	movw	r22, r14
    2a82:	80 e3       	ldi	r24, 0x30	; 48
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <fputc>
    2a8a:	5a 94       	dec	r5
    2a8c:	f7 cf       	rjmp	.-18     	; 0x2a7c <vfprintf+0x354>
    2a8e:	aa 94       	dec	r10
    2a90:	f4 01       	movw	r30, r8
    2a92:	ea 0d       	add	r30, r10
    2a94:	f1 1d       	adc	r31, r1
    2a96:	80 81       	ld	r24, Z
    2a98:	b7 01       	movw	r22, r14
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <fputc>
    2aa0:	a1 10       	cpse	r10, r1
    2aa2:	f5 cf       	rjmp	.-22     	; 0x2a8e <vfprintf+0x366>
    2aa4:	33 20       	and	r3, r3
    2aa6:	09 f4       	brne	.+2      	; 0x2aaa <vfprintf+0x382>
    2aa8:	51 ce       	rjmp	.-862    	; 0x274c <vfprintf+0x24>
    2aaa:	b7 01       	movw	r22, r14
    2aac:	80 e2       	ldi	r24, 0x20	; 32
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <fputc>
    2ab4:	3a 94       	dec	r3
    2ab6:	f6 cf       	rjmp	.-20     	; 0x2aa4 <vfprintf+0x37c>
    2ab8:	f7 01       	movw	r30, r14
    2aba:	86 81       	ldd	r24, Z+6	; 0x06
    2abc:	97 81       	ldd	r25, Z+7	; 0x07
    2abe:	02 c0       	rjmp	.+4      	; 0x2ac4 <vfprintf+0x39c>
    2ac0:	8f ef       	ldi	r24, 0xFF	; 255
    2ac2:	9f ef       	ldi	r25, 0xFF	; 255
    2ac4:	2c 96       	adiw	r28, 0x0c	; 12
    2ac6:	e2 e1       	ldi	r30, 0x12	; 18
    2ac8:	0c 94 a4 18 	jmp	0x3148	; 0x3148 <__epilogue_restores__>

00002acc <dtoa_prf>:
    2acc:	4f 92       	push	r4
    2ace:	5f 92       	push	r5
    2ad0:	6f 92       	push	r6
    2ad2:	7f 92       	push	r7
    2ad4:	9f 92       	push	r9
    2ad6:	af 92       	push	r10
    2ad8:	bf 92       	push	r11
    2ada:	cf 92       	push	r12
    2adc:	df 92       	push	r13
    2ade:	ef 92       	push	r14
    2ae0:	ff 92       	push	r15
    2ae2:	0f 93       	push	r16
    2ae4:	1f 93       	push	r17
    2ae6:	cf 93       	push	r28
    2ae8:	df 93       	push	r29
    2aea:	cd b7       	in	r28, 0x3d	; 61
    2aec:	de b7       	in	r29, 0x3e	; 62
    2aee:	29 97       	sbiw	r28, 0x09	; 9
    2af0:	0f b6       	in	r0, 0x3f	; 63
    2af2:	f8 94       	cli
    2af4:	de bf       	out	0x3e, r29	; 62
    2af6:	0f be       	out	0x3f, r0	; 63
    2af8:	cd bf       	out	0x3d, r28	; 61
    2afa:	6a 01       	movw	r12, r20
    2afc:	12 2f       	mov	r17, r18
    2afe:	b0 2e       	mov	r11, r16
    2b00:	2b e3       	ldi	r18, 0x3B	; 59
    2b02:	20 17       	cp	r18, r16
    2b04:	20 f0       	brcs	.+8      	; 0x2b0e <dtoa_prf+0x42>
    2b06:	ff 24       	eor	r15, r15
    2b08:	f3 94       	inc	r15
    2b0a:	f0 0e       	add	r15, r16
    2b0c:	02 c0       	rjmp	.+4      	; 0x2b12 <dtoa_prf+0x46>
    2b0e:	bc e3       	ldi	r27, 0x3C	; 60
    2b10:	fb 2e       	mov	r15, r27
    2b12:	0f 2d       	mov	r16, r15
    2b14:	27 e0       	ldi	r18, 0x07	; 7
    2b16:	ae 01       	movw	r20, r28
    2b18:	4f 5f       	subi	r20, 0xFF	; 255
    2b1a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b1c:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <__ftoa_engine>
    2b20:	ac 01       	movw	r20, r24
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	98 2f       	mov	r25, r24
    2b26:	99 70       	andi	r25, 0x09	; 9
    2b28:	91 30       	cpi	r25, 0x01	; 1
    2b2a:	31 f0       	breq	.+12     	; 0x2b38 <dtoa_prf+0x6c>
    2b2c:	e1 fc       	sbrc	r14, 1
    2b2e:	06 c0       	rjmp	.+12     	; 0x2b3c <dtoa_prf+0x70>
    2b30:	e0 fe       	sbrs	r14, 0
    2b32:	06 c0       	rjmp	.+12     	; 0x2b40 <dtoa_prf+0x74>
    2b34:	90 e2       	ldi	r25, 0x20	; 32
    2b36:	05 c0       	rjmp	.+10     	; 0x2b42 <dtoa_prf+0x76>
    2b38:	9d e2       	ldi	r25, 0x2D	; 45
    2b3a:	03 c0       	rjmp	.+6      	; 0x2b42 <dtoa_prf+0x76>
    2b3c:	9b e2       	ldi	r25, 0x2B	; 43
    2b3e:	01 c0       	rjmp	.+2      	; 0x2b42 <dtoa_prf+0x76>
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	ee 2d       	mov	r30, r14
    2b44:	e0 71       	andi	r30, 0x10	; 16
    2b46:	83 ff       	sbrs	r24, 3
    2b48:	3c c0       	rjmp	.+120    	; 0x2bc2 <dtoa_prf+0xf6>
    2b4a:	91 11       	cpse	r25, r1
    2b4c:	02 c0       	rjmp	.+4      	; 0x2b52 <dtoa_prf+0x86>
    2b4e:	83 e0       	ldi	r24, 0x03	; 3
    2b50:	01 c0       	rjmp	.+2      	; 0x2b54 <dtoa_prf+0x88>
    2b52:	84 e0       	ldi	r24, 0x04	; 4
    2b54:	81 17       	cp	r24, r17
    2b56:	18 f4       	brcc	.+6      	; 0x2b5e <dtoa_prf+0x92>
    2b58:	21 2f       	mov	r18, r17
    2b5a:	28 1b       	sub	r18, r24
    2b5c:	01 c0       	rjmp	.+2      	; 0x2b60 <dtoa_prf+0x94>
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	e1 11       	cpse	r30, r1
    2b62:	0b c0       	rjmp	.+22     	; 0x2b7a <dtoa_prf+0xae>
    2b64:	f6 01       	movw	r30, r12
    2b66:	82 2f       	mov	r24, r18
    2b68:	30 e2       	ldi	r19, 0x20	; 32
    2b6a:	88 23       	and	r24, r24
    2b6c:	19 f0       	breq	.+6      	; 0x2b74 <dtoa_prf+0xa8>
    2b6e:	31 93       	st	Z+, r19
    2b70:	81 50       	subi	r24, 0x01	; 1
    2b72:	fb cf       	rjmp	.-10     	; 0x2b6a <dtoa_prf+0x9e>
    2b74:	c2 0e       	add	r12, r18
    2b76:	d1 1c       	adc	r13, r1
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	99 23       	and	r25, r25
    2b7c:	29 f0       	breq	.+10     	; 0x2b88 <dtoa_prf+0xbc>
    2b7e:	d6 01       	movw	r26, r12
    2b80:	9c 93       	st	X, r25
    2b82:	f6 01       	movw	r30, r12
    2b84:	31 96       	adiw	r30, 0x01	; 1
    2b86:	6f 01       	movw	r12, r30
    2b88:	c6 01       	movw	r24, r12
    2b8a:	03 96       	adiw	r24, 0x03	; 3
    2b8c:	e2 fe       	sbrs	r14, 2
    2b8e:	0a c0       	rjmp	.+20     	; 0x2ba4 <dtoa_prf+0xd8>
    2b90:	3e e4       	ldi	r19, 0x4E	; 78
    2b92:	d6 01       	movw	r26, r12
    2b94:	3c 93       	st	X, r19
    2b96:	41 e4       	ldi	r20, 0x41	; 65
    2b98:	11 96       	adiw	r26, 0x01	; 1
    2b9a:	4c 93       	st	X, r20
    2b9c:	11 97       	sbiw	r26, 0x01	; 1
    2b9e:	12 96       	adiw	r26, 0x02	; 2
    2ba0:	3c 93       	st	X, r19
    2ba2:	06 c0       	rjmp	.+12     	; 0x2bb0 <dtoa_prf+0xe4>
    2ba4:	3e e6       	ldi	r19, 0x6E	; 110
    2ba6:	f6 01       	movw	r30, r12
    2ba8:	30 83       	st	Z, r19
    2baa:	41 e6       	ldi	r20, 0x61	; 97
    2bac:	41 83       	std	Z+1, r20	; 0x01
    2bae:	32 83       	std	Z+2, r19	; 0x02
    2bb0:	fc 01       	movw	r30, r24
    2bb2:	32 2f       	mov	r19, r18
    2bb4:	40 e2       	ldi	r20, 0x20	; 32
    2bb6:	33 23       	and	r19, r19
    2bb8:	09 f4       	brne	.+2      	; 0x2bbc <dtoa_prf+0xf0>
    2bba:	42 c0       	rjmp	.+132    	; 0x2c40 <dtoa_prf+0x174>
    2bbc:	41 93       	st	Z+, r20
    2bbe:	31 50       	subi	r19, 0x01	; 1
    2bc0:	fa cf       	rjmp	.-12     	; 0x2bb6 <dtoa_prf+0xea>
    2bc2:	82 ff       	sbrs	r24, 2
    2bc4:	44 c0       	rjmp	.+136    	; 0x2c4e <dtoa_prf+0x182>
    2bc6:	91 11       	cpse	r25, r1
    2bc8:	02 c0       	rjmp	.+4      	; 0x2bce <dtoa_prf+0x102>
    2bca:	83 e0       	ldi	r24, 0x03	; 3
    2bcc:	01 c0       	rjmp	.+2      	; 0x2bd0 <dtoa_prf+0x104>
    2bce:	84 e0       	ldi	r24, 0x04	; 4
    2bd0:	81 17       	cp	r24, r17
    2bd2:	18 f4       	brcc	.+6      	; 0x2bda <dtoa_prf+0x10e>
    2bd4:	21 2f       	mov	r18, r17
    2bd6:	28 1b       	sub	r18, r24
    2bd8:	01 c0       	rjmp	.+2      	; 0x2bdc <dtoa_prf+0x110>
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	e1 11       	cpse	r30, r1
    2bde:	0b c0       	rjmp	.+22     	; 0x2bf6 <dtoa_prf+0x12a>
    2be0:	f6 01       	movw	r30, r12
    2be2:	82 2f       	mov	r24, r18
    2be4:	30 e2       	ldi	r19, 0x20	; 32
    2be6:	88 23       	and	r24, r24
    2be8:	19 f0       	breq	.+6      	; 0x2bf0 <dtoa_prf+0x124>
    2bea:	31 93       	st	Z+, r19
    2bec:	81 50       	subi	r24, 0x01	; 1
    2bee:	fb cf       	rjmp	.-10     	; 0x2be6 <dtoa_prf+0x11a>
    2bf0:	c2 0e       	add	r12, r18
    2bf2:	d1 1c       	adc	r13, r1
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	99 23       	and	r25, r25
    2bf8:	29 f0       	breq	.+10     	; 0x2c04 <dtoa_prf+0x138>
    2bfa:	d6 01       	movw	r26, r12
    2bfc:	9c 93       	st	X, r25
    2bfe:	f6 01       	movw	r30, r12
    2c00:	31 96       	adiw	r30, 0x01	; 1
    2c02:	6f 01       	movw	r12, r30
    2c04:	c6 01       	movw	r24, r12
    2c06:	03 96       	adiw	r24, 0x03	; 3
    2c08:	e2 fe       	sbrs	r14, 2
    2c0a:	0b c0       	rjmp	.+22     	; 0x2c22 <dtoa_prf+0x156>
    2c0c:	39 e4       	ldi	r19, 0x49	; 73
    2c0e:	d6 01       	movw	r26, r12
    2c10:	3c 93       	st	X, r19
    2c12:	3e e4       	ldi	r19, 0x4E	; 78
    2c14:	11 96       	adiw	r26, 0x01	; 1
    2c16:	3c 93       	st	X, r19
    2c18:	11 97       	sbiw	r26, 0x01	; 1
    2c1a:	36 e4       	ldi	r19, 0x46	; 70
    2c1c:	12 96       	adiw	r26, 0x02	; 2
    2c1e:	3c 93       	st	X, r19
    2c20:	07 c0       	rjmp	.+14     	; 0x2c30 <dtoa_prf+0x164>
    2c22:	39 e6       	ldi	r19, 0x69	; 105
    2c24:	f6 01       	movw	r30, r12
    2c26:	30 83       	st	Z, r19
    2c28:	3e e6       	ldi	r19, 0x6E	; 110
    2c2a:	31 83       	std	Z+1, r19	; 0x01
    2c2c:	36 e6       	ldi	r19, 0x66	; 102
    2c2e:	32 83       	std	Z+2, r19	; 0x02
    2c30:	fc 01       	movw	r30, r24
    2c32:	32 2f       	mov	r19, r18
    2c34:	40 e2       	ldi	r20, 0x20	; 32
    2c36:	33 23       	and	r19, r19
    2c38:	19 f0       	breq	.+6      	; 0x2c40 <dtoa_prf+0x174>
    2c3a:	41 93       	st	Z+, r20
    2c3c:	31 50       	subi	r19, 0x01	; 1
    2c3e:	fb cf       	rjmp	.-10     	; 0x2c36 <dtoa_prf+0x16a>
    2c40:	fc 01       	movw	r30, r24
    2c42:	e2 0f       	add	r30, r18
    2c44:	f1 1d       	adc	r31, r1
    2c46:	10 82       	st	Z, r1
    2c48:	8e ef       	ldi	r24, 0xFE	; 254
    2c4a:	9f ef       	ldi	r25, 0xFF	; 255
    2c4c:	b7 c0       	rjmp	.+366    	; 0x2dbc <dtoa_prf+0x2f0>
    2c4e:	f1 e0       	ldi	r31, 0x01	; 1
    2c50:	91 11       	cpse	r25, r1
    2c52:	01 c0       	rjmp	.+2      	; 0x2c56 <dtoa_prf+0x18a>
    2c54:	f0 e0       	ldi	r31, 0x00	; 0
    2c56:	6f 2f       	mov	r22, r31
    2c58:	70 e0       	ldi	r23, 0x00	; 0
    2c5a:	14 16       	cp	r1, r20
    2c5c:	15 06       	cpc	r1, r21
    2c5e:	24 f4       	brge	.+8      	; 0x2c68 <dtoa_prf+0x19c>
    2c60:	9a 01       	movw	r18, r20
    2c62:	2f 5f       	subi	r18, 0xFF	; 255
    2c64:	3f 4f       	sbci	r19, 0xFF	; 255
    2c66:	02 c0       	rjmp	.+4      	; 0x2c6c <dtoa_prf+0x1a0>
    2c68:	21 e0       	ldi	r18, 0x01	; 1
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	26 0f       	add	r18, r22
    2c6e:	37 1f       	adc	r19, r23
    2c70:	bb 20       	and	r11, r11
    2c72:	29 f0       	breq	.+10     	; 0x2c7e <dtoa_prf+0x1b2>
    2c74:	6b 2d       	mov	r22, r11
    2c76:	70 e0       	ldi	r23, 0x00	; 0
    2c78:	6f 5f       	subi	r22, 0xFF	; 255
    2c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c7c:	02 c0       	rjmp	.+4      	; 0x2c82 <dtoa_prf+0x1b6>
    2c7e:	60 e0       	ldi	r22, 0x00	; 0
    2c80:	70 e0       	ldi	r23, 0x00	; 0
    2c82:	26 0f       	add	r18, r22
    2c84:	37 1f       	adc	r19, r23
    2c86:	61 2f       	mov	r22, r17
    2c88:	70 e0       	ldi	r23, 0x00	; 0
    2c8a:	26 17       	cp	r18, r22
    2c8c:	37 07       	cpc	r19, r23
    2c8e:	1c f4       	brge	.+6      	; 0x2c96 <dtoa_prf+0x1ca>
    2c90:	12 1b       	sub	r17, r18
    2c92:	21 2f       	mov	r18, r17
    2c94:	01 c0       	rjmp	.+2      	; 0x2c98 <dtoa_prf+0x1cc>
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	3e 2d       	mov	r19, r14
    2c9a:	38 71       	andi	r19, 0x18	; 24
    2c9c:	59 f4       	brne	.+22     	; 0x2cb4 <dtoa_prf+0x1e8>
    2c9e:	d6 01       	movw	r26, r12
    2ca0:	32 2f       	mov	r19, r18
    2ca2:	60 e2       	ldi	r22, 0x20	; 32
    2ca4:	33 23       	and	r19, r19
    2ca6:	19 f0       	breq	.+6      	; 0x2cae <dtoa_prf+0x1e2>
    2ca8:	6d 93       	st	X+, r22
    2caa:	31 50       	subi	r19, 0x01	; 1
    2cac:	fb cf       	rjmp	.-10     	; 0x2ca4 <dtoa_prf+0x1d8>
    2cae:	c2 0e       	add	r12, r18
    2cb0:	d1 1c       	adc	r13, r1
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	ff 23       	and	r31, r31
    2cb6:	31 f0       	breq	.+12     	; 0x2cc4 <dtoa_prf+0x1f8>
    2cb8:	d6 01       	movw	r26, r12
    2cba:	9c 93       	st	X, r25
    2cbc:	b6 01       	movw	r22, r12
    2cbe:	6f 5f       	subi	r22, 0xFF	; 255
    2cc0:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc2:	6b 01       	movw	r12, r22
    2cc4:	e1 11       	cpse	r30, r1
    2cc6:	0b c0       	rjmp	.+22     	; 0x2cde <dtoa_prf+0x212>
    2cc8:	f6 01       	movw	r30, r12
    2cca:	92 2f       	mov	r25, r18
    2ccc:	30 e3       	ldi	r19, 0x30	; 48
    2cce:	99 23       	and	r25, r25
    2cd0:	19 f0       	breq	.+6      	; 0x2cd8 <dtoa_prf+0x20c>
    2cd2:	31 93       	st	Z+, r19
    2cd4:	91 50       	subi	r25, 0x01	; 1
    2cd6:	fb cf       	rjmp	.-10     	; 0x2cce <dtoa_prf+0x202>
    2cd8:	c2 0e       	add	r12, r18
    2cda:	d1 1c       	adc	r13, r1
    2cdc:	20 e0       	ldi	r18, 0x00	; 0
    2cde:	9f 2d       	mov	r25, r15
    2ce0:	94 0f       	add	r25, r20
    2ce2:	3a 81       	ldd	r19, Y+2	; 0x02
    2ce4:	78 2f       	mov	r23, r24
    2ce6:	70 71       	andi	r23, 0x10	; 16
    2ce8:	a7 2e       	mov	r10, r23
    2cea:	84 ff       	sbrs	r24, 4
    2cec:	03 c0       	rjmp	.+6      	; 0x2cf4 <dtoa_prf+0x228>
    2cee:	31 33       	cpi	r19, 0x31	; 49
    2cf0:	09 f4       	brne	.+2      	; 0x2cf4 <dtoa_prf+0x228>
    2cf2:	91 50       	subi	r25, 0x01	; 1
    2cf4:	19 16       	cp	r1, r25
    2cf6:	24 f4       	brge	.+8      	; 0x2d00 <dtoa_prf+0x234>
    2cf8:	99 30       	cpi	r25, 0x09	; 9
    2cfa:	18 f0       	brcs	.+6      	; 0x2d02 <dtoa_prf+0x236>
    2cfc:	98 e0       	ldi	r25, 0x08	; 8
    2cfe:	01 c0       	rjmp	.+2      	; 0x2d02 <dtoa_prf+0x236>
    2d00:	91 e0       	ldi	r25, 0x01	; 1
    2d02:	e4 2f       	mov	r30, r20
    2d04:	85 2f       	mov	r24, r21
    2d06:	57 ff       	sbrs	r21, 7
    2d08:	02 c0       	rjmp	.+4      	; 0x2d0e <dtoa_prf+0x242>
    2d0a:	e0 e0       	ldi	r30, 0x00	; 0
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	6e 2f       	mov	r22, r30
    2d10:	78 2f       	mov	r23, r24
    2d12:	e0 e0       	ldi	r30, 0x00	; 0
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	ae e2       	ldi	r26, 0x2E	; 46
    2d18:	9a 2e       	mov	r9, r26
    2d1a:	3a 01       	movw	r6, r20
    2d1c:	69 1a       	sub	r6, r25
    2d1e:	71 08       	sbc	r7, r1
    2d20:	2a 01       	movw	r4, r20
    2d22:	46 1a       	sub	r4, r22
    2d24:	57 0a       	sbc	r5, r23
    2d26:	0b 2d       	mov	r16, r11
    2d28:	10 e0       	ldi	r17, 0x00	; 0
    2d2a:	11 95       	neg	r17
    2d2c:	01 95       	neg	r16
    2d2e:	11 09       	sbc	r17, r1
    2d30:	6f 3f       	cpi	r22, 0xFF	; 255
    2d32:	8f ef       	ldi	r24, 0xFF	; 255
    2d34:	78 07       	cpc	r23, r24
    2d36:	29 f4       	brne	.+10     	; 0x2d42 <dtoa_prf+0x276>
    2d38:	d6 01       	movw	r26, r12
    2d3a:	9c 92       	st	X, r9
    2d3c:	c6 01       	movw	r24, r12
    2d3e:	01 96       	adiw	r24, 0x01	; 1
    2d40:	6c 01       	movw	r12, r24
    2d42:	46 17       	cp	r20, r22
    2d44:	57 07       	cpc	r21, r23
    2d46:	84 f0       	brlt	.+32     	; 0x2d68 <dtoa_prf+0x29c>
    2d48:	66 16       	cp	r6, r22
    2d4a:	77 06       	cpc	r7, r23
    2d4c:	6c f4       	brge	.+26     	; 0x2d68 <dtoa_prf+0x29c>
    2d4e:	7f 01       	movw	r14, r30
    2d50:	e4 0c       	add	r14, r4
    2d52:	f5 1c       	adc	r15, r5
    2d54:	a1 e0       	ldi	r26, 0x01	; 1
    2d56:	b0 e0       	ldi	r27, 0x00	; 0
    2d58:	ac 0f       	add	r26, r28
    2d5a:	bd 1f       	adc	r27, r29
    2d5c:	ea 0e       	add	r14, r26
    2d5e:	fb 1e       	adc	r15, r27
    2d60:	d7 01       	movw	r26, r14
    2d62:	11 96       	adiw	r26, 0x01	; 1
    2d64:	bc 90       	ld	r11, X
    2d66:	02 c0       	rjmp	.+4      	; 0x2d6c <dtoa_prf+0x2a0>
    2d68:	90 e3       	ldi	r25, 0x30	; 48
    2d6a:	b9 2e       	mov	r11, r25
    2d6c:	61 50       	subi	r22, 0x01	; 1
    2d6e:	71 09       	sbc	r23, r1
    2d70:	31 96       	adiw	r30, 0x01	; 1
    2d72:	c6 01       	movw	r24, r12
    2d74:	01 96       	adiw	r24, 0x01	; 1
    2d76:	7c 01       	movw	r14, r24
    2d78:	60 17       	cp	r22, r16
    2d7a:	71 07       	cpc	r23, r17
    2d7c:	24 f0       	brlt	.+8      	; 0x2d86 <dtoa_prf+0x2ba>
    2d7e:	d6 01       	movw	r26, r12
    2d80:	bc 92       	st	X, r11
    2d82:	6c 01       	movw	r12, r24
    2d84:	d5 cf       	rjmp	.-86     	; 0x2d30 <dtoa_prf+0x264>
    2d86:	64 17       	cp	r22, r20
    2d88:	75 07       	cpc	r23, r21
    2d8a:	41 f4       	brne	.+16     	; 0x2d9c <dtoa_prf+0x2d0>
    2d8c:	36 33       	cpi	r19, 0x36	; 54
    2d8e:	20 f4       	brcc	.+8      	; 0x2d98 <dtoa_prf+0x2cc>
    2d90:	35 33       	cpi	r19, 0x35	; 53
    2d92:	21 f4       	brne	.+8      	; 0x2d9c <dtoa_prf+0x2d0>
    2d94:	a1 10       	cpse	r10, r1
    2d96:	02 c0       	rjmp	.+4      	; 0x2d9c <dtoa_prf+0x2d0>
    2d98:	81 e3       	ldi	r24, 0x31	; 49
    2d9a:	b8 2e       	mov	r11, r24
    2d9c:	f6 01       	movw	r30, r12
    2d9e:	b0 82       	st	Z, r11
    2da0:	f7 01       	movw	r30, r14
    2da2:	82 2f       	mov	r24, r18
    2da4:	90 e2       	ldi	r25, 0x20	; 32
    2da6:	88 23       	and	r24, r24
    2da8:	19 f0       	breq	.+6      	; 0x2db0 <dtoa_prf+0x2e4>
    2daa:	91 93       	st	Z+, r25
    2dac:	81 50       	subi	r24, 0x01	; 1
    2dae:	fb cf       	rjmp	.-10     	; 0x2da6 <dtoa_prf+0x2da>
    2db0:	f7 01       	movw	r30, r14
    2db2:	e2 0f       	add	r30, r18
    2db4:	f1 1d       	adc	r31, r1
    2db6:	10 82       	st	Z, r1
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	29 96       	adiw	r28, 0x09	; 9
    2dbe:	0f b6       	in	r0, 0x3f	; 63
    2dc0:	f8 94       	cli
    2dc2:	de bf       	out	0x3e, r29	; 62
    2dc4:	0f be       	out	0x3f, r0	; 63
    2dc6:	cd bf       	out	0x3d, r28	; 61
    2dc8:	df 91       	pop	r29
    2dca:	cf 91       	pop	r28
    2dcc:	1f 91       	pop	r17
    2dce:	0f 91       	pop	r16
    2dd0:	ff 90       	pop	r15
    2dd2:	ef 90       	pop	r14
    2dd4:	df 90       	pop	r13
    2dd6:	cf 90       	pop	r12
    2dd8:	bf 90       	pop	r11
    2dda:	af 90       	pop	r10
    2ddc:	9f 90       	pop	r9
    2dde:	7f 90       	pop	r7
    2de0:	6f 90       	pop	r6
    2de2:	5f 90       	pop	r5
    2de4:	4f 90       	pop	r4
    2de6:	08 95       	ret

00002de8 <__ftoa_engine>:
    2de8:	28 30       	cpi	r18, 0x08	; 8
    2dea:	08 f0       	brcs	.+2      	; 0x2dee <__ftoa_engine+0x6>
    2dec:	27 e0       	ldi	r18, 0x07	; 7
    2dee:	33 27       	eor	r19, r19
    2df0:	da 01       	movw	r26, r20
    2df2:	99 0f       	add	r25, r25
    2df4:	31 1d       	adc	r19, r1
    2df6:	87 fd       	sbrc	r24, 7
    2df8:	91 60       	ori	r25, 0x01	; 1
    2dfa:	00 96       	adiw	r24, 0x00	; 0
    2dfc:	61 05       	cpc	r22, r1
    2dfe:	71 05       	cpc	r23, r1
    2e00:	39 f4       	brne	.+14     	; 0x2e10 <__ftoa_engine+0x28>
    2e02:	32 60       	ori	r19, 0x02	; 2
    2e04:	2e 5f       	subi	r18, 0xFE	; 254
    2e06:	3d 93       	st	X+, r19
    2e08:	30 e3       	ldi	r19, 0x30	; 48
    2e0a:	2a 95       	dec	r18
    2e0c:	e1 f7       	brne	.-8      	; 0x2e06 <__ftoa_engine+0x1e>
    2e0e:	08 95       	ret
    2e10:	9f 3f       	cpi	r25, 0xFF	; 255
    2e12:	30 f0       	brcs	.+12     	; 0x2e20 <__ftoa_engine+0x38>
    2e14:	80 38       	cpi	r24, 0x80	; 128
    2e16:	71 05       	cpc	r23, r1
    2e18:	61 05       	cpc	r22, r1
    2e1a:	09 f0       	breq	.+2      	; 0x2e1e <__ftoa_engine+0x36>
    2e1c:	3c 5f       	subi	r19, 0xFC	; 252
    2e1e:	3c 5f       	subi	r19, 0xFC	; 252
    2e20:	3d 93       	st	X+, r19
    2e22:	91 30       	cpi	r25, 0x01	; 1
    2e24:	08 f0       	brcs	.+2      	; 0x2e28 <__ftoa_engine+0x40>
    2e26:	80 68       	ori	r24, 0x80	; 128
    2e28:	91 1d       	adc	r25, r1
    2e2a:	df 93       	push	r29
    2e2c:	cf 93       	push	r28
    2e2e:	1f 93       	push	r17
    2e30:	0f 93       	push	r16
    2e32:	ff 92       	push	r15
    2e34:	ef 92       	push	r14
    2e36:	19 2f       	mov	r17, r25
    2e38:	98 7f       	andi	r25, 0xF8	; 248
    2e3a:	96 95       	lsr	r25
    2e3c:	e9 2f       	mov	r30, r25
    2e3e:	96 95       	lsr	r25
    2e40:	96 95       	lsr	r25
    2e42:	e9 0f       	add	r30, r25
    2e44:	ff 27       	eor	r31, r31
    2e46:	e6 53       	subi	r30, 0x36	; 54
    2e48:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4a:	99 27       	eor	r25, r25
    2e4c:	33 27       	eor	r19, r19
    2e4e:	ee 24       	eor	r14, r14
    2e50:	ff 24       	eor	r15, r15
    2e52:	a7 01       	movw	r20, r14
    2e54:	e7 01       	movw	r28, r14
    2e56:	05 90       	lpm	r0, Z+
    2e58:	08 94       	sec
    2e5a:	07 94       	ror	r0
    2e5c:	28 f4       	brcc	.+10     	; 0x2e68 <__ftoa_engine+0x80>
    2e5e:	36 0f       	add	r19, r22
    2e60:	e7 1e       	adc	r14, r23
    2e62:	f8 1e       	adc	r15, r24
    2e64:	49 1f       	adc	r20, r25
    2e66:	51 1d       	adc	r21, r1
    2e68:	66 0f       	add	r22, r22
    2e6a:	77 1f       	adc	r23, r23
    2e6c:	88 1f       	adc	r24, r24
    2e6e:	99 1f       	adc	r25, r25
    2e70:	06 94       	lsr	r0
    2e72:	a1 f7       	brne	.-24     	; 0x2e5c <__ftoa_engine+0x74>
    2e74:	05 90       	lpm	r0, Z+
    2e76:	07 94       	ror	r0
    2e78:	28 f4       	brcc	.+10     	; 0x2e84 <__ftoa_engine+0x9c>
    2e7a:	e7 0e       	add	r14, r23
    2e7c:	f8 1e       	adc	r15, r24
    2e7e:	49 1f       	adc	r20, r25
    2e80:	56 1f       	adc	r21, r22
    2e82:	c1 1d       	adc	r28, r1
    2e84:	77 0f       	add	r23, r23
    2e86:	88 1f       	adc	r24, r24
    2e88:	99 1f       	adc	r25, r25
    2e8a:	66 1f       	adc	r22, r22
    2e8c:	06 94       	lsr	r0
    2e8e:	a1 f7       	brne	.-24     	; 0x2e78 <__ftoa_engine+0x90>
    2e90:	05 90       	lpm	r0, Z+
    2e92:	07 94       	ror	r0
    2e94:	28 f4       	brcc	.+10     	; 0x2ea0 <__ftoa_engine+0xb8>
    2e96:	f8 0e       	add	r15, r24
    2e98:	49 1f       	adc	r20, r25
    2e9a:	56 1f       	adc	r21, r22
    2e9c:	c7 1f       	adc	r28, r23
    2e9e:	d1 1d       	adc	r29, r1
    2ea0:	88 0f       	add	r24, r24
    2ea2:	99 1f       	adc	r25, r25
    2ea4:	66 1f       	adc	r22, r22
    2ea6:	77 1f       	adc	r23, r23
    2ea8:	06 94       	lsr	r0
    2eaa:	a1 f7       	brne	.-24     	; 0x2e94 <__ftoa_engine+0xac>
    2eac:	05 90       	lpm	r0, Z+
    2eae:	07 94       	ror	r0
    2eb0:	20 f4       	brcc	.+8      	; 0x2eba <__ftoa_engine+0xd2>
    2eb2:	49 0f       	add	r20, r25
    2eb4:	56 1f       	adc	r21, r22
    2eb6:	c7 1f       	adc	r28, r23
    2eb8:	d8 1f       	adc	r29, r24
    2eba:	99 0f       	add	r25, r25
    2ebc:	66 1f       	adc	r22, r22
    2ebe:	77 1f       	adc	r23, r23
    2ec0:	88 1f       	adc	r24, r24
    2ec2:	06 94       	lsr	r0
    2ec4:	a9 f7       	brne	.-22     	; 0x2eb0 <__ftoa_engine+0xc8>
    2ec6:	84 91       	lpm	r24, Z
    2ec8:	10 95       	com	r17
    2eca:	17 70       	andi	r17, 0x07	; 7
    2ecc:	41 f0       	breq	.+16     	; 0x2ede <__ftoa_engine+0xf6>
    2ece:	d6 95       	lsr	r29
    2ed0:	c7 95       	ror	r28
    2ed2:	57 95       	ror	r21
    2ed4:	47 95       	ror	r20
    2ed6:	f7 94       	ror	r15
    2ed8:	e7 94       	ror	r14
    2eda:	1a 95       	dec	r17
    2edc:	c1 f7       	brne	.-16     	; 0x2ece <__ftoa_engine+0xe6>
    2ede:	e0 e7       	ldi	r30, 0x70	; 112
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	68 94       	set
    2ee4:	15 90       	lpm	r1, Z+
    2ee6:	15 91       	lpm	r17, Z+
    2ee8:	35 91       	lpm	r19, Z+
    2eea:	65 91       	lpm	r22, Z+
    2eec:	95 91       	lpm	r25, Z+
    2eee:	05 90       	lpm	r0, Z+
    2ef0:	7f e2       	ldi	r23, 0x2F	; 47
    2ef2:	73 95       	inc	r23
    2ef4:	e1 18       	sub	r14, r1
    2ef6:	f1 0a       	sbc	r15, r17
    2ef8:	43 0b       	sbc	r20, r19
    2efa:	56 0b       	sbc	r21, r22
    2efc:	c9 0b       	sbc	r28, r25
    2efe:	d0 09       	sbc	r29, r0
    2f00:	c0 f7       	brcc	.-16     	; 0x2ef2 <__ftoa_engine+0x10a>
    2f02:	e1 0c       	add	r14, r1
    2f04:	f1 1e       	adc	r15, r17
    2f06:	43 1f       	adc	r20, r19
    2f08:	56 1f       	adc	r21, r22
    2f0a:	c9 1f       	adc	r28, r25
    2f0c:	d0 1d       	adc	r29, r0
    2f0e:	7e f4       	brtc	.+30     	; 0x2f2e <__ftoa_engine+0x146>
    2f10:	70 33       	cpi	r23, 0x30	; 48
    2f12:	11 f4       	brne	.+4      	; 0x2f18 <__ftoa_engine+0x130>
    2f14:	8a 95       	dec	r24
    2f16:	e6 cf       	rjmp	.-52     	; 0x2ee4 <__ftoa_engine+0xfc>
    2f18:	e8 94       	clt
    2f1a:	01 50       	subi	r16, 0x01	; 1
    2f1c:	30 f0       	brcs	.+12     	; 0x2f2a <__ftoa_engine+0x142>
    2f1e:	08 0f       	add	r16, r24
    2f20:	0a f4       	brpl	.+2      	; 0x2f24 <__ftoa_engine+0x13c>
    2f22:	00 27       	eor	r16, r16
    2f24:	02 17       	cp	r16, r18
    2f26:	08 f4       	brcc	.+2      	; 0x2f2a <__ftoa_engine+0x142>
    2f28:	20 2f       	mov	r18, r16
    2f2a:	23 95       	inc	r18
    2f2c:	02 2f       	mov	r16, r18
    2f2e:	7a 33       	cpi	r23, 0x3A	; 58
    2f30:	28 f0       	brcs	.+10     	; 0x2f3c <__ftoa_engine+0x154>
    2f32:	79 e3       	ldi	r23, 0x39	; 57
    2f34:	7d 93       	st	X+, r23
    2f36:	2a 95       	dec	r18
    2f38:	e9 f7       	brne	.-6      	; 0x2f34 <__ftoa_engine+0x14c>
    2f3a:	10 c0       	rjmp	.+32     	; 0x2f5c <__ftoa_engine+0x174>
    2f3c:	7d 93       	st	X+, r23
    2f3e:	2a 95       	dec	r18
    2f40:	89 f6       	brne	.-94     	; 0x2ee4 <__ftoa_engine+0xfc>
    2f42:	06 94       	lsr	r0
    2f44:	97 95       	ror	r25
    2f46:	67 95       	ror	r22
    2f48:	37 95       	ror	r19
    2f4a:	17 95       	ror	r17
    2f4c:	17 94       	ror	r1
    2f4e:	e1 18       	sub	r14, r1
    2f50:	f1 0a       	sbc	r15, r17
    2f52:	43 0b       	sbc	r20, r19
    2f54:	56 0b       	sbc	r21, r22
    2f56:	c9 0b       	sbc	r28, r25
    2f58:	d0 09       	sbc	r29, r0
    2f5a:	98 f0       	brcs	.+38     	; 0x2f82 <__ftoa_engine+0x19a>
    2f5c:	23 95       	inc	r18
    2f5e:	7e 91       	ld	r23, -X
    2f60:	73 95       	inc	r23
    2f62:	7a 33       	cpi	r23, 0x3A	; 58
    2f64:	08 f0       	brcs	.+2      	; 0x2f68 <__ftoa_engine+0x180>
    2f66:	70 e3       	ldi	r23, 0x30	; 48
    2f68:	7c 93       	st	X, r23
    2f6a:	20 13       	cpse	r18, r16
    2f6c:	b8 f7       	brcc	.-18     	; 0x2f5c <__ftoa_engine+0x174>
    2f6e:	7e 91       	ld	r23, -X
    2f70:	70 61       	ori	r23, 0x10	; 16
    2f72:	7d 93       	st	X+, r23
    2f74:	30 f0       	brcs	.+12     	; 0x2f82 <__ftoa_engine+0x19a>
    2f76:	83 95       	inc	r24
    2f78:	71 e3       	ldi	r23, 0x31	; 49
    2f7a:	7d 93       	st	X+, r23
    2f7c:	70 e3       	ldi	r23, 0x30	; 48
    2f7e:	2a 95       	dec	r18
    2f80:	e1 f7       	brne	.-8      	; 0x2f7a <__ftoa_engine+0x192>
    2f82:	11 24       	eor	r1, r1
    2f84:	ef 90       	pop	r14
    2f86:	ff 90       	pop	r15
    2f88:	0f 91       	pop	r16
    2f8a:	1f 91       	pop	r17
    2f8c:	cf 91       	pop	r28
    2f8e:	df 91       	pop	r29
    2f90:	99 27       	eor	r25, r25
    2f92:	87 fd       	sbrc	r24, 7
    2f94:	90 95       	com	r25
    2f96:	08 95       	ret

00002f98 <strnlen_P>:
    2f98:	fc 01       	movw	r30, r24
    2f9a:	05 90       	lpm	r0, Z+
    2f9c:	61 50       	subi	r22, 0x01	; 1
    2f9e:	70 40       	sbci	r23, 0x00	; 0
    2fa0:	01 10       	cpse	r0, r1
    2fa2:	d8 f7       	brcc	.-10     	; 0x2f9a <strnlen_P+0x2>
    2fa4:	80 95       	com	r24
    2fa6:	90 95       	com	r25
    2fa8:	8e 0f       	add	r24, r30
    2faa:	9f 1f       	adc	r25, r31
    2fac:	08 95       	ret

00002fae <strnlen>:
    2fae:	fc 01       	movw	r30, r24
    2fb0:	61 50       	subi	r22, 0x01	; 1
    2fb2:	70 40       	sbci	r23, 0x00	; 0
    2fb4:	01 90       	ld	r0, Z+
    2fb6:	01 10       	cpse	r0, r1
    2fb8:	d8 f7       	brcc	.-10     	; 0x2fb0 <strnlen+0x2>
    2fba:	80 95       	com	r24
    2fbc:	90 95       	com	r25
    2fbe:	8e 0f       	add	r24, r30
    2fc0:	9f 1f       	adc	r25, r31
    2fc2:	08 95       	ret

00002fc4 <strrev>:
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	fc 01       	movw	r30, r24
    2fc8:	67 2f       	mov	r22, r23
    2fca:	71 91       	ld	r23, Z+
    2fcc:	77 23       	and	r23, r23
    2fce:	e1 f7       	brne	.-8      	; 0x2fc8 <strrev+0x4>
    2fd0:	32 97       	sbiw	r30, 0x02	; 2
    2fd2:	04 c0       	rjmp	.+8      	; 0x2fdc <strrev+0x18>
    2fd4:	7c 91       	ld	r23, X
    2fd6:	6d 93       	st	X+, r22
    2fd8:	70 83       	st	Z, r23
    2fda:	62 91       	ld	r22, -Z
    2fdc:	ae 17       	cp	r26, r30
    2fde:	bf 07       	cpc	r27, r31
    2fe0:	c8 f3       	brcs	.-14     	; 0x2fd4 <strrev+0x10>
    2fe2:	08 95       	ret

00002fe4 <fputc>:
    2fe4:	0f 93       	push	r16
    2fe6:	1f 93       	push	r17
    2fe8:	cf 93       	push	r28
    2fea:	df 93       	push	r29
    2fec:	fb 01       	movw	r30, r22
    2fee:	23 81       	ldd	r18, Z+3	; 0x03
    2ff0:	21 fd       	sbrc	r18, 1
    2ff2:	03 c0       	rjmp	.+6      	; 0x2ffa <fputc+0x16>
    2ff4:	8f ef       	ldi	r24, 0xFF	; 255
    2ff6:	9f ef       	ldi	r25, 0xFF	; 255
    2ff8:	28 c0       	rjmp	.+80     	; 0x304a <fputc+0x66>
    2ffa:	22 ff       	sbrs	r18, 2
    2ffc:	16 c0       	rjmp	.+44     	; 0x302a <fputc+0x46>
    2ffe:	46 81       	ldd	r20, Z+6	; 0x06
    3000:	57 81       	ldd	r21, Z+7	; 0x07
    3002:	24 81       	ldd	r18, Z+4	; 0x04
    3004:	35 81       	ldd	r19, Z+5	; 0x05
    3006:	42 17       	cp	r20, r18
    3008:	53 07       	cpc	r21, r19
    300a:	44 f4       	brge	.+16     	; 0x301c <fputc+0x38>
    300c:	a0 81       	ld	r26, Z
    300e:	b1 81       	ldd	r27, Z+1	; 0x01
    3010:	9d 01       	movw	r18, r26
    3012:	2f 5f       	subi	r18, 0xFF	; 255
    3014:	3f 4f       	sbci	r19, 0xFF	; 255
    3016:	31 83       	std	Z+1, r19	; 0x01
    3018:	20 83       	st	Z, r18
    301a:	8c 93       	st	X, r24
    301c:	26 81       	ldd	r18, Z+6	; 0x06
    301e:	37 81       	ldd	r19, Z+7	; 0x07
    3020:	2f 5f       	subi	r18, 0xFF	; 255
    3022:	3f 4f       	sbci	r19, 0xFF	; 255
    3024:	37 83       	std	Z+7, r19	; 0x07
    3026:	26 83       	std	Z+6, r18	; 0x06
    3028:	10 c0       	rjmp	.+32     	; 0x304a <fputc+0x66>
    302a:	eb 01       	movw	r28, r22
    302c:	09 2f       	mov	r16, r25
    302e:	18 2f       	mov	r17, r24
    3030:	00 84       	ldd	r0, Z+8	; 0x08
    3032:	f1 85       	ldd	r31, Z+9	; 0x09
    3034:	e0 2d       	mov	r30, r0
    3036:	09 95       	icall
    3038:	89 2b       	or	r24, r25
    303a:	e1 f6       	brne	.-72     	; 0x2ff4 <fputc+0x10>
    303c:	8e 81       	ldd	r24, Y+6	; 0x06
    303e:	9f 81       	ldd	r25, Y+7	; 0x07
    3040:	01 96       	adiw	r24, 0x01	; 1
    3042:	9f 83       	std	Y+7, r25	; 0x07
    3044:	8e 83       	std	Y+6, r24	; 0x06
    3046:	81 2f       	mov	r24, r17
    3048:	90 2f       	mov	r25, r16
    304a:	df 91       	pop	r29
    304c:	cf 91       	pop	r28
    304e:	1f 91       	pop	r17
    3050:	0f 91       	pop	r16
    3052:	08 95       	ret

00003054 <__ultoa_invert>:
    3054:	fa 01       	movw	r30, r20
    3056:	aa 27       	eor	r26, r26
    3058:	28 30       	cpi	r18, 0x08	; 8
    305a:	51 f1       	breq	.+84     	; 0x30b0 <__ultoa_invert+0x5c>
    305c:	20 31       	cpi	r18, 0x10	; 16
    305e:	81 f1       	breq	.+96     	; 0x30c0 <__ultoa_invert+0x6c>
    3060:	e8 94       	clt
    3062:	6f 93       	push	r22
    3064:	6e 7f       	andi	r22, 0xFE	; 254
    3066:	6e 5f       	subi	r22, 0xFE	; 254
    3068:	7f 4f       	sbci	r23, 0xFF	; 255
    306a:	8f 4f       	sbci	r24, 0xFF	; 255
    306c:	9f 4f       	sbci	r25, 0xFF	; 255
    306e:	af 4f       	sbci	r26, 0xFF	; 255
    3070:	b1 e0       	ldi	r27, 0x01	; 1
    3072:	3e d0       	rcall	.+124    	; 0x30f0 <__ultoa_invert+0x9c>
    3074:	b4 e0       	ldi	r27, 0x04	; 4
    3076:	3c d0       	rcall	.+120    	; 0x30f0 <__ultoa_invert+0x9c>
    3078:	67 0f       	add	r22, r23
    307a:	78 1f       	adc	r23, r24
    307c:	89 1f       	adc	r24, r25
    307e:	9a 1f       	adc	r25, r26
    3080:	a1 1d       	adc	r26, r1
    3082:	68 0f       	add	r22, r24
    3084:	79 1f       	adc	r23, r25
    3086:	8a 1f       	adc	r24, r26
    3088:	91 1d       	adc	r25, r1
    308a:	a1 1d       	adc	r26, r1
    308c:	6a 0f       	add	r22, r26
    308e:	71 1d       	adc	r23, r1
    3090:	81 1d       	adc	r24, r1
    3092:	91 1d       	adc	r25, r1
    3094:	a1 1d       	adc	r26, r1
    3096:	20 d0       	rcall	.+64     	; 0x30d8 <__ultoa_invert+0x84>
    3098:	09 f4       	brne	.+2      	; 0x309c <__ultoa_invert+0x48>
    309a:	68 94       	set
    309c:	3f 91       	pop	r19
    309e:	2a e0       	ldi	r18, 0x0A	; 10
    30a0:	26 9f       	mul	r18, r22
    30a2:	11 24       	eor	r1, r1
    30a4:	30 19       	sub	r19, r0
    30a6:	30 5d       	subi	r19, 0xD0	; 208
    30a8:	31 93       	st	Z+, r19
    30aa:	de f6       	brtc	.-74     	; 0x3062 <__ultoa_invert+0xe>
    30ac:	cf 01       	movw	r24, r30
    30ae:	08 95       	ret
    30b0:	46 2f       	mov	r20, r22
    30b2:	47 70       	andi	r20, 0x07	; 7
    30b4:	40 5d       	subi	r20, 0xD0	; 208
    30b6:	41 93       	st	Z+, r20
    30b8:	b3 e0       	ldi	r27, 0x03	; 3
    30ba:	0f d0       	rcall	.+30     	; 0x30da <__ultoa_invert+0x86>
    30bc:	c9 f7       	brne	.-14     	; 0x30b0 <__ultoa_invert+0x5c>
    30be:	f6 cf       	rjmp	.-20     	; 0x30ac <__ultoa_invert+0x58>
    30c0:	46 2f       	mov	r20, r22
    30c2:	4f 70       	andi	r20, 0x0F	; 15
    30c4:	40 5d       	subi	r20, 0xD0	; 208
    30c6:	4a 33       	cpi	r20, 0x3A	; 58
    30c8:	18 f0       	brcs	.+6      	; 0x30d0 <__ultoa_invert+0x7c>
    30ca:	49 5d       	subi	r20, 0xD9	; 217
    30cc:	31 fd       	sbrc	r19, 1
    30ce:	40 52       	subi	r20, 0x20	; 32
    30d0:	41 93       	st	Z+, r20
    30d2:	02 d0       	rcall	.+4      	; 0x30d8 <__ultoa_invert+0x84>
    30d4:	a9 f7       	brne	.-22     	; 0x30c0 <__ultoa_invert+0x6c>
    30d6:	ea cf       	rjmp	.-44     	; 0x30ac <__ultoa_invert+0x58>
    30d8:	b4 e0       	ldi	r27, 0x04	; 4
    30da:	a6 95       	lsr	r26
    30dc:	97 95       	ror	r25
    30de:	87 95       	ror	r24
    30e0:	77 95       	ror	r23
    30e2:	67 95       	ror	r22
    30e4:	ba 95       	dec	r27
    30e6:	c9 f7       	brne	.-14     	; 0x30da <__ultoa_invert+0x86>
    30e8:	00 97       	sbiw	r24, 0x00	; 0
    30ea:	61 05       	cpc	r22, r1
    30ec:	71 05       	cpc	r23, r1
    30ee:	08 95       	ret
    30f0:	9b 01       	movw	r18, r22
    30f2:	ac 01       	movw	r20, r24
    30f4:	0a 2e       	mov	r0, r26
    30f6:	06 94       	lsr	r0
    30f8:	57 95       	ror	r21
    30fa:	47 95       	ror	r20
    30fc:	37 95       	ror	r19
    30fe:	27 95       	ror	r18
    3100:	ba 95       	dec	r27
    3102:	c9 f7       	brne	.-14     	; 0x30f6 <__ultoa_invert+0xa2>
    3104:	62 0f       	add	r22, r18
    3106:	73 1f       	adc	r23, r19
    3108:	84 1f       	adc	r24, r20
    310a:	95 1f       	adc	r25, r21
    310c:	a0 1d       	adc	r26, r0
    310e:	08 95       	ret

00003110 <__prologue_saves__>:
    3110:	2f 92       	push	r2
    3112:	3f 92       	push	r3
    3114:	4f 92       	push	r4
    3116:	5f 92       	push	r5
    3118:	6f 92       	push	r6
    311a:	7f 92       	push	r7
    311c:	8f 92       	push	r8
    311e:	9f 92       	push	r9
    3120:	af 92       	push	r10
    3122:	bf 92       	push	r11
    3124:	cf 92       	push	r12
    3126:	df 92       	push	r13
    3128:	ef 92       	push	r14
    312a:	ff 92       	push	r15
    312c:	0f 93       	push	r16
    312e:	1f 93       	push	r17
    3130:	cf 93       	push	r28
    3132:	df 93       	push	r29
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
    3138:	ca 1b       	sub	r28, r26
    313a:	db 0b       	sbc	r29, r27
    313c:	0f b6       	in	r0, 0x3f	; 63
    313e:	f8 94       	cli
    3140:	de bf       	out	0x3e, r29	; 62
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	cd bf       	out	0x3d, r28	; 61
    3146:	09 94       	ijmp

00003148 <__epilogue_restores__>:
    3148:	2a 88       	ldd	r2, Y+18	; 0x12
    314a:	39 88       	ldd	r3, Y+17	; 0x11
    314c:	48 88       	ldd	r4, Y+16	; 0x10
    314e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3150:	6e 84       	ldd	r6, Y+14	; 0x0e
    3152:	7d 84       	ldd	r7, Y+13	; 0x0d
    3154:	8c 84       	ldd	r8, Y+12	; 0x0c
    3156:	9b 84       	ldd	r9, Y+11	; 0x0b
    3158:	aa 84       	ldd	r10, Y+10	; 0x0a
    315a:	b9 84       	ldd	r11, Y+9	; 0x09
    315c:	c8 84       	ldd	r12, Y+8	; 0x08
    315e:	df 80       	ldd	r13, Y+7	; 0x07
    3160:	ee 80       	ldd	r14, Y+6	; 0x06
    3162:	fd 80       	ldd	r15, Y+5	; 0x05
    3164:	0c 81       	ldd	r16, Y+4	; 0x04
    3166:	1b 81       	ldd	r17, Y+3	; 0x03
    3168:	aa 81       	ldd	r26, Y+2	; 0x02
    316a:	b9 81       	ldd	r27, Y+1	; 0x01
    316c:	ce 0f       	add	r28, r30
    316e:	d1 1d       	adc	r29, r1
    3170:	0f b6       	in	r0, 0x3f	; 63
    3172:	f8 94       	cli
    3174:	de bf       	out	0x3e, r29	; 62
    3176:	0f be       	out	0x3f, r0	; 63
    3178:	cd bf       	out	0x3d, r28	; 61
    317a:	ed 01       	movw	r28, r26
    317c:	08 95       	ret

0000317e <_exit>:
    317e:	f8 94       	cli

00003180 <__stop_program>:
    3180:	ff cf       	rjmp	.-2      	; 0x3180 <__stop_program>
